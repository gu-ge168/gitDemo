export const  jsData = [
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'JS获取浏览器可视区域尺寸 ',
            describe:'本文所说的是浏览器窗口的可视区域大小，不是浏览器窗口大小，也非页面尺寸。 在没有声明DOCTYPE的IE中，浏览器显示窗口大小只能以下获取： document.body.offsetWidth document.body.offsetHei...',
            author:"古歌",
            time:"2011-07-07",
            flow:95567,
            comments:[],
            enjoy:10,
            id:"6111.html",
            content:'<p>本文所说的是浏览器窗口的可视区域大小，不是浏览器窗口大小，也非页面尺寸。</p><p>在没有声明DOCTYPE的IE中，浏览器显示窗口大小只能以下获取：</p><pre class="prettyprint"><span class="pln">document</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">offsetWidthdocument</span><span class="pun">.</span><span class="pln">body</span><span class="pun">.</span><span class="pln">offsetHeight</span></pre><p>在声明了DOCTYPE的浏览器中，可以用以下来获取浏览器显示窗口大小：</p><pre class="prettyprint"><span class="pln">document</span><span class="pun">.</span><span class="pln">documentElement</span><span class="pun">.</span><span class="pln">clientWidthdocument</span><span class="pun">.</span><span class="pln">documentElement</span><span class="pun">.</span><span class="pln">clientHeight</span></pre><p>IE，FF，Safari皆支持该方法，opera虽支持该属性，但是返回的是页面尺寸；</p><p>同时，除了IE以外的所有浏览器都将此信息保存在window对象中，可以用以下获取：</p><pre class="prettyprint"><span class="pln">window</span><span class="pun">.</span><span class="pln">innerWidthwindow</span><span class="pun">.</span><span class="pln">innerHeight</span></pre>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript",  
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'js定时显示广告代码 ',
            describe:'这是一则定时显示广告的javascript代码，当然也可以定时显示某一区块内容，很实用。 代码如下： function strToDate(str, ext) { if (str == null || str == "") return; ...',
            author:"古歌",
            time:"2011-07-06",
            flow:38365,
            comments:[],
            enjoy:0,
            id:"6112.html",
            content:'<p>这是一则定时显示广告的javascript代码，当然也可以定时显示某一区块内容，很实用。</p><p><strong>代码如下：</strong></p><pre class="prettyprint"><span class="kwd">function</span><span class="pln"> strToDate</span><span class="pun">(</span><span class="pln">str</span><span class="pun">,</span><span class="pln"> ext</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">str </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> str </span><span class="pun">==</span><span class="pln"> </span><span class="str">""</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">	</span><span class="kwd">var</span><span class="pln"> arys </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Array</span><span class="pun">();</span><span class="pln">	arys </span><span class="pun">=</span><span class="pln"> str</span><span class="pun">.</span><span class="pln">split</span><span class="pun">(</span><span class="str">"-"</span><span class="pun">);</span><span class="pln">	</span><span class="kwd">var</span><span class="pln"> newDate </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">(</span><span class="pln">arys</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> arys</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> arys</span><span class="pun">[</span><span class="lit">2</span><span class="pun">],</span><span class="pln"> </span><span class="lit">9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">ext</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">		newDate </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">(</span><span class="pln">newDate</span><span class="pun">.</span><span class="pln">getTime</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1000</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">60</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">60</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">24</span><span class="pun">);</span><span class="pln">	</span><span class="pun">}</span><span class="pln">	</span><span class="kwd">return</span><span class="pln"> newDate</span><span class="pun">;</span><span class="pln"></span><span class="pun">}</span><span class="pln"></span><span class="kwd">function</span><span class="pln"> showit</span><span class="pun">(</span><span class="pln">str</span><span class="pun">,</span><span class="pln"> start</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">end</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">	</span><span class="kwd">var</span><span class="pln"> date </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">();</span><span class="pln">	</span><span class="kwd">var</span><span class="pln"> start </span><span class="pun">=</span><span class="pln"> strToDate</span><span class="pun">(</span><span class="pln">start</span><span class="pun">);</span><span class="pln">	</span><span class="kwd">var</span><span class="pln"> </span><span class="kwd">end</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> strToDate</span><span class="pun">(</span><span class="kwd">end</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">);</span><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">date </span><span class="pun">&amp;</span><span class="pln"> gt</span><span class="pun">;</span><span class="pln"> start </span><span class="pun">&amp;</span><span class="pln"> amp</span><span class="pun">;</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln"> amp</span><span class="pun">;</span><span class="pln"> date document</span><span class="pun">.</span><span class="pln">write</span><span class="pun">(</span><span class="pln">str</span><span class="pun">);</span><span class="pln"></span><span class="pun">}</span><span class="pln"></span><span class="pun">}</span></pre><p><strong>调取：</strong></p><pre class="prettyprint"><span class="pln">showit</span><span class="pun">(</span><span class="str">Your ads</span><span class="pun">,</span><span class="str">2011-07-06</span><span class="pun">,</span><span class="str">2011-07-18</span><span class="pun">);</span></pre>'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/uploads/2012/12/phone360-140x98.jpg",
            title:' JavaScript实现360度全景图片展示效果',
            describe:'360全景照片展示由于它的真实性、全视角等特点能够很好的展现产品。而我在工作之余写了一个360度图片展示效果，改变了普通图片平淡的特点，让人们在网上能够进行 360 度全视角观察，而且通过交互操作，可以实现自由浏览，从而震撼的视觉效果。 全...',
            author:"古歌",
            time:"2012-12-21",
            flow:105759,
            comments:[],
            enjoy:6,
            id:"6113.html",
            content:'<p>360全景照片展示由于它的真实性、全视角等特点能够很好的展现产品。而我在工作之余写了一个360度图片展示效果，改变了普通图片平淡的特点，让人们在网上能够进行 360 度全视角观察，而且通过交互操作，可以实现自由浏览，从而震撼的视觉效果。</p><p><strong>全景照片：</strong>所谓“全景拍摄”就是将所有拍摄的多张图片拼成一张全景图片。它的基本拍摄原理是搜索两张图片的边缘部分，并将成像效果最为接近的区域加以重合，以完成图片的自动拼接。现在的智能手机也基本带这个功能。</p><p><a class="btn-demo" href="http://www.daqianduan.com/example/?pid=4878" target="_blank">点此查看实例展示</a></p><p>这个小DEMO基于全景照片的左右边缘较为接近且适宜自动拼接与jser熟知的<strong>无缝滚动原理</strong>。下面这个图片就是本DEMO实现原理的简化图。</p><p style="text-align: center"><a href="http://www.daqianduan.com/wp-content/uploads/2012/12/noblankgallery.gif"><img data-tag="bdshare" title="noblankgallery" alt="" src="http://www.daqianduan.com/wp-content/uploads/2012/12/noblankgallery.gif" height="104" width="467"></a></p><p><strong>HTML结构:</strong></p><pre style="margin: 15px 0;font: 100 12px/18px monaco, andale mono, courier new;padding: 10px 12px;border: #ccc 1px solid;border-left-width: 4px;background-color: #fefefe;color: #444">  &lt;div class="pop_see_360pic" id="popseebox"&gt;		&lt;div class="pic_box"&gt;			&lt;div class="loading" id="pic360load"&gt;Loading...&lt;/div&gt;			&lt;div class="pic_box_inner" id="pic_box_inner"&gt;				&lt;img src="" /&gt;			&lt;/div&gt;			&lt;a href="void(0)" class="prev_arrow" id="prev"&gt;&lt;span&gt;←&lt;/span&gt;&lt;/a&gt;			&lt;a href="void(0)" class="pause_arrow" id="pause"&gt;&lt;span&gt;‖&lt;/span&gt;&lt;/a&gt;			&lt;a href="void(0)" class="next_arrow" id="next"&gt;&lt;span&gt;→&lt;/span&gt;&lt;/a&gt;		&lt;/div&gt;		&lt;div class="pic_list"&gt;			&lt;ul id="picListItem"&gt;				&lt;li&gt;&lt;a href="void(0)" class="sel"&gt;Standard Room&lt;/a&gt;&lt;/li&gt;				&lt;li&gt;&lt;a href="void(0)"&gt;Sea view Room (PVSU1)&lt;/a&gt;&lt;/li&gt;				&lt;li&gt;&lt;a href="void(0)"&gt;Royale Suite&lt;/a&gt;&lt;/li&gt;				&lt;li&gt;&lt;a href="void(0)"&gt;Bella Suite&lt;/a&gt;&lt;/li&gt;				&lt;li&gt;&lt;a href="void(0)"&gt;11Royale Suite (PVSU1)&lt;/a&gt;&lt;/li&gt;				&lt;li&gt;&lt;a href="void(0)"&gt;Royale Suite&lt;/a&gt;&lt;/li&gt;				&lt;li&gt;&lt;a href="void(0)"&gt;Bella Suite&lt;/a&gt;&lt;/li&gt;				&lt;li&gt;&lt;a href="void(0)"&gt;Royale Suite (PVSU1)&lt;/a&gt;&lt;/li&gt;			&lt;/ul&gt;		&lt;/div&gt;		&lt;a href="void(0)" class="mbtn mbtn-mini" id="close"&gt;X&lt;/a&gt;	&lt;/div&gt;</pre><p><strong>CSS样式：</strong></p><pre class="prettyprint"><span class="pun">*{</span><span class="pln">margin</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> padding</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;}</span><span class="pln">li</span><span class="pun">{</span><span class="pln">list</span><span class="pun">-</span><span class="pln">style</span><span class="pun">:</span><span class="pln"> none</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">body</span><span class="pun">{</span><span class="pln">font</span><span class="pun">-</span><span class="pln">size</span><span class="pun">:</span><span class="lit">11px</span><span class="pun">;}</span><span class="pln">a</span><span class="pun">{</span><span class="pln">text</span><span class="pun">-</span><span class="pln">decoration</span><span class="pun">:</span><span class="pln"> none</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic</span><span class="pun">:</span><span class="pln">after </span><span class="pun">{</span><span class="pln">clear</span><span class="pun">:</span><span class="pln">both</span><span class="pun">;</span><span class="pln">display</span><span class="pun">:</span><span class="pln">block</span><span class="pun">;</span><span class="pln">content</span><span class="pun">:</span><span class="str">"."</span><span class="pun">;</span><span class="pln">height</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;</span><span class="pln">visibility</span><span class="pun">:</span><span class="pln">hidden</span><span class="pun">;</span><span class="pln">font</span><span class="pun">-</span><span class="pln">size</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;</span><span class="pln">line</span><span class="pun">-</span><span class="pln">height</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">{</span><span class="pln">position</span><span class="pun">:</span><span class="pln">relative</span><span class="pun">;</span><span class="kwd">float</span><span class="pun">:</span><span class="pln">left</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">550px</span><span class="pun">;</span><span class="pln">padding</span><span class="pun">:</span><span class="lit">14px</span><span class="pln"> </span><span class="lit">70px</span><span class="pln"> </span><span class="lit">14px</span><span class="pln"> </span><span class="lit">71px</span><span class="pun">;</span><span class="pln">border</span><span class="pun">:</span><span class="lit">1px</span><span class="pln"> solid </span><span class="com">#CECECE;background-color:#FFFFFF;zoom:1;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic_fla </span><span class="pun">{</span><span class="pln">width</span><span class="pun">:</span><span class="lit">650px</span><span class="pun">;</span><span class="pln">padding</span><span class="pun">:</span><span class="lit">20px</span><span class="pln"> </span><span class="lit">40px</span><span class="pln"> </span><span class="lit">14px</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">mbtn </span><span class="pun">{</span><span class="pln">position</span><span class="pun">:</span><span class="pln">absolute</span><span class="pun">;</span><span class="pln">top</span><span class="pun">:</span><span class="lit">12px</span><span class="pun">;</span><span class="pln">right</span><span class="pun">:</span><span class="lit">20px</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_box </span><span class="pun">{</span><span class="pln">position</span><span class="pun">:</span><span class="pln">relative</span><span class="pun">;</span><span class="kwd">float</span><span class="pun">:</span><span class="pln">left</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">320px</span><span class="pun">;</span><span class="pln">height</span><span class="pun">:</span><span class="lit">240px</span><span class="pun">;</span><span class="pln">overflow</span><span class="pun">:</span><span class="pln">hidden</span><span class="pun">;</span><span class="pln">margin</span><span class="pun">-</span><span class="pln">right</span><span class="pun">:</span><span class="lit">10px</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_box img </span><span class="pun">{</span><span class="pln">display</span><span class="pun">:</span><span class="pln">block</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">320px</span><span class="pun">;</span><span class="pln">height</span><span class="pun">:</span><span class="lit">240px</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_list </span><span class="pun">{</span><span class="kwd">float</span><span class="pun">:</span><span class="pln">left</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">220px</span><span class="pun">;</span><span class="pln">height</span><span class="pun">:</span><span class="lit">240px</span><span class="pun">;</span><span class="pln">overflow</span><span class="pun">-</span><span class="pln">x</span><span class="pun">:</span><span class="pln">hidden</span><span class="pun">;</span><span class="pln">overflow</span><span class="pun">-</span><span class="pln">y</span><span class="pun">:</span><span class="kwd">auto</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_list ul </span><span class="pun">{</span><span class="pln">overflow</span><span class="pun">:</span><span class="pln">hidden</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">218px</span><span class="pun">;</span><span class="pln">border</span><span class="pun">:</span><span class="lit">1px</span><span class="pln"> solid </span><span class="com">#CECECE;border-bottom:0 none;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_list li </span><span class="pun">{</span><span class="kwd">float</span><span class="pun">:</span><span class="pln">left</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">218px</span><span class="pun">;</span><span class="pln">height</span><span class="pun">:</span><span class="lit">35px</span><span class="pun">;</span><span class="pln">font</span><span class="pun">-</span><span class="pln">weight</span><span class="pun">:</span><span class="pln">bold</span><span class="pun">;</span><span class="pln">border</span><span class="pun">-</span><span class="pln">bottom</span><span class="pun">:</span><span class="lit">1px</span><span class="pln"> solid </span><span class="com">#CECECE;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_list li a </span><span class="pun">{</span><span class="pln">display</span><span class="pun">:</span><span class="pln">block</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">100</span><span class="pun">%;</span><span class="pln">height</span><span class="pun">:</span><span class="lit">18px</span><span class="pun">;</span><span class="pln">overflow</span><span class="pun">:</span><span class="pln">hidden</span><span class="pun">;</span><span class="pln">padding</span><span class="pun">:</span><span class="lit">9px</span><span class="pln"> </span><span class="lit">10px</span><span class="pln"> </span><span class="lit">8px</span><span class="pln"> </span><span class="lit">10px</span><span class="pun">;</span><span class="pln">zoom</span><span class="pun">:</span><span class="lit">1</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_list li a</span><span class="pun">:</span><span class="pln">hover </span><span class="pun">{</span><span class="pln">text</span><span class="pun">-</span><span class="pln">decoration</span><span class="pun">:</span><span class="pln">none</span><span class="pun">;</span><span class="pln">background</span><span class="pun">-</span><span class="pln">color</span><span class="pun">:</span><span class="com">#EFF0F1;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_list li a</span><span class="pun">.</span><span class="pln">sel</span><span class="pun">,</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_list li a</span><span class="pun">.</span><span class="pln">sel</span><span class="pun">:</span><span class="pln">hover </span><span class="pun">{</span><span class="pln">text</span><span class="pun">-</span><span class="pln">decoration</span><span class="pun">:</span><span class="pln">none</span><span class="pun">;</span><span class="pln">background</span><span class="pun">-</span><span class="pln">color</span><span class="pun">:</span><span class="com">#C1D3F1;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">prev_arrow</span><span class="pun">,</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pause_arrow</span><span class="pun">,</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">next_arrow </span><span class="pun">{</span><span class="pln">position</span><span class="pun">:</span><span class="pln">absolute</span><span class="pun">;</span><span class="pln">left</span><span class="pun">:</span><span class="lit">124px</span><span class="pun">;</span><span class="pln">bottom</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;</span><span class="pln">width</span><span class="pun">:</span><span class="lit">70px</span><span class="pun">;</span><span class="pln">height</span><span class="pun">:</span><span class="lit">27px</span><span class="pun">;</span><span class="pln">overflow</span><span class="pun">:</span><span class="pln">hidden</span><span class="pun">;</span><span class="pln">padding</span><span class="pun">-</span><span class="pln">top</span><span class="pun">:</span><span class="lit">17px</span><span class="pun">;</span><span class="pln">text</span><span class="pun">-</span><span class="pln">align</span><span class="pun">:</span><span class="pln">center</span><span class="pun">;</span><span class="pln">font</span><span class="pun">-</span><span class="pln">size</span><span class="pun">:</span><span class="lit">12px</span><span class="pun">;</span><span class="pln">filter</span><span class="pun">:</span><span class="pln">progid</span><span class="pun">:</span><span class="typ">DXImageTransform</span><span class="pun">.</span><span class="typ">Microsoft</span><span class="pun">.</span><span class="pln">gradient</span><span class="pun">(</span><span class="pln">enabled</span><span class="pun">=</span><span class="str">"true"</span><span class="pun">,</span><span class="pln">startColorstr</span><span class="pun">=</span><span class="str">"#7FFFFFFF"</span><span class="pun">,</span><span class="pln"> endColorstr</span><span class="pun">=</span><span class="str">"#7FFFFFFF"</span><span class="pun">);</span><span class="pln">background</span><span class="pun">:</span><span class="pln">url</span><span class="pun">(</span><span class="pln">about</span><span class="pun">:</span><span class="pln">blank</span><span class="pun">);</span><span class="pln">background</span><span class="pun">:</span><span class="pln">rgba</span><span class="pun">(</span><span class="lit">255</span><span class="pun">,</span><span class="lit">255</span><span class="pun">,</span><span class="lit">255</span><span class="pun">,</span><span class="lit">0.5</span><span class="pun">);</span><span class="pln">z</span><span class="pun">-</span><span class="pln">index</span><span class="pun">:</span><span class="lit">9</span><span class="pun">;}</span><span class="pln"></span><span class="pun">:</span><span class="pln">root </span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">prev_arrow</span><span class="pun">,</span><span class="pln"></span><span class="pun">:</span><span class="pln">root </span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pause_arrow</span><span class="pun">,</span><span class="pln"></span><span class="pun">:</span><span class="pln">root </span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">next_arrow </span><span class="pun">{</span><span class="pln">filter</span><span class="pun">:</span><span class="pln">none</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">prev_arrow </span><span class="pun">{</span><span class="pln">left</span><span class="pun">:</span><span class="lit">53px</span><span class="pun">;</span><span class="pln">border</span><span class="pun">-</span><span class="pln">radius</span><span class="pun">:</span><span class="lit">10px</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">next_arrow </span><span class="pun">{</span><span class="pln">left</span><span class="pun">:</span><span class="lit">195px</span><span class="pun">;</span><span class="pln">border</span><span class="pun">-</span><span class="pln">radius</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> </span><span class="lit">10px</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">prev_arrow</span><span class="pun">:</span><span class="pln">hover</span><span class="pun">,</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pause_arrow</span><span class="pun">:</span><span class="pln">hover</span><span class="pun">,</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">next_arrow</span><span class="pun">:</span><span class="pln">hover </span><span class="pun">{</span><span class="pln">font</span><span class="pun">-</span><span class="pln">size</span><span class="pun">:</span><span class="lit">11px</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">pic_box img </span><span class="pun">{</span><span class="pln">width</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">auto</span><span class="pun">;</span><span class="pln">height</span><span class="pun">:</span><span class="pln"> </span><span class="lit">240px</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic</span><span class="pun">{</span><span class="pln">margin</span><span class="pun">:</span><span class="lit">10px</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pop_see_360pic </span><span class="pun">.</span><span class="pln">loading</span><span class="pun">{</span><span class="pln">position</span><span class="pun">:</span><span class="pln"> absolute</span><span class="pun">;</span><span class="pln"> top</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> left</span><span class="pun">:</span><span class="lit">0</span><span class="pun">;</span><span class="pln"> background</span><span class="pun">:</span><span class="com">#ebebeb url(http://www.daqianduan.com/wp-content/uploads/2012/12/loading_50_g.gif) no-repeat 134px 78px; width: 320px; height:240px; z-index:998; text-indent: -999px;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pic_box_inner</span><span class="pun">{</span><span class="pln">position</span><span class="pun">:</span><span class="pln">absolute</span><span class="pun">;</span><span class="pln"> width</span><span class="pun">:</span><span class="lit">5000px</span><span class="pun">;</span><span class="pln"> overflow</span><span class="pun">:</span><span class="pln"> hidden</span><span class="pun">;</span><span class="pln"> </span><span class="pun">*</span><span class="pln">zoom</span><span class="pun">:</span><span class="lit">1</span><span class="pun">;}</span><span class="pln"></span><span class="pun">.</span><span class="pln">pic_box_inner img</span><span class="pun">{</span><span class="kwd">float</span><span class="pun">:</span><span class="pln">left</span><span class="pun">;}</span></pre><p><strong>javascript:</strong></p><pre class="prettyprint"><span class="pln">window</span><span class="pun">.</span><span class="pln">onload </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span><span class="pln"></span><span class="kwd">var</span><span class="pln"> pic360play </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">initialize</span><span class="pun">()}</span><span class="pln">pic360play</span><span class="pun">.</span><span class="pln">prototype </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">	initialize </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span><span class="pln">		</span><span class="kwd">var</span><span class="pln"> oThis </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">popseebox </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"popseebox"</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">pic360load </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"pic360load"</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oPrev </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"prev"</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">opause </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"pause"</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oNext </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"next"</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">timeout </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">picList </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"picListItem"</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollIner </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"pic_box_inner"</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollBox </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollIner</span><span class="pun">.</span><span class="pln">parentNode</span><span class="pun">;</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollImg </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollBox</span><span class="pun">.</span><span class="pln">getElementsByTagName</span><span class="pun">(</span><span class="str">"img"</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">];</span><span class="pln">		</span><span class="com">/* ============= copy img for scrool no space =========== */</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollImgcopy </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollImg</span><span class="pun">.</span><span class="pln">cloneNode</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln">		</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollIner</span><span class="pun">.</span><span class="pln">appendChild</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">oScrollImgcopy</span><span class="pun">);</span><span class="pln">		</span><span class="com">/* =========== bind close pic360play popup event ========== */</span><span class="pln">		document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">"close"</span><span class="pun">).</span><span class="pln">onclick </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span><span class="pln">			oThis</span><span class="pun">.</span><span class="pln">close</span><span class="pun">(</span><span class="pln">popseebox</span><span class="pun">);</span><span class="pln">		</span><span class="pun">}</span><span class="pln">		</span><span class="com">/* ============== reset first img and layout ===============*/</span><span class="pln">		oThis</span><span class="pun">.</span><span class="pln">resetImg</span><span class="pun">();</span><span class="pln">		</span><span class="com">/* ============== give per link tabs pic =================*/</span><span class="pln">		oThis</span><span class="pun">.</span><span class="pln">picList</span><span class="pun">.</span><span class="pln">onclick </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">			e </span><span class="pun">=</span><span class="pln"> window</span><span class="pun">.</span><span class="kwd">event</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> window</span><span class="pun">.</span><span class="kwd">event</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> e</span><span class="pun">;</span><span class="pln">			</span><span class="kwd">var</span><span class="pln"> who </span><span class="pun">=</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">target </span><span class="pun">?</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">target </span><span class="pun">:</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">srcElement</span><span class="pun">;</span><span class="pln">			</span><span class="kwd">if</span><span class="pun">(</span><span class="pln">who</span><span class="pun">.</span><span class="pln">nodeType </span><span class="pun">==</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> who</span><span class="pun">.</span><span class="pln">tagName </span><span class="pun">==</span><span class="pln"> </span><span class="str">"A"</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> who</span><span class="pun">.</span><span class="pln">getAttribute</span><span class="pun">(</span><span class="str">"imgurl"</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> oThis</span><span class="pun">.</span><span class="pln">oScrollImgcopy</span><span class="pun">.</span><span class="pln">src </span><span class="pun">!=</span><span class="pln"> who</span><span class="pun">.</span><span class="pln">getAttribute</span><span class="pun">(</span><span class="str">"imgurl"</span><span class="pun">)){</span><span class="pln">				oThis</span><span class="pun">.</span><span class="pln">pic360load</span><span class="pun">.</span><span class="pln">style</span><span class="pun">.</span><span class="pln">display </span><span class="pun">=</span><span class="pln"> </span><span class="str">"block"</span><span class="pun">;</span><span class="pln">				</span><span class="kwd">var</span><span class="pln"> newimg </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Image</span><span class="pun">();</span><span class="pln">				newimg</span><span class="pun">.</span><span class="pln">src </span><span class="pun">=</span><span class="pln"> who</span><span class="pun">.</span><span class="pln">getAttribute</span><span class="pun">(</span><span class="str">"imgurl"</span><span class="pun">);</span><span class="pln">				newimg</span><span class="pun">.</span><span class="pln">onload </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pun">(){</span><span class="pln">					oThis</span><span class="pun">.</span><span class="pln">oScrollImg</span><span class="pun">.</span><span class="pln">src </span><span class="pun">=</span><span class="pln"> oThis</span><span class="pun">.</span><span class="pln">oScrollImgcopy</span><span class="pun">.</span><span class="pln">src </span><span class="pun">=</span><span class="pln"> who</span><span class="pun">.</span><span class="pln">getAttribute</span><span class="pun">(</span><span class="str">"imgurl"</span><span class="pun">);</span><span class="pln">						oThis</span><span class="pun">.</span><span class="pln">oScrollImg </span><span class="pun">=</span><span class="pln"> oThis</span><span class="pun">.</span><span class="pln">oScrollBox</span><span class="pun">.</span><span class="pln">getElementsByTagName</span><span class="pun">(</span><span class="str">"img"</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">];</span><span class="pln">						oThis</span><span class="pun">.</span><span class="pln">oScrollImgcopy </span><span class="pun">=</span><span class="pln"> oThis</span><span class="pun">.</span><span class="pln">oScrollBox</span><span class="pun">.</span><span class="pln">getElementsByTagName</span><span class="pun">(</span><span class="str">"img"</span><span class="pun">)[</span><span class="lit">1</span><span class="pun">];</span><span class="pln">						oThis</span><span class="pun">.</span><span class="pln">pic360load</span><span class="pun">.</span><span class="pln">style</span><span class="pun">.</span><span class="pln">display </span><span class="pun">=</span><span class="pln"> </span><span class="str">"none"</span><span class="pun">;</span><span class="pln">						clearTimeout</span><span class="pun">(</span><span class="pln">oThis</span><span class="pun">.</span><span class="pln">timeout</span><span class="pun">);</span><span class="pln">						oThis</span><span class="pun">.</span><span class="pln">resetMiddle</span><span class="pun">();</span><span class="pln">						oThis</span><span class="pun">.</span><span class="pln">timeout </span><span class="pun">=</span><span class="pln"> setInterval</span><span class="pun">(</span><span class="kwd">fu'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript",  
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'8个实用的JavaScript测试及效验工具 ',
            describe:'javaScript 是一款强大的广泛运用于现代Web站点及应用的脚本语言。作为一个技艺精湛的 Web 开发者，尤其是前端开发工程师，掌握 JavaScript可以增强用户的使用体验，提供交互及富客户端等功能。 尽管JavaScri...',
            author:"古歌",
            time:"2010-07-06",
            flow:53464,
            comments:[],
            enjoy:2,
            id:"6114.html",
            content:'<p><img data-tag="bdshare" class="aligncenter size-full wp-image-1848" title="jstools" src="http://www.daqianduan.com/wp-content/uploads/2010/07/jstools.png" alt="" height="160" width="640"></p><p><a title="15 个 JavaScript Web UI 库" rel="nofollow" href="http://www.daqianduan.com/15-javascript-web-ui/"><strong>javaScript</strong> </a>是一款强大的广泛运用于现代Web站点及应用的脚本语言。作为一个技艺精湛的<strong> Web 开发者</strong>，尤其是<a title="和讯招聘UI设计师和网页制作" rel="nofollow" href="http://www.daqianduan.com/ui-designers-web-pages/">前端开发工程师</a>，掌握JavaScript可以增强用户的使用体验，提供交互及富客户端等功能。</p><p>尽管JavaScript 的语法非常简单，但对于写程序而言仍然是困难重重，就是因为它的运行环境：基于Web浏览器。</p><p>以下您可以看到收集的<a href="http://www.daqianduan.com/8-tools-javascript/"><strong>8个实用的 JavaScript   测试及效验工具</strong></a>，它们都可以在不同环境下进行单元测试及校验测试您的脚本。</p><p><strong><a href="http://jslint.com/">JSLint</a></strong></p><p>JSLint是基于Web的验证JavaScript错误代码的工具。它拥有的功能及特定的设置来使用您的需求，自定义你的验证算法。</p><p><strong><a href="http://www.jsunit.net/">JsUnit</a></strong></p><p>JsUnit是一款在客户端(在浏览时)的单元测试JavaScript框架。对JavaScript而言，JUnit就像是它的一个端口。当然它也可以在多  个浏览器、多个机器的不同操作系统中自动运行。它的发展始于2001年1月。</p><p><strong><a href="http://j3unit.sourceforge.net/">J3Unit</a></strong></p><p>J3Unit是一个面向对象的JavaScript单元测试框架。J3Unit在网页浏览器中直接运行JavaScript的测试，也可以自动运行  JUnit 和 Jetty。J3Unit是建立在JUint和Script.aculo.us的基础之上来更好地实现自动运行JavaScript   单元测试。面向对象的JavaScript单元测试是由Script.aculo.us的Test.Unit.Runner对象编写的，基于 <a title="15 个 JavaScript Web UI 库" rel="nofollow" href="http://www.daqianduan.com/15-javascript-web-ui/"> prototype </a>JavaScript库。</p><p><strong><a href="http://www.thefrontside.net/crosscheck">Crosscheck</a></strong></p><p>Crosscheck是一款开源的校验浏览器中的JavaScript测试框架。它可以帮助您在不同的浏览器中，诸如：<a title="IE9预览版已全面支持HTML5和CSS3" rel="nofollow" href="http://www.daqianduan.com/ie9-html5-css3/">Internet </a>Explorer、<a title="Firefox 4.0性能、安全、HTML5支持将大幅改" rel="nofollow" href="http://www.daqianduan.com/firefox-4-0-html5/">Firefox</a>等，而不需要一  一安装他们来确认您的代码是否正确。您唯一需要的是必须要有Java虚拟机环境。</p><p><strong><a href="http://developer.yahoo.com/yui/yuitest/#start">YUI  Test</a></strong></p><p>YUI测试是一款基于浏览器，提供解决方案的测试框架。使用YUI，您可以方便地添加单元测试，寻求JavaScript解决方案。它是由 Yahoo!  UI   Library开发的一个JavaScriptMVC测试插件，能够让你模范大部分DOM动作，比如写，拖拽，比如模范AJAX响应，并且能够使用断言   (assertions)。它能够象函数一样运行，并且能够在不同的console窗口进行集成测试。虽然它不是在任何 xUnit   框架基础上开发而来，但YUI Test仍然有很多nUnit 和 JUnit的所具有的特性。（ While not a direct port   from any specific xUnit  framework, YUI Test does derive some   characteristics from nUnit and  JUnit. 这段翻译得不好，但相信大致意思是对的）。</p><p><strong><a href="http://erik.eae.net/playground/regexp/regexp.html">Regular    Expression Tool</a></strong></p><p>Regular Expression   Tool（正则表达式工具）是一款在线工具，用来测试您的正则表达式代码是否正确。当您想快速测试各种文本例子的正则表达式时非常得心应手。</p><p><strong><a href="http://broofa.com/Tools/JSLitmus/">JSLitmus</a></strong></p><p>JSLitmus是款轻量级的工具，用来测试JavaScript执行性能情况，采用直观的API。</p><p><strong><a href="http://www.codeproject.com/KB/scripting/regex2.aspx">JavaScript   Regular Expression Tester</a></strong></p><p>这块便利的应用程序是在浏览器中使用JavaScript来测试JavaScript正则表达式的。操作界面跟其他正则表达式测试工具无异，不同的  是，它测试的是JavaScript正则表达式在JavaScript中的性能情况。</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' javascript实现当前页导航激活 ',
            describe:'之前写过一篇导航效果，效果是有的，但是左辽同学所没有效果，我就再写这篇javascript实现当前页导航激活，希望像左辽同学类似的问题得到解决！',
            author:"古歌",
            time:"2010-06-25",
            flow:37373,
            comments:[],
            enjoy:0,
            id:"6115.html",
            content:'<p>之前写过一篇<a title="导航效果-大前端" href="../navigation-effect/">导航效果</a>，效果是有的，但是左辽同学所没有效果，我就再写这篇<a href="http://www.daqianduan.com/javascript-nav/">javascript实现当前页导航激活</a>，希望像左辽同学类似的问题得到解决！</p><p><strong>html</strong>（引用<a href="http://www.daqianduan.com">大前端</a>的导航，不可用#代替链接，测试可以新建几个静态页面）</p><blockquote><p>&lt;ul id=”nav”&gt;<br>&lt;li&gt;&lt;a href=”http://www.daqianduan.com/”&gt;首页&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=”http://www.daqianduan.com/category/html-css/”&gt;HTML/CSS&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=”http://www.daqianduan.com/category/javascript/”&gt;JavaScript&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=”http://www.daqianduan.com/category/seo/”&gt;SEO&lt;/a&gt;&lt;/li&gt;<br>&lt;li&gt;&lt;a href=”http://www.daqianduan.com/category/front-end/”&gt;前端新闻&lt;/a&gt;&lt;/li&gt;<br>&lt;/ul&gt;</p></blockquote><p><strong>javascript</strong>（给当前页面指定导航加了.on的class）</p><blockquote><p>$(function() {<br>var a1 = document.URL;<br>var a2 = $(“#nav a”);<br>for (var i = 0; i &lt; a2.length; i++) {<br>if (a1.indexOf($(a2[i]).attr(“href”)) != -1) {<br>$(a2[i]).parent().addClass(“on”);<br>return;<br>}<br>}<br>$(a2[0]).parent().addClass(“on”);<br>})</p></blockquote><p><strong>css</strong>（根据自己的需求做相关调整）</p><blockquote><p>#nav li{display:inline-block;float:left;text-align:center;height:36px;padding-left:4px;line-height:36px;background:url(http://img.daqianduan.com/ui/nav.gif) no-repeat right bottom;}<br>#nav li a{display:block;color:#777;padding:0 15px 0 10px;}<br>#nav li.on{font-weight:bold;background:url(http://img.daqianduan.com/ui/nav.gif) no-repeat 0 0;margin-left:-3px;}<br>#nav li.on a{background:url(http://img.daqianduan.com/ui/nav.gif) no-repeat right 0;}</p></blockquote>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' 一家之言：谈谈JavaScript匿名函数 ',
            describe:'匿名函数的概念大家也许不会陌生，但是我相信下面的内容会打开一些新的思路。 这两种方式有什么区别？思考一下... 1 第一种方式定义函数，函数声明过程在整个程序执行之前的预处理就完成了，所以只要处于同一个作用域，就可以访问到，即使...',
            author:"古歌",
            time:"2010-06-23",
            flow:25892,
            comments:[],
            enjoy:0,
            id:"6116.html",
            content:'<p>匿名函数的概念大家也许不会陌生，但是我相信下面的内容会打开一些新的思路。</p><p>我们知道函数的定义方式有两种：</p><blockquote><p>1 function fn1(){alert(‘fn1 works’);}</p><p>2 var fn2=function(){alert(‘fn2 works’);}</p></blockquote><p>这两种方式有什么区别？思考一下…</p><p>1 第一种方式定义函数，函数声明过程在整个程序执行之前的预处理就完成了，所以只要处于同一个作用域，就可以访问到，即使在定义之前调用它也可以。</p><p>2 第二章方式就是匿名函数，这种方式函数只能按照程序流程执行到定义的那一行代码才被声明，所以只能在定义之后调用它。</p><p>举个例子</p><blockquote><p>var fn1;</p><p>fn1();//报错</p><p>fn1=function(){</p><p>fn2();//fn2 works</p><p>alert(‘fn1 works’);</p><p>return false;</p><p>function fn2(){</p><p>alert(‘fn2 works’);</p><p>}</p><p>}</p><p>fn1();//fn2 works + fn1 works</p></blockquote><p>我们看到fn2虽然处在return之后，程序流程并没有执行到它，但是它依然可以被使用，反之fn2只有在它被定义之后才会被正常执行。</p><p>明白了这个，下面看一看匿名函数在递归里用处</p><p>递归就是函数内部调用自己，举个例子</p><blockquote><div>function fn1(n){</div><div>return n&gt;2?fn1(n-1)+fn1(n-2):n;</div><div>}</div></blockquote><p>当我们想把这个函数赋给其他的对象属性时，就要用到匿名函数，比如</p><blockquote><p>obj1={</p><p>fn:function(n){</p><div>return n&gt;2?obj1.fn(n-1)+obj1.fn(n-2):n;</div><div>}</div><div>}</div><div>obj2={</div><div>fn:obj.fn;</div><div>}</div></blockquote><div>这个时候可以正常调用obj2.fn()，但是这里有一个隐患，我们必须保证obj1里的fn不能被覆盖，看下面的例子</div><blockquote><div>obj1={}</div><div>obj2.fn();</div></blockquote><div>obj1被清空，执行出错，怎么办，解决办法有很多，自己先想一个…</div><div>最容易的想到的是使用this，更改obj1里面fn的定义如下</div><div><blockquote><p>obj1={</p><p>fn:function(n){</p><div>return n&gt;2?this.fn(n-1)+this.fn(n-2):n;</div><div>}</div><div>}</div></blockquote></div><div>这样即使obj1里的fn被改写也不影响obj2.fn()，但是this，你迷惑吗?</div><div>this在JavaScript里面绝对是一个难理解的概念，理解了最好，但是很多时候其实不一定非得用this，这个例子中，我们可以选个给匿名函数添加个名字</div><div><blockquote><p>obj1={</p><p>fn:function fnname(n){</p><div>return n&gt;2?fnname(n-1)+fnname(n-2):n;</div><div>}</div><div>}</div></blockquote></div><div>我们发现和this的结果一样，但是这就避开了this的混淆视听，而且注意这个函数名只有函数内部可以访问，外部是访问不了的(请私下测试)，这样就能避免诸如全局变量的问题。</div><div>还有一种解决方案，这个方案是最优雅的，所以我要作为大礼送给大家</div><div>我们知道有个arguments对象，这个对象里面有好多好玩的属性和方法，其中一个叫做callee，它的作用是调用函数本身！继续修改上面的例子</div><div><blockquote><p>obj1={</p><p>fn:function(n){</p><div>return n&gt;2?arguments.callee(n-1)+arguments.callee(n-2):n;</div><div>}</div><div>}</div></blockquote></div><div>这个是目前我发现最优雅的方法，大家有其他更好的方案可以拿来讨论。</div><div>匿名函数的讨论先到此为止。</div>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'关于私有函数内部this指向的讨论 ',
            describe:'假如我们试图这样操作：new ob(); 大家知道fn1会执行，弹出两个alert， 那么你对那两个alert 的结果感到迷惑吗？如果没有，下面的内容就不用看了，因为你都懂。关于这个问题，我问了很多人，有两个重要的观点相冲突。Aaron G...',
            author:"古歌",
            time:"2010-06-01",
            flow:19090,
            comments:[],
            enjoy:2,
            id:"6117.html",
            content:'<p>看下面这段“诡异”的代码</p><blockquote><p>var ob = function(){</p><p>var obj = this;</p><p>function fn1(){</p><p>alert( obj === window );//false</p><p>alert( this === window );//ture</p><p>}</p><p>fn1();</p><p>}</p></blockquote><p>假如我们试图这样操作：new ob(); 大家知道fn1会执行，弹出两个alert， 那么你对那两个alert 的结果感到迷惑吗？如果没有，下面的内容就不用看了，因为你都懂。</p><p>关于这个问题，我问了很多人，有两个重要的观点相冲突</p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace; line-height: 18px; font-size: 12px;">Aaron Gustafson ，easy designs 公司的老板，很好的一个朋友，经常帮我解答各种js问题。</span></p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace; line-height: 18px; font-size: 12px;">他的第一个解释是</span></p><blockquote><p>Private methods are self-contained objects that exist within&nbsp;the scope of the constructor. They’re not real methods on the prototype, so this within the private&nbsp;method will refer to the private method instance, not the myConstructor instance.</p></blockquote><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace; line-height: 18px; font-size: 12px;">我不太理解，于是问他解释，他回复我说</span></p><blockquote><p>Ok, so when you create a closure, a lot is determined by the execution context. In the case of the keyword “this,” the global object is assigned to it toward the end of the process (per the internals of the ECMAScript spec) if “this” is unassigned (or null).</p></blockquote><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace;"><span style="line-height: 18px; font-size: small;">其实我还是不太明白，但我试着这样解释</span></span></p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace;"><span style="line-height: 18px; font-size: small;">函数是自包含的对象，它创建的时候默认是赋给window全局对象的，当把这个函数赋给另外一个对象的时候，this的指向就会发生改变，我们知道私有函数是严格限制在构造方法里面的，对私有函数来说构造方法只是一个函数，不是对象（他还没被实例化呢），所以它里面的this当然还是指向window。</span></span></p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace;"><span style="line-height: 18px; font-size: small;">最终我还是发现我的解释打动不了我，这个时候，我在另外一本书里看到了一个新的解释。</span></span></p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace;"><span style="line-height: 18px; font-size: small;">作者是Douglas Crockford，这个人可是js社区里神一级的人物，JOSN 就是这个人发明和维护的。他给出的解释是，</span></span></p><blockquote><p>When a function is invoked with this pattern(私有函数), this&nbsp;&nbsp;is bound to the global object. This was a mistake in the design of the language.  Had the language been designed correctly, when the inner function is invoked, this&nbsp;would still be bound to the this&nbsp;variable of the outer function.</p></blockquote><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace;"><span>简单的说，他认为私有函数创建的时候，this 默认指向全局对象是语言设计的一个错误,他认为正确的模式应该是继承外部函数的this 指向。</span></span></p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace;"><span>这个解释显然更能打动我，于是我询问Aaron，他并不认为这是一个语言设计的错误，但是他也很矛盾，显然他对于自己的解释也不是完全满意，他说他相信</span></span><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace; line-height: 18px; font-size: 12px;">Brendan Eich（js创始人）应该有他自己的理由。</span></p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace; line-height: 18px; font-size: 12px;">讨论还是继续，相信谁的解释取决于读者自己。但是结果就是，如果你想在私有函数内部引用外部对象，唯一的办法就是在外面保存this 的值，你会发现我是这么做的。</span></p><p><span style="font-family: Consolas, Monaco, "Courier New", Courier, monospace; line-height: 18px; font-size: 12px;">this 问题是伪类继承的一个难题，如果你想避开this，我建议你使用js自己的函数式继承，实践证明，借鉴别人的东西不一定是最好的。</span></p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'  一家之言：说说 JavaScript 计时器的工作原理',
            describe:'计时器是一个很牛X的东西，但是很多人其实只限于知道它的语法，缺乏对其原理的认识。计时器通过设定一定的时间段（毫秒）来异步的执行一段代码。因为 Javascript 是一个单线程语言，计时器提供了一种绕过这种语言限制来执行代码的能力。',
            author:"古歌",
            time:"2010-05-21",
            flow:32907,
            comments:[],
            enjoy:1,
            id:"6118.html",
            content:'<p>看下面内容之前，看一小段代码，如果读者能说出代码的用意，那就没必要往下看了，因为你都懂。</p><blockquote><p>setTimeout(function(){</p><p>/* Some long block of code… */</p><p>setTimeout(arguments.callee, 10);</p><p>}, 10);</p><p>setInterval(function(){</p><p>/* Some long block of code… */</p><p>}, 10);</p></blockquote><p>计时器是一个很牛X的东西，但是很多人其实只限于知道它的语法，缺乏对其原理的认识。计时器通过设定一定的时间段（毫秒）来异步的执行一段代码。因为 Javascript 是一个单线程语言，计时器提供了一种绕过这种语言限制来执行代码的能力。</p><p>今天就简单的来说下计时器的工作原理。</p><p>JavaScript 提供了三个函数来构建和操作计时器</p><p>1 var id = setTimeout(fn, delay);</p><p>2 var id = setInterval(fn, delay);</p><p>3 clearInterval(id); clearTimeout(id);</p><p>具体的语法我就不多说了，可以查手册。为了了解计时器的工作原理，有一个概念必须记在心里：时间延迟不能被保证。什么意思，就是说你这样写setTimeout(fn, 500)并不代表fn肯定在500毫秒之后马上就执行，延迟很可能会更长。因为 JavaScript 是单线程语言，所有的异步事件（包括计时器、鼠标事件或者一个 XMLHttpRequest 完成）仅仅当程序执行期间有缺口的时候才会执行，不是你规定了什么时候就什么时候执行，要知道程序员不是万能的，你写的东西最终还是要看浏览器脸色的。</p><p>下面的这张图片可以很好的说明问题，感谢 John Resig 大神。</p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1116" title="Timers" src="http://www.daqianduan.com/wp-content/uploads/2010/05/Timers.png" alt="" height="320" width="427"></p><p>从上往下看，左面的数字代表时间（毫秒），右面的文字代表了一系列异步事件的设置和触发，中间则是代码块。最上面的 JavaScript 代码块可能是你在浏览器载入的时候执行的片段，大概耗时18毫秒，紧接着下面的 Mouse Click Callback 代码块可能是你一个鼠标事件触发时的回调函数，大概耗时11毫秒，依次类推。</p><p>JavaScript 的单线程特性决定了每次只能执行一块，所以当第一块代码执行的时候（它一共运行了18毫秒），本身构造了两个计时器，期间可能用户还点了一下鼠标（你有过在网页一打开还没载完就在那乱点的情况吗）。按理说用户点完鼠标就应该马上执行那个回调函数，但是不行，JavaScript 执行只有一条道嘛，在那18毫秒没跑完之前，其他代码块想执行就只能排队，没空间给你超车都。那两个计时器都是10毫秒的延迟，从图中可以看到，setTimeout也在那18毫秒执行结束之前触发了，没办法也排队吧。</p><p>终于，18毫秒后，天上一道神雷把前面的车直接劈成空气了，后面两个排队的可以过去了，但是还得一个一个，不能并列，那谁先过去呢？是不是两个人在那划拳？不是的，浏览器说的算，浏览器说，鼠标单击事件先过去，setTimeout只能继续等11毫秒。注意看图，在鼠标事件回调函数执行的时候，又一个计时器事件触发了（setInterval），等着，而且必须排在setTimeout的后面。</p><p>11毫秒过去了，setTimeout 终于可以过去了，注意看，setInterval 的第二次触发了，虽然它第一次都在排队呢，如果这个时候还向往常一样排队，最后是什么情况，setTimeout执行完了，就会连续执行两个setInterval，你设置的延迟没用了都。所以浏览器还是比较智能的，它在处理setInterval的时候，如果发现已经有排队的，就直接把新来的 Kill 掉。</p><p>接着看，轮到排队的 setInterval 第一次触发开始执行了，它执行的时候，第三次触发又到了，这一次没有排队了，所以浏览器没把它 Kill 掉，给丫排队的机会，所以你会发现这两次的setInterval的执行没有间隔的，如果你做一个幻灯片，遇到这种情况就要好好想想自己的代码是不是有问题了。</p><p>最后，再也没有别的因素干扰了 setInterval 了（假如用户被 MM 叫走了），setInterval 就按照你想要的步骤执行了。</p><p>讲到这里，开头的代码可以理解了吧。</p><blockquote><p>setTimeout(function(){</p><p>/* Some long block of code… */</p><p>setTimeout(arguments.callee, 10);</p><p>}, 10);</p><p>setInterval(function(){</p><p>/* Some long block of code… */</p><p>}, 10);</p></blockquote><p>这两个函数看起来效果一样，其实不然，第一个代码块总会延迟10毫秒执行，虽然大多时候是大于10毫秒的。而第二个每到10毫秒就尝试执行，不管之前的触发执行了没有。</p><p>总结起来四条</p><p>• JavaScript 引擎只有一个线程，它会迫使某些异步事件排队</p><p>• setTimeout 和 setInterval 在执行异步代码的时候有很大区别</p><p>• 假如一个计时器被阻止执行，它会等待知道遇到一个代码执行空隙，通常时间比预计的要长</p><p>• Intervals 可能会一个挨着一个执行，如果回调函数的执行时间大于间隔</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'15 个 JavaScript Web UI 库 ',
            describe:'几乎所有的富 Web 应用都基于一个或多个 Web UI 库或框架，这些 UI 库与框架极大地简化了开发进程，并带来一致，可靠，以及高度交互性的用户界面。本文介绍了 15 个非常强大的 JavaScript Web UI 库，非常适合各种各...',
            author:"古歌",
            time:"2010-05-20",
            flow:50703,
            comments:[],
            enjoy:2,
            id:"6119.html",
            content:'<p>几乎所有的富 Web 应用都基于一个或多个 Web UI 库或框架，这些 UI  库与框架极大地简化了开发进程，并带来一致，可靠，以及高度交互性的用户界面。本文介绍了 15 个非常强大的 JavaScript Web UI  库，非常适合各种各种规模的富 Web 应用的开发。</p><h2>LivePipe</h2><p>LivePipe UI 基于 Prototype Javascript 框架，包含了一整套经严格 测试并高度可扩展的 UI 控件，拥有很好的文档，在不支持 JavaScript 的环境中，可以无缝降级使用。包括 Tab,  窗体，文本框，多选框，评分控件，进度条，滚动条，右键菜单等多种控件。</p><p><a href="http://livepipe.net/"><strong>LivePipe</strong> 首页与下载</a><br><a href="http://livepipe.net/control#rating"><strong>LivePipe</strong> 演示与示例</a></p><p><a href="http://livepipe.net/control#rating"><img data-tag="bdshare" class="aligncenter size-full wp-image-1090" title="webui_02" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_02.jpg" alt="" height="287" width="640"></a></p><h2>UKI</h2><p>UKI 是一套简单的 JavaScript UI  工具集，用于快速创建桌面风格的 Web 应用。包含的控件从滑动条，到分栏视图，不一而足。熟悉 jQuery 的开发者会发现这个工具很容易上手，非常简洁，无需安装框架，不依赖  CSS 引用。</p><p><a href="http://ukijs.org/"><strong>UKI</strong> 主页与下载</a><br><a href="http://ukijs.org/examples/"><strong>UKI</strong> 控件，演示，示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1091" title="webui_04" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_04.jpg" alt="" height="261" width="640"></p><h2>MochaUI</h2><p>MochaUI 是 MooTools Javascript 框架 与 ExplorerCanvas  的一个备受欢迎的扩展，可以用来快速创建 Web 应用，Web 桌面，网站，饰件，独立 Windows，Modal 对话框等等。</p><p><a href="http://mochaui.com/"><strong>MochaUI</strong> 主页与下载</a><br><a href="http://mochaui.com/demo/"><strong>MochaUI</strong> 控件，演示，示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1092" title="webui_06" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_06.jpg" alt="" height="261" width="640"></p><h2>Sigma Ajax UI Builder</h2><p>SigmaVisual 是一套基于 Web 的，所见即所得的 AJAX UI 创建工具，包含超过40个不见，如 Tab，对话框，树形图，时间线等，基于  JavaScript 和 PHP。</p><p><a href="http://sourceforge.net/projects/ajaxuibuilder/"><strong>Sigma  Ajax UI Builder</strong> 主页和下载</a><br><a href="http://www.sigmawidgets.com/products/sigma_visual/VisualJS/index.html"><strong>Sigma  Ajax UI Builder</strong> 控件，演示和示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1093" title="webui_08" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_08.jpg" alt="" height="261" width="640"></p><h2>JxLib based MooTools</h2><p>JxLib 是一个基于 MooTools 的 JavaScript UI 框架，包含多数 Web  程序都需要的基本空间，如按钮，Tab，菜单，树形结构，对话框等等。JxLib 还支持换肤功能。</p><p><strong>JxLib</strong> 主页与下载<br><strong>JxLib</strong> 控件，演示与示例</p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1094" title="webui_10" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_10.jpg" alt="" height="261" width="640"></p><h2>Dijit – The Dojo Toolkit</h2><p>Dijit 基于 Dojo，也是学习 Dojo  扩展的一个好起点。可以用来创建非常漂亮的 Web 2.0 GUI。支持多语种，甚至支持不同语种的文字书写方向以及本地化数字，日期等等。</p><p><a href="http://dojotoolkit.org/reference-guide/dijit/index.html"><strong>Dijit</strong> 主页，下载</a><br><a href="http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html"><strong>Dijit</strong> 控件，演示，示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1095" title="webui_12" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_12.jpg" alt="" height="261" width="640"></p><h2>jQuery TOOLS</h2><p>jQuery Tools 是一个非常轻量（2.5kb）的常用 UI 库，支持以下 jQuery 对象，Tabs, 工具提示，滚动条，层，表单以及 Flash 嵌套。</p><p><a href="http://flowplayer.org/tools/index.html"><strong>jQuery TOOLS</strong> 主页与下载</a><br><a href="http://flowplayer.org/tools/demos/index.html"><strong>jQuery  TOOLS</strong> 控件，演示，示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1096" title="webui_14" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_14.jpg" alt="" height="261" width="640"></p><h2>jQuery UI</h2><p>jQuery UI 基于 jQuery，包含 3 个大类，饰件，一些内置的 UI  对象；效果，对各种网页对象施加动画效果（如爆炸效果）；鼠标交互，如拖放操作。</p><p><a href="http://jqueryui.com/home"><strong>jQuery UI</strong> 首页与下载</a><br><a href="http://jqueryui.com/demos/"><strong>jQuery UI</strong> 控件，演示与示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1097" title="webui_16" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_16.jpg" alt="" height="261" width="640"></p><h2>Prototype UI</h2><p>Prototype UI 基于 Prototype 与 Script.aculo.us，包括多个模块（旋转木马，Modal  窗口，阴影，右键菜单等），每个模块可以单独安装使用。</p><p><a href="http://www.prototype-ui.com/"><strong>Prototype UI</strong> 主页与下载</a><br><a href="http://docs.prototype-ui.com/rc0/Window"><strong>Prototype  UI</strong> 控件，演示与示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1098" title="webui_18" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_18.jpg" alt="" height="261" width="640"></p><h2>Jitsu</h2><p>Jitsu 功能包括 XML  标记，页面编译，动画引擎，Ajax 以及运行时检测等等，它的 Ajax 功能使消费级 Web  应用的创建变得非常简单，支持客户端数据绑定，还可以将页面编译成 JavaScript，Jitsu 在 Firefox 和 IE  中运行最佳。</p><p><a href="http://www.jitsu.org/jitsu/index.html"><strong>Jitsu</strong> 主页与下载</a><br><a href="http://www.jitsu.org/jitsu/quicktours/basic_helloworld.html"><strong>Jitsu</strong> 控件，演示与示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1099" title="webui_20" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_20.jpg" alt="" height="261" width="640"></p><h2>Qutensil</h2><p>Qutensil 仍在开发中，但其路线图已经显示出某些引人注目的东西，基于 Prototype 与 Scriptaculous ，包含消息，调色板，滑动条，工具提示，可拖放窗口以及警告，确认，提示等窗口。</p><p><a href="http://qutensil.com/"><strong>Qutensil</strong> 主页，下载</a><br><a href="http://qutensil.com/pages/modules"><strong>Qutensil</strong> 控件，演示，示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1100" title="webui_22" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_22.jpg" alt="" height="261" width="640"></p><h2>Script.aculo.us</h2><p>script.aculo.us 是一个备受欢迎的 UI  工具集，基于 Prototype 框架，提供了诸如视觉效 果，UI 控件以及面向 DOM 的工具。</p><p><strong>Script.aculo.us</strong> 首页与下载</p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1101" title="webui_24" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_24.jpg" alt="" height="261" width="640"></p><h2>Alloy UI</h2><p>AlloyUI 是一套功能丰富的 UI 框架，基于 YUI  3，部分基于 YUI 2，包含一套丰富的（超过60）UI 部件，如图片库，对话框，树形结构，面板，自动完成，按钮，日历控件，工具条等。</p><p><a href="http://alloy.liferay.com/"><strong>Alloy UI</strong> 首页和下载</a><br><a href="http://alloy.liferay.com/demos.php"><strong>Alloy UI</strong> 控件，演示与示例</a></p><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1102" title="webui_26" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_26.jpg" alt="" height="261" width="640"></p><h2>iUI: iPhone UI 框架</h2><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1103" title="webui_27" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_27.jpg" alt="" height="77" width="253"></p><p>IUI 包含一套 JavaScript 库，CSS  式样表及图片，是一个轻量级 iPhone UI 库，包含 iPhone 风格导航菜单，设备方向，iPhone 风格切换等功能，可以为你的  Web 程序带来 iPhone 般的体验。</p><p><a href="http://code.google.com/p/iui/"><strong>iUI</strong> 主页与下载</a></p><h2>XUI</h2><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1104" title="webui_29" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_29.jpg" alt="" height="77" width="253"></p><p>XUI 是一个用于移动 Web  应用的轻量，极简，高度模块化的框架。它之所以非常轻量的原因是，它只支持移动浏览器，所有跨浏览器支持的代码都被剥离。它面向一线移动 Web  浏览器，如 Webkit，Fennec 以及 Opera，并有意将来对移动 IE 和黑莓提供支持。</p><p><a href="http://xuijs.com/"><strong>XUI</strong> 首页，下载</a></p><h2>Yahoo! YUI Library</h2><p><img data-tag="bdshare" class="aligncenter size-full wp-image-1105" title="webui_30" src="http://www.daqianduan.com/wp-content/uploads/2010/05/webui_30.jpg" alt="" height="261" width="640"></p><p>Yahoo! YUI Library 可谓所有  Web UI 之父，可靠，功能丰富，目前已经发展到第 3 版。它拥有一个很庞大的开发团队，推出了非常丰富的功能，就功能而言，无可匹敌。</p><p><a href="http://developer.yahoo.com/yui/"><strong>YUI Library</strong> 主页与下载</a><br><a href="http://developer.yahoo.com/yui/2/"><strong>YUI2  入门</strong></a><br><a href="http://developer.yahoo.com/yui/3/"><strong>YUI3  入门</strong></a><br><a href="http://developer.yahoo.com/yui/3/"><strong>YUI3</strong> 控件，演示与示例</a></p><p>本文国际来源：Specky Boy <a href="http://speckyboy.com/2010/05/17/15-javascript-web-ui-libraries-frameworks-and-libraries/">15  Javascript Web UI Libraries, Frameworks and Toolkits</a></p><p>中文编译来源：<a href="http://www.comsharp.com/"><strong>锐商企业CMS</strong> 网站内容管理系统</a> 官方网站</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            tag_url:'前端资讯', 
            tag:"前端资讯",
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'实用的 JavaScript 测试及效验工具 ',
            describe:'JavaScript 是一款强大的广泛运用于现代Web站点及应用的脚本语言。作为一个技艺精湛的 Web 开发者，掌握JavaScript可以增强用户的使用体验，提供交互及富客户端等功能。 尽管JavaScript 的语法非常简单，但对于写...',
            author:"古歌",
            time:"2010-05-03",
            flow:11163,
            comments:[],
            enjoy:0,
            id:"6120.html",
            content:'<p><strong>JavaScript</strong> 是一款强大的广泛运用于现代Web站点及应用的脚本语言。作为一个技艺精湛的<strong> Web 开发者</strong>，掌握JavaScript可以增强用户的使用体验，提供交互及富客户端等功能。<br>尽管JavaScript 的语法非常简单，但对于写程序而言仍然是困难重重，就是因为它的运行环境：基于Web浏览器。 		以下您可以看到收集的<strong>8个实用的 JavaScript   测试及效验工具</strong>，它们都可以在不同环境下进行单元测试及校验测试您的脚本。</p><p><strong>JSLint </strong><br>JSLint是基于Web的验证JavaScript错误代码的工具。它拥有的功能及特定的设置来使用您的需求，自定义你的验证算法。</p><p><strong>JsUnit </strong><br>JsUnit是一款在客户端(在浏览时)的单元测试JavaScript框架。对JavaScript而言，JUnit就像是它的一个端口。当然它也可以在多  个浏览器、多个机器的不同操作系统中自动运行。它的发展始于2001年1月。</p><p><strong>J3Unit </strong><br>J3Unit是一个面向对象的JavaScript单元测试框架。J3Unit在网页浏览器中直接运行JavaScript的测试，也可以自动运行  JUnit 和 Jetty。J3Unit是建立在JUint和Script.aculo.us的基础之上来更好地实现自动运行JavaScript   单元测试。面向对象的JavaScript单元测试是由Script.aculo.us的Test.Unit.Runner对象编写的，基于  prototype JavaScript库。</p><p><strong>Crosscheck </strong><br>Crosscheck是一款开源的校验浏览器中的JavaScript测试框架。它可以帮助您在不同的浏览器中，诸如：Internet    Explorer、Firefox等，而不需要一  一安装他们来确认您的代码是否正确。您唯一需要的是必须要有Java虚拟机环境。</p><p><strong>YUI  Test </strong><br>YUI测试是一款基于浏览器，提供解决方案的测试框架。使用YUI，您可以方便地添加单元测试，寻求JavaScript解决方案。它是由 Yahoo!  UI   Library开发的一个JavaScriptMVC测试插件，能够让你模范大部分DOM动作，比如写，拖拽，比如模范AJAX响应，并且能够使用断言   (assertions)。它能够象函数一样运行，并且能够在不同的console窗口进行集成测试。虽然它不是在任何 xUnit   框架基础上开发而来，但YUI Test仍然有很多nUnit 和 JUnit的所具有的特性。（ While not a direct port   from any specific xUnit  framework, YUI Test does derive some   characteristics from nUnit and  JUnit. 这段翻译得不好，但相信大致意思是对的）。</p><p><strong>Regular    Expression Tool </strong><br>Regular Expression   Tool（正则表达式工具）是一款在线工具，用来测试您的正则表达式代码是否正确。当您想快速测试各种文本例子的正则表达式时非常得心应手。</p><p><strong>JSLitmus </strong><br>JSLitmus是款轻量级的工具，用来测试JavaScript执行性能情况，采用直观的API。</p><p><strong>JavaScript   Regular Expression Tester </strong><br>这块便利的应用程序是在浏览器中使用JavaScript来测试JavaScript正则表达式的。操作界面跟其他正则表达式测试工具无异，不同的  是，它测试的是JavaScript正则表达式在JavaScript中的性能情况。</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            tag_url:'前端资讯', 
            tag:"前端资讯",
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' HTML、CSS、JavaScript等Web开发技术电子资料汇总 ',
            describe:'CSS权威指南 The CSS Anthology (第二版) CSS设计大师设计思路与实践 HTML & XHTML 权威指南(英文CHM版+中文PDF版) HTML & XHTML – The Complete Reference第四版...',
            author:"古歌",
            time:"2010-04-20",
            flow:18025,
            comments:[],
            enjoy:0,
            id:"6121.html",
            content:'<div><strong>CSS、HTML、xHTML </strong><br>CSS权威指南<br>The CSS Anthology (第二版) CSS设计大师设计思路与实践<br>HTML &amp; XHTML 权威指南(英文CHM版+中文PDF版)<br>HTML &amp; XHTML – The Complete Reference第四版<br>Building a Web Site 傻瓜书<br>HTML 4 傻瓜书 第五版<br>css禅意花园 (高级CSS开发)<br>CSS与DHTML精髓<br>CSS网页设计师<br>CSS Hacks and Filter<br>CSS Mastery高级Web开发标准<br>CSS 设计艺术<br>CSS代码效果对比学习<br>CSS Web Design傻瓜书<br>Pro CSS Techniques<br>CSS HTML高级设计模式 Pro CSS and HTML Design Patterns<br>Build your Own WebSite – The Right Way Using HTML and  CSS<br>Mastering Integrated HTML and CSS<br>CSS Web Development从入门到精通<br>Web Publishing with HTML and CSS in One Hour a  Day<br>Designing with Web Standards 网站重构 英文+中文版<br>Beginning HTML with CSS and XHTML<br>XHTML Moving toward XML<br>Building Smart Web 2.0 Applications<br>How to Do Everything With HTML<br>Teach Yourself HTML in 10 Minutes 第四版<br>HTML,XHTML,and CSS 第六版 Visual Quickstart Guide<br>Spatial Data on the Web:Modeling and Management<br>AdvencED DOM Scripting Dynamic Web Design Techniques<br>HTML &amp; XHTML – The Complete Reference第四版<br>精通XHTML程序设计高级编程<br>XHTML实例精解<br>XHTML技术内幕<br>完美HTML设计 – 使用CSS不用Table (第二版)<br>250 HTML and Web Design Secrets<br>Bulletproof Web Design<p></p><p><strong>Javascript </strong></p><p>程序天下：JavaScript实例自学手册 电子教程+随书光盘<br>Javascript and Ajax for the Web 第六版<br>Return on Design<br>Learn Javascript 高清晰PDF珍藏版<br>JavaScript 宝典<br>JavaScript宝典(第六版)<br>JavaScript实例宝典 PDF文字版<br>Wrox Beginning JavaScript(第三版)<br>Professional JavaScript for Web Developers<br>Pro JavaScript Design Patterns<br>The Art &amp; Science of JavaScript<br>JavaScript for breakfast<br>JavaScript in 10 Simple Steps or Less<br>JavaScript开发人员参考<br>JavaScript参考大全第二版<br>JavaScript权威指南(第四版)<br>JavaScript快速查询手册<br>Practical JavaScript DOM Scripting and Ajax  Projects<br>JavaScript傻瓜书 第四版<br>高级Javascript 第二版<br>Build Your Own Database Driven Website</p><p>上百个超酷JS广告代码收集汇总 (第一辑)<br>上百个超酷JS广告代码收集汇总 (第二辑)<br>上百个超酷JS广告代码收集汇总 (第三辑)</p></div>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' JavaScript 能做什么？',
            describe:'JavaScript 为 HTML 设计师提供了一种编程工具 HTML 创作者往往都不是程序员，但是 JavaScript 却是一种只拥有极其简单的语法的脚本语言！几乎每个人都有能力将短小的代码片断放入他们的 HTML 页面当中。 Java...',
            author:"古歌",
            time:"2010-04-19",
            flow:16471,
            comments:[],
            enjoy:0,
            id:"6122.html",
            content:'<p>JavaScript 为 HTML 设计师提供了一种编程工具 HTML 创作者往往都不是程序员，但是 JavaScript 却是一种只拥有极其简单的语法的脚本语言！几乎每个人都有能力将短小的代码片断放入他们的 HTML 页面当中。 JavaScript 可以将动态的文本放入 HTML 页面 类似于这样的一段 JavaScript 声明可以将一段可变的文本放入 HTML 页面：document.write(“&lt;h1&gt;” + name + “&lt;/h1&gt;”) JavaScript 可以对事件作出响应 可以将 JavaScript 设置为当某事件发生时才会被执行，例如页面载入完成或者当用户点击某个 HTML 元素时。 JavaScript 可以读写 HTML 元素 JavaScript 可以读取及改变 HTML 元素的内容。 JavaScript 可被用来验证数据 在数据被提交到服务器之前，JavaScript 可被用来验证这些数据。 JavaScript 可被用来检测访问者的浏览器 JavaScript 可被用来检测访问者的浏览器，并根据所检测到的浏览器，为这个浏览器载入相应的页面。 JavaScript 可被用来创建 cookies JavaScript 可被用来存储和取回位于访问者的计算机中的信息。</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' [精通JavaScript+jQuery]教程各章的简介 ',
            describe:'第一部分 JavaScript、 Dom基础第1章 JavaScript简介 本章从JavaScript的起源出发，介绍了浏览器之间的争斗以及 JavaScript的基础知识，并且引入Web结构、表现、行为相分离的标准，为后续章节的进一步...',
            author:"古歌",
            time:"2010-04-19",
            flow:17125,
            comments:[],
            enjoy:0,
            id:"6123.html",
            content:'<div class="asb asb-post asb-post-01"></div>			<h3><strong><span style="font-size: x-small;">第一部分?JavaScript、 Dom基础</span></strong><strong><span style="font-size: x-small;">第1章?JavaScript简介</span></strong></h3><div><span style="font-size: x-small;">本章从JavaScript的起源出发，介绍了浏览器之间的争斗以及 JavaScript的基础知识，并且引入Web结构、表现、行为相分离的标准，为后续章节的进一步讲解打下基础。</span><br><strong><span style="font-size: x-small;">第2章?JavaScript基础</span></strong><br><span style="font-size: x-small;">本章对JavaScript的基础进行了深入的讨论，重点分析了 JavaScript的核心ECMAScript，通过实例让读者从底层了解JavaScript的编写，包括JavaScript的基本语法、变量、关 键字、保留字、语句、函数、BOM等。</span><br><strong><span style="font-size: x-small;">第3章?CSS基础</span></strong><br><span style="font-size: x-small;">CSS作为网页表现的标准语言，是网页美观、大方的重要基础。本章从CSS 的概念出发，介绍CSS语言的特点，以及如何在网页中引入CSS，然后重点介绍CSS的基本语法，包括CSS选择器、CSS设置文字、图片、页面背景、超 链接效果等。最后通过实用菜单的实例，作为本章知识的归纳和进一步运用。</span><br><span style="font-size: x-small;"><strong>第4章?CSS进</strong>阶</span><br><span style="font-size: x-small;">本章在上一章的基础上对CSS定位作详细介绍，并讲解利用 CSS?+?div对页面元素进行定位的基本方法，以及CSS排版观念，通过排版实例“我的博客”对页面的基本布局做细致分析。最后讲解 JavaScript与CSS配合，实现页面的各种特效。</span><br><strong><span style="font-size: x-small;">第5章?理解和应用DOM模型</span></strong><br><span style="font-size: x-small;">文档对象模型DOM定义了用户操作文档对象的接口，它使得用户对HTML 有了空前的访问能力。本章主要介绍DOM模型的基础，包括页面中的节点、如何使用DOM、innerHTML属性、DOM与CSS的关系等。</span><br><strong><span style="font-size: x-small;">第二部分?JavaScript进阶</span></strong><strong><span style="font-size: x-small;">第6章?理解和应用“事件”</span></strong><br><span style="font-size: x-small;">事件是JavaScript最最引人注目的特性之一，它提供了一个平台， 让用户不仅能浏览页面中的内容，而且还能够跟页面进行交互。本章围绕JavaScript处理事件的特性进行讲解，主要包括事件流、事件的监听、事件的类 型以及浏览器的兼容性问题等。并通过实例“伸缩菜单”进一步熟练事件的运用。</span><br><strong><span style="font-size: x-small;">第7章?使用JavaScript控制表格与表单</span></strong><br><span style="font-size: x-small;">表格与表单都是网页中所不可缺少的元素，表格是数据的承载体，而表单作为 与用户交互的窗口，时刻都扮演着信息获取和反馈的角色。本章围绕表格和表单介绍JavaScript、CSS控制它们的方法，以及实际运用中的一些技巧。 最后通过实例“自动提示的文本框”进一步将理论运用到实际页面中。</span><br><strong><span style="font-size: x-small;">第8章?JavaScript的调试与优化</span></strong><br><span style="font-size: x-small;">编写JavaScript程序时或多或少的会遇到各种各样的错误，有语法 错误、逻辑错误等等。即使代码没有问题，对于大网站而言执行的效率也是十分关键的，这就直接关系到代码的优化。本章围绕JavaScript的错误处理和 优化做简要的介绍，包括常见的错误和异常、调试的技巧、调试的工具、优化的细则等。</span><br><strong><span style="font-size: x-small;">第9章?Ajax</span></strong><br><span style="font-size: x-small;">Ajax就是一种全新的技术，它使得浏览器与桌面应用程序之间的距离越来 越近。本章围绕Ajax的基本概念，介绍异步链接服务器对象XMLHttpRequest，以及Ajax的一些实例，并对Ajax技术进行简单的分析。最 后通过“自动校验的表单”和“Ajax实现自动提示的文本框”两个实例，进一步学习Ajax在实际页面中的强大功能。</span><br><strong><span style="font-size: x-small;">第三部分?jQuery应用 </span></strong><strong><span style="font-size: x-small;">第10章?jQuery基础</span></strong><br><span style="font-size: x-small;">本章作为jQuery的第一章，重点讲解jQuery的概念以及一些简单 的基础运用，为后面的章节打下基础，主要包括jQuery的概念、jQuery中的“$”、CSS3选择器、管理选择结果、jQuery链等等。</span><br><strong><span style="font-size: x-small;">第11章?jQuery控制页面</span></strong><br><span style="font-size: x-small;">本章在上一章的基础上介绍jQuery如何控制页面，包括页面元素的属 性、CSS样式风格、DOM模型、表单元素、事件处理等。其中的实例大都为之前章节JavaScript实例的简化和升华，最后通过实例“快餐在线”完整 的学习jQuery在实际页面中的运用。</span><br><strong><span style="font-size: x-small;">第12章?jQuery制作动画与特效</span></strong><br><span style="font-size: x-small;">jQuery中动画和特效的相关方法可以说为其添加了靓丽的一笔。开发者可 以通过简单的函数实现很多特效，这在以往都是需要大量JavaScript代码开发的。本章主要通过实例，介绍jQuery中动画和特效的相关知识，包括 自动显隐、渐入渐出、飞入飞出、自定义动画等。</span><br><strong><span style="font-size: x-small;">第13章?jQuery的功能函数</span></strong><br><span style="font-size: x-small;">在JavaScript编程中，开发者通常需要编写很多小程序来实现一些特 定的功能，例如浏览器的检测、字符串的处理、数组的编辑、获取外部代码等等。jQuery将一些常用的程序进行了总结，提供了很多实用的功能函数。本章主 要围绕这些功能函数对jQuery做进一步的介绍。</span><br><strong><span style="font-size: x-small;">第14章?jQuery与Ajax</span></strong><br><span style="font-size: x-small;">本章主要围绕jQuery中Ajax的相关技术进行讲解，重点分析 jQuery对Ajax步骤的简化，主要包括获取异步数据、GET和POST方法、控制Ajax的细节。最后通过修改之前的“自动提示的文本框”实例，进 一步学习jQuery的强大功能。</span><br><strong><span style="font-size: x-small;">第15章?jQuery插件</span></strong><br><span style="font-size: x-small;">无论jQuery再强大也不可能包含所有的功能，jQuery框架仅仅集成 了JavaScript中最核心也是最常用的功能。然而jQuery有许许多多的插件，都是针对特定的内容，并以jQuery为核心编写的。本章通过实 例，重点介绍jQuery中的一些常用插件，包括表单插件、UI插件等，让读者对jQuery插件有更深入的认识和理解。</span><br><strong><span style="font-size: x-small;">第四部分?Javascript+jQuery综合案例 </span></strong><strong><span style="font-size: x-small;">第16章?综合案例(1)——网络相册</span></strong><br><span style="font-size: x-small;">本章通过一个完整的综合实例“网络相册”来讲解JavaScript、 jQuery在实际运用中的方法，主要包括分析构架、模块拆分、功能细化、统一调整等各个步骤。</span><br><strong><span style="font-size: x-small;">第17章?综合案例(2)——拖拽的清单</span></strong><br><span style="font-size: x-small;">目前网络上拖拽的页面愈发的流行，例如iGoogle便是十分典型的案 例。本节通过一个拖拽的清单实例，综合讲解这类页面的制作方法。</span><br><strong><span style="font-size: x-small;">第18章?综合案例(3)——网络报价单</span></strong><br><span style="font-size: x-small;">网络购物已经越来越流行，琳琅满目的商品充斥着整个网络世界。一个好的报 价单对于商品销售的促进是无形的，尤其是电子产品。本节通过一个邮箱报价单的实例，综合说明这类页面的制作方法。</span><br><strong><span style="font-size: x-small;">第19章?综合案例(4)——图片切割器</span></strong><br><span style="font-size: x-small;">对于拍摄的相片通常都有一些多余的部分，在Photoshop等图像处理 软件中有非常方便的图片切割工具。但对于网上的图片，利用jQuery就能模拟类似的切割效果。本章通过图片切割器的实例，综合介绍该操作的制作方法，供 读者在遇到类似情况时参考。</span><p></p><p><span style="font-size: x-small;"><strong>学习方法建议</strong></span><br><span style="font-size: x-small;">1.?重视基础，先掌握JavaScript，在学习jQuery或其他框 架。</span><br><span style="font-size: x-small;">2.?学习相关的计算 机专业基础课程;高级语言?/?数据结构?/?算法基础;程序=?数据结构?+?算法。</span><br><span style="font-size: x-small;">3.?实践+钻研</span><br><span style="font-size: x-small;">4.?学会提问和寻找答案</span><br><span style="font-size: x-small;">5.?学会调试</span></p></div>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' 我学JavaScript 1.1 语言的基础',
            describe:'JavaScript 使网页增加互动性。JavaScript 使有规律地重复的HTML文段简化，减少下载时间。JavaScript 能及时响应用户的操作，对提交表单做即时的检查，无需浪费时间交由 CGI 验证。JavaScript 的特点是...',
            author:"古歌",
            time:"2010-04-19",
            flow:13024,
            comments:[],
            enjoy:0,
            id:"6124.html",
            // eslint-disable-next-line no-useless-escape
            content:'<p>JavaScript 简介</p><p>JavaScript 有什么特点</p><p>JavaScript 使网页增加互动性。JavaScript 使有规律地重复的HTML文段简化，减少下载时间。JavaScript 能及时响应用户的操作，对提交表单做即时的检查，无需浪费时间交由 CGI 验证。JavaScript 的特点是无穷无尽的，只要你有创意。</p><p>Java 与 JavaScript 有什么不同</p><p>很多人看到 Java 和 JavaScript 都有“Java”四个字，就以为它们是同一样东西，连我自己当初也是这样。其实它们是完完全全不同的两种东西。Java，全称应该是 Java Applet，是嵌在网页中，而又有自己独立的运行窗口的小程序。Java Applet 是预先编译好的，一个 Applet 文件（.class）用 Notepad 打开阅读，根本不能理解。Java Applet 的功能很强大，可以访问 http、ftp等协议，甚至可以在电脑上种病毒（已有先例了）。相比之下，JavaScript 的能力就比较小了。JavaScript 是一种“脚本”（“Script”），它直接把代码写到 HTML 文档中，浏览器读取它们的时候才进行编译、执行，所以能查看 HTML 源文件就能查看JavaScript 源代码。JavaScript 没有独立的运行窗口，浏览器当前窗口就是它的运行窗口。它们的相同点，我想只有同是以 Java 作编程语言一点了。</p><p>开发 JavaScript 该用什么软件</p><p>一个 JavaScript 程序其实是一个文档，一个文本文件。它是嵌入到 HTML 文档中的。所以，任何可以编写 HTML 文档的软件都可以用来开发 JavaScript。在此我推荐大家用 FrontPage 2000 附带的 Microsoft 脚本编辑器（在 FrontPage 菜单 | 工具 | 宏 | Microsoft 脚本编辑器）。它是个像 Visual Basic / C++ 一样的程序开发器，能对正在输入的语句作出简要提示。配合 FrontPage 2000，使工作量大大减少。</p><p>JavaScript 语言的基础</p><p>在什么地方插入 JavaScript</p><p>JavaScript 可以出现在 HTML 的任意地方。使用标记&lt;script&gt;…&lt;/script&gt;，你可以在 HTML 文档的任意地方插入 JavaScript， 甚至在&lt;HTML&gt;之前插入也不成问题。不过如果要在声明框架的网页（框架网页）中插入，就一定要在&lt;frameset&gt;之前插 入，否则不会运行。</p><p>基本格式</p><p>&lt;script&gt;</p><p>&lt;!–</p><p>…</p><p>(JavaScript 代码)</p><p>…</p><p>//–&gt;</p><p>&lt;/script&gt;</p><p>第二行和第四行的作用， 是让不懂&lt;script&gt;标记的浏览器忽略 JavaScript 代码。一般可以省略，因为现在想找不懂 Script 的浏览器，恐怕就连博物馆里也没有了。第四行前边的双反斜杠“//”是 JavaScript 里的注释标号，以后将学到。</p><p>另外 一种插入 JavaScript 的方法，是把 JavaScript 代码写到另一个文件当中（此文件通常应该用“.js”作扩展名），然后用格式为“&lt;script src=”javascript.js”&gt;&lt;/script&gt;” 的标记把它嵌入到文档中。注意，一定要用“&lt;/script&gt;”标记。</p><p>参考 &lt;script&gt;标记还有一个属性：language（缩写lang），说明脚本使用的语言。对于 JavaScript，请用 “language=”JavaScript””。</p><p>参考 相对于&lt;script&gt;标记，还有一个&lt;server&gt;标记。&lt;server&gt;标记所包含的，是服务器端 （Server Side）的脚本。本教程只讨论客户器端（Client Side）的 JavaScript，也就是 用&lt;script&gt;标记包含的脚本。</p><p>如果想在浏览器的“地址”栏中执行 JavaScript 语句，用这样的格式：</p><p>javascript:&lt;JavaScript 语句&gt;</p><p>这 样的格式也可以用在连接中：</p><p>&lt;a href=”javascript:&lt;JavaScript 语句&gt;”&gt;…&lt;/a&gt;</p><p>JavaScript 基本语法</p><p>每 一句 JavaScript 都有类似于以下的格式：</p><p>&lt;语句&gt;;</p><p>其 中分号“;”是 JavaScript 语言作为一个语句结束的标识符。虽然现在很多浏览器都允许用回车充当结束符号，培养用分号作结束的习惯仍然是很好的。</p><p>语句 块 语句块是用大括号“{ }”括起来的一个或 n 个语句。在大括号里边是几个语句，但是在大括号外边，语句块是被当作一个语句的。语句块是可以嵌套的，也就是说，一个语句块里边可以再包含一个或多个语句 块。</p><p>JavaScript 中的变量</p><p>什么是变量 从字面上看，变量是可变的量；从编程角度讲，变量是用于存储某种/某些数值的存储器。所储存的值，可以是数字、字符或其他的一些东西。</p><p>变 量的命名 变量的命名有以下要求：</p><p>只包含字母、数字和/或下划线；</p><p>要以字母开头；</p><p>不 能太长（其实有什么人喜欢使用又长又臭的名字呢？）；</p><p>不能与 JavaScript 保留字（Key Words，Reserved Words，数量繁多，不能一一列出；凡是可以用来做 JavaScript 命令的字都是保留字）重复。</p><p>而 且，变量是区分大小写的，例如，variable 和 Variable 是两个不同的变量。不仅如此，大部分命令和“对象”（请参阅“对象化编程”章）都是区分大小写的。</p><p>提示 给变量命名，最好避免用单个字母“a”“b”“c”等，而改用能清楚表达该变量在程序中的作用的词语。这样，不仅别人能更容易的了解你的程序，而且你在以 后要修改程序的时候，也很快会记得该变量的作用。变量名一般用小写，如果是由多个单词组成的，那么第一个单词用小写，其他单词的第一个字母用大写。例 如：myVariable 和 myAnotherVariable。这样做仅仅是为了美观和易读，因为 JavaScript 一些命令（以后将用更具体的方法阐述“命令”一词）都是用这种方法命名的：indexOf；charAt 等等。</p><p>变量需要 声明 没有声明的变量不能使用，否则会出错：“未定义”。声明变量可以用：</p><p>var &lt;变量&gt; [= &lt;值&gt;];</p><p>var 我们接触的第一个关键字（即保留字）。这个关键字用作声明变量。最简单的声明方法就是“var &lt;变量&gt;;”，这将为&lt;变量&gt;准备内存，给它赋初始值“null”。如果加上“= &lt;值&gt;”，则给&lt;变量&gt;赋予自定的初始值&lt;值&gt;。</p><p>数据类型 变量可以用的数据类型有：</p><p>整型 只能储存整数。可以是正整数、0、负整数，可以是十进制、八进制、十六进制。八进制数的表示方法是在数字前加“0”，如“0123”表示八进制数 “123”。十六进制则是加“0x”：“0xEF”表示十六进制数“EF”。</p><p>浮点型 即“实型”，能储存小数。有资料显示，某些平台对浮点型变量的支持不稳定。没有需要就不要用浮点型。</p><p>字符串型 是用引号“” “”、“’ ‘”包起来的零个至多个字符。用单引号还是双引号由你决定。跟语文一样，用哪个引号开始就用哪个结束，而且单双引号可嵌套使用：’这里是”JavaScript 教程”。’ 不过跟语文不同的是，JavaScript 中引号的嵌套只能有一层。如果想再多嵌一些，你需要转义字符：</p><p>转 义字符 由于一些字符在屏幕上不能显示，或者 JavaScript 语法上已经有了特殊用途，在要用这些字符时，就要使用“转义字符”。转义字符用斜杠“\”开头：\’ 单引号、\” 双引号、\n 换行符、\r 回车（以上只列出常用的转义字符）。于是，使用转义字符，就可以做到引号多重嵌套：’Micro 说：”这里是\”JavaScript 教程\”。” ‘</p><p>布尔型 常用于判断，只有两个值可选：true（表“真”）和 false（表“假”）。true 和 false 是 JavaScript 的保留字。它们属于“常数”。</p><p>对象 关于对象，在“对象化编程”一章将详细讲到。</p><p>由于 JavaScript 对数据类型的要求不严格，一般来说，声明变量的时候不需要声明类型。而且就算声明了类型，在过程中还可以给变量赋予其他类型的值。声明类型可以用赋予初始 值的方法做到：</p><p>var aString = ”;</p><p>这将把 aString 定义为具有空值的字符串型变量。</p><p>var anInteger = 0;</p><p>这 将把 anInteger 定义为值为 0 的整型。</p><p>变量的赋值 一个变量声明后，可以在任何时候对其赋值。赋值的语法是：</p><p>&lt;变量&gt; = &lt;表达式&gt;;</p><p>其 中“=”叫“赋值符”，它的作用是把右边的值赋给左边的变量。下一节将讨论到表达式。</p><p>JavaScript常数 有下列几个：</p><p>null 一个特殊的空值。当变量未定义，或者定义之后没有对其进行任何赋值操作，它的值就是“null”。企图返回一个不存在的对象时也会出现null值。</p><p>NaN “Not a Number”。出现这个数值比较少见，以至于我们可以不理它。当运算无法返回正确的数值时，就会返回“NaN”值。NaN 值非常特殊，因为它“不是数字”，所以任何数跟它都不相等，甚至 NaN 本身也不等于 NaN 。</p><p>true 布尔值“真”。用通俗的说法，“对”。</p><p>false 布尔值“假”。用通俗的说法，“错”。</p><p>在 Math 对象中还有一系列数学常数。这将在讨论“对象化编程”时谈到。</p><p>表达式与运算符</p><p>表达式 与数学中的定义相似，表达式是指具有一定的值的、用运算符把常数和变量连接起来的代数式。一个表达式可以只包含一个常数或一个变量。运算符可以是四则运算 符、关系运算符、位运算符、逻辑运算符、复合运算符。下表将这些运算符从高优先级到低优先级排列：</p><p>括号 	(x) [x] 	中括号只用于指明数组的下 标</p><p>求反、</p><p>自加、</p><p>自减 	-x 	返回 x 的相反数</p><p>!x 	返回与 x (布尔值)相反的布尔值</p><p>x++ 	x 值加 1，但仍返回原来的 x 值</p><p>x– 	x 值减 1，但仍返回原来的 x 值</p><p>++x 	x 值加 1，返回后来的 x 值</p><p>–x 	x 值减 1，返回后来的 x 值</p><p>乘、除 	x*y 	返回 x 乘以 y 的值</p><p>x/y 	返回 x 除以 y 的值</p><p>x%y 	返回 x 与 y 的模（x 除以y 的余数）</p><p>加、减 	x+y 	返 回 x 加 y 的值</p><p>x-y 	返回 x 减 y 的值</p><p>关 系运算 	x&lt;y x&lt;=y</p><p>x&gt;=y x&gt;y 	当符合条件时返回 true 值，否则返回 false 值</p><p>等于、</p><p>不等于 	x==y 	当 x 等于 y 时返回 true 值，否则返回 false 值</p><p>x!=y 	当 x 不等于 y 时返回 true 值，否则返回 false 值</p><p>位与 	x&amp;y 	当两个数位同时为 1 时，返回的数据的当前数位为 1，其他情况都为 0</p><p>位异或 	x^y 	两个数位中有且只有一个为 0 时，返回 0，否则返回 1</p><p>位或 	x|y 	两个数位中只要有一个为 1，则返回 1；当两个数位都为零时才返回零</p><p>位 运算符通常会被当作逻辑运算符来使用。它的实际运算情况是：把两个操作数（即 x 和 y）化成二进制数，对每个数位执行以上所列工作，然后返回得到的新二进制数。由于“真”值在电脑内部（通常）是全部数位都是 1 的二进制数，而“假”值则是全部是 0 的二进制数，所以位运算符也可以充当逻辑运算符。</p><p>逻辑与 	x&amp;&amp;y 	当 x 和 y 同时为 true 时返回 true，否则返回 false</p><p>逻辑或 	x||y 	当 x 和 y 任意一个为 true 时返回 true，当两者同时为 false 时返回 false</p><p>逻辑与/或有时候被称为“快速与/或”。这是因为当第一操作数（x）已经可以决定结果，它们将不去理会 y 的值。例如，false &amp;&amp; y，因为x == false，不管 y 的值是什么，结果始终是 false，于是本表达式立即返回 false，而不论 y 是多少，甚至 y 可以导致出错，程序也可以照样运行下去。</p><p>条件 	c?x:y 	当条件 c 为 true 时返回 x 的值（执行 x 语句），否则返回 y 的值（执行 y 语句）</p><p>赋值、</p><p>复合运算 	x=y 	把 y 的值赋给 x，返回所赋的值</p><p>x+=y x-=y x*=y</p><p>x/=y x%=y 	x 与 y 相加/减/乘/除/求余，所得结果赋给 x，并返回 x 赋值后的值</p><p>注意 所有与四则运算有关的运算符都不能作用在字符串型变量上。字符串可以使用 +、+= 作为连接两个字符串之用。</p><p>提示 请密切注意运算的优先级。编程时如果不记得运算符的优先级，可以使用括号( )。例如：(a == 0)||(b == 0)。</p><p>一些用来 赋值的表达式，由于有返回的值，可以加以利用。例如，用以下语句：a = b = c = 10，可以一次对三个变量赋值。</p><p>语句</p><p>下 面将开始讨论 JavaScript 基本编程命令，或者叫“语句”。</p><p>注释</p><p>像 其他所有语言一样，JavaScript 的注释在运行时也是被忽略的。注释只给程序员提供消息。</p><p>JavaScript 注释有两种：单行注释和多行注释。单行注释用双反斜杠“//”表示。当一行代码有“//”，那么，“//”后面的部分将被忽略。而多行注释是用“/*”和 “*/”括起来的一行到多行文字。程序执行到“/*”处，将忽略以后的所有文字，直到出现“*/”为止。</p><p>提示 如果你的程序需要草稿，或者需要让别人阅读，注释能帮上大忙。养成写注释的习惯，能节省你和其他程序员的宝贵时间，使他们不用花费多余的时间琢磨你的程 序。在程序调试的时候，有时需要把一段代码换成另一段，或者暂时不要一段代码。这时最忌用 Delete 键，如果想要回那段代码怎么办？最好还是用注释，把暂时不要的代码“隐”去，到确定方法以后再删除也不迟。</p><p>if 语句</p><p>if ( &lt;条件&gt; ) &lt;语句1&gt; [ else &lt;语句2&gt; ];</p><p>本语句 有点象条件表达式“?:”：当&lt;条件&gt;为真时执行&lt;语句1&gt;，否则，如果 else 部分存在的话，就执行&lt;语句2&gt;。与“?:”不同的是，if 只是一条语句，不会返回数值。&lt;条件&gt;是布尔值，必须用小括号括起来；&lt;语句1&gt;和&lt;语句2&gt;都只能是一个语句，欲 使用多条语句，请用语句块。</p><p>注意 请看下例：</p><p>if (a == 1)</p><p>if (b == 0) alert(a+b);</p><p>else</p><p>alert(a-b);</p><p>本 代码企图用缩进的方法说明 else 是对应 if (a == 1) 的，但是实际上，由于 else 与 if (b == 0) 最相近，本代码不能按作者的想法运行。正确的代码是</p><p>if (a == 1) {</p><p>if (b == 0) alert(a+b);</p><p>} else {</p><p>alert(a-b);</p><p>}</p><p>提 示 一行代码太长，或者涉及到比较复杂的嵌套，可以考虑用多行文本，如上例，if (a == 1) 后面没有立即写上语句，而是换一行再继续写。浏览器不会混淆的，当它们读完一行，发现是一句未完成语句，它们会继续往下读。使用缩进也是很好的习惯，当一 些语句与上面的一两句语句有从属关系时，使用缩进能使程序更易读，方便程序员进行编写或修改工作。</p><p>循环体</p><p>for (&lt;变量&gt;=&lt;初始值&gt;; &lt;循环条件&gt;; &lt;变量累加方法&gt;) &lt;语句&gt;;</p><p>本 语句的作用是重复执行&lt;语句&gt;，直到&lt;循环条件&gt;为 false 为止。它是这样运作的：首先给&lt;变量&gt;赋&lt;初始值&gt;，然后*判断&lt;循环条件&gt;（应该是一个关于&lt;变量&gt; 的条件表达式）是否成立，如果成立就执行&lt;语句&gt;，然后按&lt;变量累加方法&gt;对&lt;变量&gt;作累加，回到“*”处重复，如 果不成立就退出循环。这叫做“for循环”。下面看看例子。</p><p>for (i = 1; i &lt; 10; i++) document.write(i);</p><p>本语句先给 i 赋初始值 1，然后执行 document.write(i)语句（作用是在文档中写 i 的值，请参越“对象化编程”一章）；重复时 i++，也就是把 i 加 1；循环直到 i&lt;10 不满足，也就是 i&gt;=10 时结束。结果是在文档中输出了“123456789”。</p><p>和 if 语句一样，&lt;语句&gt;只能是一行语句，如果想用多条语句，你需要用语句块。</p><p>与其他语言不同，JavaScript 的 for 循环没有规定循环变量每次循环一定要加一或减一，&lt;变量累加方法&gt;可以是任意的赋值表达式，如 i+=3、i*=2、i-=j 等都成立。</p><p>提示 适当的使用 for 循环，能使 HTML 文档中大量的有规律重复的部分简化，也就是用 for 循环重复写一些 HTML 代码，达到提高网页下载速度的目的。不过请在 Netscape 中重复进行严格测试，保证通过了才好把网页传上去。作者曾试过多次因为用 for 循环向文档重复写 HTML 代码而导致 Netscape“猝死”。IE 中绝对没有这种事情发生，如果你的网也是只给 IE 看的，用多多的 for 也没问题。</p><p>除了 for 循环，JavaScript 还提供 while 循环。</p><p>while (&lt;循环条件&gt;) &lt;语句&gt;;</p><p>比 for 循环简单，while 循环的作用是当满足&lt;循环条件&gt;时执行&lt;语句&gt;。while 循环的累加性质没有 for 循环强。&lt;语句&gt;也只能是一条语句，但是一般情况下都使用语句块，因为除了要重复执行某些语句之外，还需要一些能变动&lt;循环条 件&gt;所涉及的变量的值的语句，否则一但踏入此循环，就会因为条件总是满足而一直困在循环里面，不能出来。这种情况，我们习惯称之为“死循环”。死循 环会弄停当时正在运行的代码、正在下载的文档，和占用很大的内存，很可能造成死机，应该尽最大的努力避免。</p><p>break 和 continue</p><p>有时候在循环体内，需要立即跳出循环或跳过循环体内其余代码而进行下一次循环。 break 和 continue 帮了我们大忙。</p><p>break;</p><p>本语句 放在循环体内，作用是立即跳出循环。</p><p>continue;</p><p>本语句放在循环 体内，作用是中止本次循环，并执行下一次循环。如果循环的条件已经不符合，就跳出循环。</p><p>例</p><p>for (i = 1; i &lt; 10; i++) {</p><p>if (i == 3 || i == 5 || i == 8) continue;</p><p>document.write(i);</p><p>}</p><p>输 出：124679。</p><p>switch 语句</p><p>如果要把某些数据分类，例如，要把学生的成绩按 优、良、中、差分类，我们可能会用 if 语句：</p><p>if (score &gt;= 0 &amp;&amp; score &lt; 60) {</p><p>result = ‘fail’;</p><p>} else if (score &lt; 80) {</p><p>result = ‘pass’;</p><p>} else if (score &lt; 90) {</p><p>result = ‘good’;</p><p>} else if (score &lt;= 100) {</p><p>result = ‘excellent’;</p><p>} else {</p><p>result = ‘error’;</p><p>}</p><p>看起来没有问题，但使用太多的 if 语句的话，程序看起来有点乱。switch 语句就是解决这种问题的最好方法。</p><p>switch (e) {</p><p>case r1: （注意：冒号）</p><p>…</p><p>[break;]</p><p>case r2:</p><p>…</p><p>[break;]</p><p>…</p><p>[default:</p><p>…]</p><p>}</p><p>这 一大段的作用是：计算 e 的值（e 为表达式），然后跟下边“case”后的 r1、r2……比较，当找到一个相等于 e 的值时，就执行该“case”后的语句，直到遇到 break 语句或 switch 段落结束（“}”）。如果没有一个值与 e 匹配，那么就执行“default:”后边的语句，如果没有 default 块，switch 语句结束。</p><p>上边的 if 段用 switch 改写就是：</p><p>switch (parseInt(score / 10)) {</p><p>case 0:</p><p>case 1:</p><p>case 2:</p><p>case 3:</p><p>case 4:</p><p>case 5:</p><p>result = ‘fail’;</p><p>break;</p><p>case 6:</p><p>case 7:</p><p>result = ‘pass’;</p><p>break;</p><p>case 8:</p><p>result = ‘good’;</p><p>break;</p><p>case 9:</p><p>result = ‘excellent’;</p><p>break;</p><p>default:</p><p>if (score == 100)</p><p>result = ‘excellent’;</p><p>else</p><p>result = ‘error’;</p><p>}</p><p>其 中 parseInt()方法是以后会介绍的，作用是取整。最后 default 段用的 if 语句，是为了不把 100 分当错误论（parseInt(100 / 10) == 10）。</p><p>.</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' 我学JavaScript 1.2 对象化编程',
            describe:'JavaScript 是使用“对象化编程”的，或者叫“面向对象编程”的。所谓“对象化编程”，意思是把 JavaScript 能涉及的范围划分成大大小小的对象，对象下面还继续划分对象直至非常详细为止，所有的编程都以对象为出发点，基于对象。小到...',
            author:"古歌",
            time:"2010-04-19",
            flow:11702,
            comments:[],
            enjoy:0,
            id:"6125.html",
            content:'<p>对象化编程</p><p>JavaScript 是使用“对象化编程”的，或者叫“面向对象编程”的。所谓“对象化编程”，意思是把 JavaScript 能涉及的范围划分成大大小小的对象，对象下面还继续划分对象直至非常详细为止，所有的编程都以对象为出发点，基于对象。小到一个变量，大到网页文档、窗口 甚至屏幕，都是对象。这一章将“面向对象”讲述 JavaScript 的运行情况。</p><p>对象的基本知识</p><p>对 象是可以从 JavaScript“势力范围”中划分出来的一小块，可以是一段文字、一幅图片、一个表单（Form）等等。 每个对象有它自己的属性、方法和事件。对象的属 性是反映该对象某些特定的性质的，例如：字符串的长度、图像的长宽、文字框（Textbox）里的文字等等；对象的方 法能对该对象做一些事情，例如，表单的“提交”(Submit)，窗口的“滚动”(Scrolling)等等；而对象的事 件就能响应发生在对象上的事情，例如提交表单产生表单的“提交事件”，点击连接产生的“点击事件”。不是所有的对象都有以上三个性质， 有些没有事件，有些只有属性。引用对象的任一“性质”用“&lt;对象名&gt;.&lt;性质名&gt;”这种方法。</p><p>基本对象</p><p>现 在我们要复习以上学过的内容了——把一些数据类型用对象的角度重新学习一下。</p><p>Number “数字”对象。这个对象用得很少，作者就一次也没有见过。不过属于“Number”的对象，也就是“变量”就多了。</p><p>属 性</p><p>MAX_VALUE 用法：Number.MAX_VALUE；返回“最大值”。</p><p>MIN_VALUE 用法：Number.MIN_VALUE；返回“最小值”。</p><p>NaN 用法：Number.NaN 或 NaN；返回“NaN”。“NaN”（不是数值）在很早就介绍过了。</p><p>NEGATIVE_INFINITY 用法：Number.NEGATIVE_INFINITY；返回：负无穷大，比“最小值”还小的值。</p><p>POSITIVE_INFINITY 用法：Number.POSITIVE_INFINITY；返回：正无穷大，比“最大值”还大的值。</p><p>方法</p><p>toString() 用法：&lt;数值变量&gt;.toString()；返回：字符串形式的数值。如：若 a == 123；则 a.toString() == ‘123’。</p><p>String 字符串对象。声明一个字符串对象最简单、快捷、有效、常用的方法就是直接赋值。</p><p>属性</p><p>length 用法：&lt;字符串对象&gt;.length；返回该字符串的长度。</p><p>方法</p><p>charAt() 用法：&lt;字符串对象&gt;.charAt(&lt;位置&gt;)；返回该字符串位于第&lt;位置&gt;位的单个字符。注意：字符串中的一个 字符是第 0 位的，第二个才是第 1 位的，最后一个字符是第 length – 1 位的。</p><p>charCodeAt() 用法：&lt;字符串对象&gt;.charCodeAt(&lt;位置&gt;)；返回该字符串位于第&lt;位置&gt;位的单个字符的 ASCII 码。</p><p>fromCharCode() 用法：String.fromCharCode(a, b, c…)；返回一个字符串，该字符串每个字符的 ASCII 码由 a, b, c… 等来确定。</p><p>indexOf() 用法：&lt;字符串对象&gt;.indexOf(&lt;另一个字符串对象&gt;[, &lt;起始位置&gt;])；该方法从&lt;字符串对象&gt;中查找&lt;另一个字符串对象&gt;（如果给出&lt;起始位置&gt;就忽略之 前的位置），如果找到了，就返回它的位置，没有找到就返回“-1”。所有的“位置”都是从零开始的。</p><p>lastIndexOf() 用法：&lt;字符串对象&gt;.lastIndexOf(&lt;另一个字符串对象&gt;[, &lt;起始位置&gt;])；跟 indexOf() 相似，不过是从后边开始找。</p><p>split() 用法：&lt;字符串对象&gt;.split(&lt;分隔符字符&gt;)；返回一个数组，该数组是从&lt;字符串对象&gt;中分离开来 的，&lt;分隔符字符&gt;决定了分离的地方，它本身不会包含在所返回的数组中。例 如：’1&amp;2&amp;345&amp;678′.split(‘&amp;’)返回数组：1,2,345,678。关于数组，我们等一下就讨 论。</p><p>substring() 用法：&lt;字符串对象&gt;.substring(&lt;始&gt;[, &lt;终&gt;])；返回原字符串的子字符串，该字符串是原字符串从&lt;始&gt;位置到&lt;终&gt;位置的前一位置的一段。&lt; 终&gt; – &lt;始&gt; = 返回字符串的长度（length）。如果没有指定&lt;终&gt;或指定得超过字符串长度，则子字符串从&lt;始&gt;位置一直取到原字符串尾。如 果所指定的位置不能返回字符串，则返回空字符串。</p><p>substr() 用法：&lt;字符串对象&gt;.substr(&lt;始&gt;[, &lt;长&gt;])；返回原字符串的子字符串，该字符串是原字符串从&lt;始&gt;位置开始，长度为&lt;长&gt;的一段。如果没有指 定&lt;长&gt;或指定得超过字符串长度，则子字符串从&lt;始&gt;位置一直取到原字符串尾。如果所指定的位置不能返回字符串，则返回空字符 串。</p><p>toLowerCase() 用法：&lt;字符串对象&gt;.toLowerCase()；返回把原字符串所有大写字母都变成小写的字符串。</p><p>toUpperCase() 用法：&lt;字符串对象&gt;.toUpperCase()；返回把原字符串所有小写字母都变成大写的字符串。</p><p>Array 数组对象。数组对象是一个对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置（既然是“位置”， 就也是从零开始的啦）。</p><p>数组的定义方法：</p><p>var &lt;数组名&gt; = new Array();</p><p>这样就定义了一个空数组。以后要添加数组元素，就用：</p><p>&lt; 数组名&gt;[&lt;下标&gt;] = …;</p><p>注意这里的方括号不是“可以省略”的意思，数组的下标表 示方法就是用方括号括起来。</p><p>如果想在定义数组的时候直接初始化数据，请用：</p><p>var &lt;数组名&gt; = new Array(&lt;元素1&gt;, &lt;元素2&gt;, &lt;元素3&gt;…);</p><p>例 如，var myArray = new Array(1, 4.5, ‘Hi’); 定义了一个数组 myArray，里边的元素是：myArray[0] == 1; myArray[1] == 4.5; myArray[2] == ‘Hi’。</p><p>但 是，如果元素列表中只有一个元素，而这个元素又是一个正整数的话，这将定义一个包含&lt;正整数&gt;个空元素的数组。</p><p>注 意：JavaScript只有一维数组！千万不要用“Array(3,4)”这种愚蠢的方法来定义 4 x 5 的二维数组，或者用“myArray[2,3]”这种方法来返回“二维数组”中的元素。任意“myArray[…,3]”这种形式的调用其实只返回了 “myArray[3]”。要使用多维数组，请用这种虚拟法：</p><p>var myArray = new Array(new Array(), new Array(), new Array(), …);</p><p>其实 这是一个一维数组，里边的每一个元素又是一个数组。调用这个“二维数组”的元素时：myArray[2][3] = …;</p><p>属 性</p><p>length 用法：&lt;数组对象&gt;.length；返回：数组的长度，即数组里有多少个元素。它等于数组里最后一个元素的下标加一。所以，想添加一个元素， 只需要：myArray[myArray.length] = …。</p><p>方法</p><p>join() 用法：&lt;数组对象&gt;.join(&lt;分隔符&gt;)；返回一个字符串，该字符串把数组中的各个元素串起来，用&lt;分隔符&gt;置 于元素与元素之间。这个方法不影响数组原本的内容。</p><p>reverse() 用法：&lt;数组对象&gt;.reverse()；使数组中的元素顺序反过来。如果对数组[1, 2, 3]使用这个方法，它将使数组变成：[3, 2, 1]。</p><p>slice() 用法：&lt;数组对象&gt;.slice(&lt;始&gt;[, &lt;终&gt;])；返回一个数组，该数组是原数组的子集，始于&lt;始&gt;，终于&lt;终&gt;。如果不给出&lt;终&gt;，则子集 一直取到原数组的结尾。</p><p>sort() 用法：&lt;数组对象&gt;.sort([&lt;方法函数&gt;])；使数组中的元素按照一定的顺序排列。如果不指定&lt;方法函数&gt;， 则按字母顺序排列。在这种情况下，80 是比 9 排得前的。如果指定&lt;方法函数&gt;，则按&lt;方法函数&gt;所指定的排序方法排序。&lt;方法函数&gt;比较难讲述，这里只将一些有 用的&lt;方法函数&gt;介绍给大家。</p><p>按升序排列数字：</p><p>function sortMethod(a, b) {</p><p>return a – b;</p><p>}</p><p>myArray.sort(sortMethod);</p><p>按 降序排列数字：把上面的“a – b”该成“b – a”。</p><p>有关函数，请看下面。</p><p>Math “数学”对象，提供对数据的数学计算。下面所提到的属性和方法，不再详细说明“用法”，大家在使用的时候记住用“Math.&lt; 名&gt;”这种格式。</p><p>属性</p><p>E 返 回常数 e (2.718281828…)。</p><p>LN2 返回 2 的自然对数 (ln 2)。</p><p>LN10 返回 10 的自然对数 (ln 10)。</p><p>LOG2E 返回以 2 为低的 e 的对数 (log2e)。</p><p>LOG10E 返回以 10 为低的 e 的对数 (log10e)。</p><p>PI 返回 π（3.1415926535…)。</p><p>SQRT1_2 返回 1/2 的平方根。</p><p>SQRT2 返回 2 的平方根。</p><p>方法</p><p>abs(x) 返 回 x 的绝对值。</p><p>acos(x) 返回 x 的反余弦值（余弦值等于 x 的角度），用弧度表示。</p><p>asin(x) 返回 x 的反正弦值。</p><p>atan(x) 返回 x 的反正切值。</p><p>atan2(x, y) 返回复平面内点(x, y)对应的复数的幅角，用弧度表示，其值在 -π 到 π 之间。</p><p>ceil(x) 返回大于等于 x 的最小整数。</p><p>cos(x) 返回 x 的余弦。</p><p>exp(x) 返回 e 的 x 次幂 (ex)。</p><p>floor(x) 返回小于 等于 x 的最大整数。</p><p>log(x) 返回 x 的自然对数 (ln x)。</p><p>max(a, b) 返回 a, b 中较大的数。</p><p>min(a, b) 返回 a, b 中较小的数。</p><p>pow(n, m) 返回 n 的 m 次幂 (nm)。</p><p>random() 返 回大于 0 小于 1 的一个随机数。</p><p>round(x) 返回 x 四舍五入后的值。</p><p>sin(x) 返回 x 的正弦。</p><p>sqrt(x) 返回 x 的平方根。</p><p>tan(x) 返回 x 的正切。</p><p>Date 日期对象。这个对象可以 储存任意一个日期，从 0001 年到 9999 年，并且可以精确到毫秒数（1/1000 秒）。在内部，日期对象是一个整数，它是从 1970 年 1 月 1 日零时正开始计算到日期对象所指的日期的毫秒数。如果所指日期比 1970 年早，则它是一个负数。所有日期时间，如果不指定时区，都采用“UTC”（世界时）时区，它与“GMT”（格林威治时间）在数值上是一样的。</p><p>定 义一个日期对象：</p><p>var d = new Date;</p><p>这个方法使 d 成为日期对象，并且已有初始值：当前时间。如果要自定初始值，可以用：</p><p>var d = new Date(99, 10, 1);     //99 年 10 月 1 日</p><p>var d = new Date(‘Oct 1, 1999’); //99 年 10 月 1 日</p><p>等等方法。最好的方法就是用下面介绍的“方法”来严格的定义时间。</p><p>方 法</p><p>以下有很多“g/set[UTC]XXX”这样的方法，它表示既有 “getXXX”方法，又有“setXXX”方法。 “get”是获得某个数值，而“set”是设定某个数值。如果带有“UTC”字母，则表示获得/设定的数值是基于 UTC 时间的，没有则表示基于本地时间或浏览期默认时间的。</p><p>如无说明，方法的使用格式为：“&lt;对象&gt;.&lt;方法&gt;”，下 同。</p><p>g/set[UTC]FullYear() 返回/设置年份，用四位数表示。如果使用“x.set[UTC]FullYear(99)”，则年份被设定为 0099 年。</p><p>g/set[UTC]Year() 返回/设置年份，用两位数表示。设定的时候浏览器自动加上“19”开头，故使用“x.set[UTC]Year(00)”把年份设定 为 1900 年。</p><p>g/set[UTC]Month() 返回/设置月 份。</p><p>g/set[UTC]Date() 返回/设置日期。</p><p>g/set[UTC]Day() 返回/设置星期，0 表示星期天。</p><p>g/set[UTC]Hours() 返回/设置小时数，24小时制。</p><p>g/set[UTC]Minutes() 返回/设置分钟数。</p><p>g/set[UTC]Seconds() 返 回/设置秒钟数。</p><p>g/set[UTC]Milliseconds() 返 回/设置毫秒数。</p><p>g/setTime() 返回/设置时间，该时间就是日期对象的内部处理方法：从 1970 年 1 月 1 日零时正开始计算到日期对象所指的日期的毫秒数。如果要使某日期对象所指的时间推迟 1 小时，就用：“x.setTime(x.getTime() + 60 * 60 * 1000);”（一小时 60 分，一分 60 秒，一秒 1000 毫秒）。</p><p>getTimezoneOffset() 返回日期对象采用的时区与格林威治时间所差的分钟数。在格林威治东方的市区，该值为负，例如：中国时区（GMT+0800）返回“-480”。</p><p>toString() 返回一个字符串，描述日期对象所指的日期。这个字符串的格式类似于：“Fri Jul 21 15:43:46 UTC+0800 2000”。</p><p>toLocaleString() 返回一个字符串，描述日期对象所指的日期，用本地时间表示格式。如：“2000-07-21 15:43:46”。</p><p>toGMTString() 返回一个字符串，描述日期对象所指的日期，用 GMT 格式。</p><p>toUTCString() 返回一个字符串，描述日期对象所指的日期，用 UTC 格式。</p><p>parse() 用法：Date.parse(&lt;日期对象&gt;)；返回该日期对象的内部表达方式。</p><p>全局对象</p><p>全 局对象从不现形，它可以说是虚拟出来的，目的在于把全局函数“对象化”。在 Microsoft JScript 语言参考中，它叫做“Global 对象”，但是引用它的方法和属性从来不用“Global.xxx”（况且这样做会出错），而直接用“xxx”。</p><p>属 性</p><p>NaN 一早就说过了。</p><p>方法</p><p>eval() 把括号内的字符串当作标准语句或表达式来运行。</p><p>isFinite() 如果括号内的数字是“有限”的（介于 Number.MIN_VALUE 和 Number.MAX_VALUE 之间）就返回 true；否则返回 false。</p><p>isNaN() 如果括号内的值是“NaN”则返回 true 否则返回 false。</p><p>parseInt() 返回把括号内的内容转换成整数之后的值。如果括号内是字符串，则字符串开头的数字部分被转换成整数，如果以字母开头，则返回“NaN”。</p><p>parseFloat() 返回把括号内的字符串转换成浮点数之后的值，字符串开头的数字部分被转换成浮点数，如果以字母开头，则返回“NaN”。</p><p>toString() 用法：&lt;对象&gt;.toString()；把对象转换成字符串。如果在括号中指定一个数值，则转换过程中所有数值转换成特定进制。</p><p>escape() 返回括号中的字符串经过编码后的新字符串。该编码应用于 URL，也就是把空格写成“%20”这种格式。“+”不被编码，如果要“+”也被编码，请用：escape(‘…’, 1)。</p><p>unescape() 是 escape() 的反过程。解编括号中字符串成为一般字符串。</p><p>函数</p><p>函 数的定义</p><p>所谓“函数”，是有返回值的对象或对象的方法。</p><p>函数的种类</p><p>常 见的函数有：构造函数，如 Array()，能构造一个数组；全局函数，即全局对象里的方法；自定义函数；等等。</p><p>自定义函 数</p><p>定义函数用以下语句：</p><p>function 函数名([参数集]) {</p><p>…</p><p>[return[ &lt;值&gt;];]</p><p>…</p><p>}</p><p>其中， 用在 function 之后和函数结尾的大括号是不能省去的，就算整个函数只有一句。</p><p>函数名与变量名有一样的起名规定，也就是只包含字母 数字下划线、字母排头、不能与保留字重复等。</p><p>参数集可有可无，但括号就一定要有。</p><p>参数 是 函数外部向函数内部传递信息的桥梁，例如，想叫一个函数返回 3 的立方，你就要让函数知道“3”这个数值，这时候就要有一个变量来接收数值，这种变量叫做参数。</p><p>参数集是一个或多个用逗号分隔开来的参数的 集合，如：a, b, c。</p><p>函数的内部有一至多行语句，这些语句并不会立即执行，而只当有其它程序调用它时才执行。这些语句中可能包含 “return”语句。在执行一个函数的时候，碰到 return 语句，函数立刻停止执行，并返回到调用它的程序中。如果“return”后带有&lt;值&gt;，则退出函数的同时返回该值。</p><p>在函数的内 部，参数可以直接当作变量来使用，并可以用 var 语句来新建一些变量，但是这些变量都不能被函数外部的过程调用。要使函数内部的信息能被外部调用，要么使用“return”返回值，要么使用全 局变量。</p><p>全局变量 在 Script 的“根部”（非函数内部）的“var”语句所定义的变量就是全局变量，它能在整个过程的任意地方被调用、更改。</p><p>例</p><p>function addAll(a, b, c) {</p><p>return a + b + c;</p><p>}</p><p>var total = addAll(3, 4, 5);</p><p>这个例子建立了一个叫“addAll”的函数，它有 3 个参数：a, b, c，作用是返回三个数相加的结果。在函数外部，利用“var total = addAll(3, 4, 5);”接收函数的返回值。</p><p>更 多的时候，函数是没有返回值的，这种函数在一些比较强调严格的语言中是叫做“过程”的，例如 Basic 类语言的“Sub”、Pascal 语言的“procedure”。</p><p>属性</p><p>arguments 一个数组，反映外部程序调用函数时指定的参数。用法：直接在函数内部调用“arguments”。</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'  我学JavaScript 1.3 对象化编程（文档对象）',
            describe:'现在我们将开始讨论更“实际”的话题——文档对象(DOM)。文档对象是指在网页文档里划分出来的对象。在 JavaScript 能够涉及的范围内有如下几个“大”对象：window, document, location, navigator, ...',
            author:"古歌",
            time:"2010-04-19",
            flow:12077,
            comments:[],
            enjoy:0,
            id:"6126.html",
            content:'<p>文档对象</p><p>现在我们将开始讨论更“实际”的话题——文档对象(DOM)。文档对象是指在网页文档里划分出来的对象。在 JavaScript 能够涉及的范围内有如下几个“大”对象：window, document, location, navigator, screen, history 等。下面是一个文档对象树，你可以看到对象下包含对象的“壮观”情景。要引用某个对象，就要把父级的对象都列出来。例如，要引用某表单 “applicationForm”的某文字框“customerName”，就要用 “document.applicationForm.customerName”。</p><p>下表中有些对象是全小写的，有些是以大写字母开头的。以大写字母开头的对象表示，引用该对象不使用下表列出的名字，而直接用对象的“名字”（Id 或 Name，下面有讲解），或用它所属的对象数组指定。</p><p>这里我们不准备讲解对象的“事件”，虽然我们也会列出对象所能响应的事件。我们将会在下一章“事件处理”中讲解事件。</p><p>* navigator</p><p>* screen</p><p>* window</p><p>o history</p><p>o location</p><p>o frames[]; Frame</p><p>o document</p><p>+ anchors[]; links[]; Link</p><p>+ applets[]</p><p>+ embeds[]</p><p>+ forms[]; Form</p><p># Button</p><p># Checkbox</p><p># elements[]; Element</p><p># Hidden</p><p># Password</p><p># Radio</p><p># Reset</p><p># Select</p><p>* options[]; Option</p><p># Submit</p><p># Text</p><p># Textarea</p><p>+ images[]; Image</p><p>浏览器对象</p><p>屏幕对象</p><p>窗口对象</p><p>历史对象</p><p>地址对象</p><p>框架对象</p><p>文档对象</p><p>连接对象</p><p>Java小程序对象</p><p>插件对象</p><p>表单对象</p><p>按钮对象</p><p>复选框对象</p><p>表单元素对象</p><p>隐藏对象</p><p>密码输入区对象</p><p>单选域对象</p><p>重置按钮对象</p><p>选择区（下拉菜单、列表）对象</p><p>选择项对象</p><p>提交按钮对象</p><p>文本框对象</p><p>多行文本输入区对象</p><p>图片对象</p><p>navigator 浏览器对象 反映了当前使用的浏览器的资料。</p><p>属性</p><p>appCodeName 返回浏览器的“码名”(?)，流行的 IE 和 NN 都返回 ‘Mozilla’。</p><p>appName 返回浏览器名。IE 返回 ‘Microsoft Internet Explorer’，NN 返回 ‘Netscape’。</p><p>appVersion 返回浏览器版本，包括了大版本号、小版本号、语言、操作平台等信息。</p><p>platform 返回浏览器的操作平台，对于 Windows 9x 上的浏览器，返回 ‘Win32’（大小写可能有差异）。</p><p>userAgent 返回以上全部信息。例如，IE5.01 返回 ‘Mozilla/4.0 (compatible; MSIE 5.01; Windows 98)’。</p><p>javaEnabled() 返回一个布尔值，代表当前浏览器允许不允许 Java。</p><p>screen 屏幕对象 反映了当前用户的屏幕设置。</p><p>属性</p><p>width 返回屏幕的宽度（像素数）。</p><p>height 返回屏幕的高度。</p><p>availWidth 返回屏幕的可用宽度（除去了一些不自动隐藏的类似任务栏的东西所占用的宽度）。</p><p>availHeight 返回屏幕的可用高度。</p><p>colorDepth 返回当前颜色设置所用的位数 – 1：黑白；8：256色；16：增强色；24/32：真彩色</p><p>window 窗口对象 最大的对象，它描述的是一个浏览器窗口。一般要引用它的属性和方法时，不需要用“window.xxx”这种形式，而直接使用“xxx”。一个框架页面也是一个窗口。</p><p>属性</p><p>name 窗口的名称，由打开它的连接（&lt;a target=”…”&gt;）或框架页（&lt;frame name=”…”&gt;）或某一个窗口调用的 open() 方法（见下）决定。一般我们不会用这个属性。</p><p>status 指窗口下方的“状态栏”所显示的内容。通过对 status 赋值，可以改变状态栏的显示。</p><p>opener 用法：window.opener；返回打开本窗口的窗口对象。注意：返回的是一个窗口对象。如果窗口不是由其他窗口打开的，在 Netscape 中这个属性返回 null；在 IE 中返回“未定义”（undefined）。undefined 在一定程度上等于 null。注意：undefined 不是 JavaScript 常数，如果你企图使用“undefined”，那就真的返回“未定义”了。</p><p>self 指窗口本身，它返回的对象跟 window 对象是一模一样的。最常用的是“self.close()”，放在&lt;a&gt;标记中：“&lt;a href=”javascript:self.close()”&gt;关闭窗口&lt;/a&gt;”。</p><p>parent 返回窗口所属的框架页对象。</p><p>top 返回占据整个浏览器窗口的最顶端的框架页对象。</p><p>history 历史对象，见下。</p><p>location 地址对象，见下。</p><p>document 文档对象，见下。</p><p>方法</p><p>open() 打开一个窗口。用法：open(&lt;URL字符串&gt;, &lt;窗口名称字符串&gt;, &lt;参数字符串&gt;);</p><p>&lt;URL字符串&gt;：描述所打开的窗口打开哪一个网页。如果留空（”），则不打开任意网页。</p><p>&lt;窗口名称字符串&gt;：描述被打开的窗口的名称（window.name），可以使用’_top’、’_blank’等内建名称。这里的名称跟“&lt;a href=”…” target=”…”&gt;”里的“target”属性是一样的。</p><p>&lt;参数字符串&gt;：描述被打开的窗口的样貌。如果只需要打开一个普通窗口，该字符串留空（”），如果要指定样貌，就在字符串里写上一到多个参数，参数之间用逗号隔开。</p><p>例：打开一个 400 x 100 的干净的窗口：</p><p>open(”,’_blank’,’width=400,height=100,menubar=no,toolbar=no,</p><p>location=no,directories=no,status=no,scrollbars=yes,resizable=yes’)</p><p>参数</p><p>top=# 	窗口顶部离开屏幕顶部的像素数</p><p>left=# 	窗口左端离开屏幕左端的像素数</p><p>width=# 	窗口的宽度</p><p>height=# 	窗口的高度</p><p>menubar=… 	窗口有没有菜单，取值yes或no</p><p>toolbar=… 	窗口有没有工具条，取值yes或no</p><p>location=… 	窗口有没有地址栏，取值yes或no</p><p>directories=… 	窗口有没有连接区，取值yes或no</p><p>scrollbars=… 	窗口有没有滚动条，取值yes或no</p><p>status=… 	窗口有没有状态栏，取值yes或no</p><p>resizable=… 	窗口给不给调整大小，取值yes或no</p><p>open() 方法有返回值，返回的就是它打开的窗口对象。所以，</p><p>var newWindow = open(”,’_blank’);</p><p>这样把一个新窗口赋值到“newWindow”变量中，以后通过“newWindow”变量就可以控制窗口了。</p><p>close() 关闭一个已打开的窗口。</p><p>用法：window.close() 或 self.close()：关闭本窗口；</p><p>&lt;窗口对象&gt;.close()：关闭指定的窗口。</p><p>如果该窗口有状态栏，调用该方法后浏览器会警告：“网页正在试图关闭窗口，是否关闭？”然后等待用户选择是否；如果没有状态栏，调用该方法将直接关闭窗口。</p><p>blur() 使焦点从窗口移走，窗口变为“非活动窗口”。</p><p>focus() 是窗口获得焦点，变为“活动窗口”。不过在 Windows 98，该方法只能使窗口的标题栏和任务栏上的相应按钮闪烁，提示用户该窗口正在试图获得焦点。</p><p>scrollTo() 用法：[&lt;窗口对象&gt;.]scrollTo(x, y)；使窗口滚动，使文档从左上角数起的(x, y)点滚动到窗口的左上角。</p><p>scrollBy() 用法：[&lt;窗口对象&gt;.]scrollBy(deltaX, deltaY)；使窗口向右滚动 deltaX 像素，向下滚动 deltaY 像素。如果取负值，则向相反的方向滚动。</p><p>resizeTo() 用法：[&lt;窗口对象&gt;.]resizeTo(width, height)；使窗口调整大小到宽 width 像素，高 height 像素。</p><p>resizeBy() 用法：[&lt;窗口对象&gt;.]resizeBy(deltaWidth, deltaHeight)；使窗口调整大小，宽增大 deltaWidth 像素，高增大 deltaHeight 像素。如果取负值，则减少。</p><p>alert() 用法：alert(&lt;字符串&gt;)；弹出一个只包含“确定”按钮的对话框，显示&lt;字符串&gt;的内容，整个文档的读取、Script 的运行都会暂停，直到用户按下“确定”。</p><p>confirm() 用法：confirm(&lt;字符串&gt;)；弹出一个包含“确定”和“取消”按钮的对话框，显示&lt;字符串&gt;的内容，要求用户做出选择，整个文档的读取、Script 的运行都会暂停。如果用户按下“确定”，则返回 true 值，如果按下“取消”，则返回 false 值。</p><p>prompt() 用法：prompt(&lt;字符串&gt;[, &lt;初始值&gt;])；弹出一个包含“确认”“取消”和一个文本框的对话框，显示&lt;字符串&gt;的内容，要求用户在文本框输入一些数据，整个文档的读取、Script 的运行都会暂停。如果用户按下“确认”，则返回文本框里已有的内容，如果用户按下“取消”，则返回 null 值。如果指定&lt;初始值&gt;，则文本框里会有默认值。</p><p>事件</p><p>onload; onunload; onresize; onblur; onfocus; onerror</p><p>history 历史对象 历史对象指浏览器的浏览历史。鉴于安全性的需要，该对象收到很多限制，现在只剩下下列属性和方法。</p><p>属性</p><p>length 历史的项数。JavaScript 所能管到的历史被限制在用浏览器的“前进”“后退”键可以去到的范围。本属性返回的是“前进”和“后退”两个按键之下包含的地址数的和。</p><p>方法</p><p>back() 后退，跟按下“后退”键是等效的。</p><p>forward() 前进，跟按下“前进”键是等效的。</p><p>go() 用法：history.go(x)；在历史的范围内去到指定的一个地址。如果 x &lt; 0，则后退 x 个地址，如果 x &gt; 0，则前进 x 个地址，如果 x == 0，则刷新现在打开的网页。history.go(0) 跟 location.reload() 是等效的。</p><p>location 地址对象 它描述的是某一个窗口对象所打开的地址。要表示当前窗口的地址，只需要使用“location”就行了；若要表示某一个窗口的地址，就使用“&lt;窗口对象&gt;.location”。</p><p>注意 属于不同协议或不同主机的两个地址之间不能互相引用对方的 location 对象，这是出于安全性的需要。例如，当前窗口打开的是“www.a.com”下面的某一页，另外一个窗口（对象名为：bWindow）打开的是 “www.b.com”的网页。如果在当前窗口使用“bWindow.location”，就会出错：“没有权限”。这个错误是不能用错误处理程序（Event Handler，参阅 onerror 事件)来接收处理的。</p><p>属性</p><p>protocol 返回地址的协议，取值为 ‘http:’,’https:’,’file:’ 等等。</p><p>hostname 返回地址的主机名，例如，一个“http://www.microsoft.com/china/”的地址，location.hostname == ‘www.microsoft.com’。</p><p>port 返回地址的端口号，一般 http 的端口号是 ’80’。</p><p>host 返回主机名和端口号，如：’www.a.com:8080’。</p><p>pathname 返回路径名，如“http://www.a.com/b/c.html”，location.pathname == ‘b/c.html’。</p><p>hash 返回“#”以及以后的内容，如“http://www.a.com/b/c.html#chapter4”，location.hash == ‘#chapter4’；如果地址里没有“#”，则返回空字符串。</p><p>search 返回“?”以及以后的内容，如“http://www.a.com/b/c.asp?selection=3&amp; jumpto=4”，location.search == ‘?selection=3&amp;jumpto=4’；如果地址里没有“?”，则返回空字符串。</p><p>href 返回以上全部内容，也就是说，返回整个地址。在浏览器的地址栏上怎么显示它就怎么返回。如果想一个窗口对象打开某地址，可以使用 “location.href = ‘…’”，也可以直接用“location = ‘…’”来达到此目的。</p><p>方法</p><p>reload() 相当于按浏览器上的“刷新”(IE)或“Reload”(Netscape)键。</p><p>replace() 打开一个 URL，并取代历史对象中当前位置的地址。用这个方法打开一个 URL 后，按下浏览器的“后退”键将不能返回到刚才的页面。</p><p>frames[]; Frame 框架对象 请参阅“使用框架和 Cookies”一章。</p><p>document 文档对象 描述当前窗口或指定窗口对象的文档。它包含了文档从&lt;head&gt;到&lt;/body&gt;的内容。</p><p>用法：document （当前窗口）</p><p>或 &lt;窗口对象&gt;.document （指定窗口）</p><p>属性</p><p>cookie 关于 cookie 请参看“使用框架和 Cookies”一章。</p><p>lastModified 当前文档的最后修改日期，是一个 Date 对象。</p><p>referrer 如果当前文档是通过点击连接打开的，则 referrer 返回原来的 URL。</p><p>title 指&lt;head&gt;标记里用&lt;title&gt;…&lt;/title&gt;定义的文字。在 Netscape 里本属性不接受赋值。</p><p>fgColor 指&lt;body&gt;标记的 text 属性所表示的文本颜色。</p><p>bgColor 指&lt;body&gt;标记的 bgcolor 属性所表示的背景颜色。</p><p>linkColor 指&lt;body&gt;标记的 link 属性所表示的连接颜色。</p><p>alinkColor 指&lt;body&gt;标记的 alink 属性所表示的活动连接颜色。</p><p>vlinkColor 指&lt;body&gt;标记的 vlink 属性所表示的已访问连接颜色。</p><p>方法</p><p>open() 打开文档以便 JavaScript 能向文档的当前位置（指插入 JavaScript 的位置）写入数据。通常不需要用这个方法，在需要的时候 JavaScript 自动调用。</p><p>write(); writeln() 向文档写入数据，所写入的会当成标准文档 HTML 来处理。writeln() 与 write() 的不同点在于，writeln() 在写入数据以后会加一个换行。这个换行只是在 HTML 中换行，具体情况能不能够是显示出来的文字换行，要看插入 JavaScript 的位置而定。如在&lt;pre&gt;标记中插入，这个换行也会体现在文档中。</p><p>clear() 清空当前文档。</p><p>close() 关闭文档，停止写入数据。如果用了 write[ln]() 或 clear() 方法，就一定要用 close() 方法来保证所做的更改能够显示出来。如果文档还没有完全读取，也就是说，JavaScript 是插在文档中的，那就不必使用该方法。</p><p>现在我们已经拥有足够的知识来做以下这个很多网站都有的弹出式更新通知了。</p><p>&lt;script language=”JavaScript”&gt;</p><p>&lt;!–</p><p>var whatsNew = open(”,’_blank’,’top=50,left=50,width=200,height=300,’ +</p><p>‘menubar=no,toolbar=no,directories=no,location=no,’ +</p><p>‘status=no,resizable=no,scrollbars=yes’);</p><p>whatsNew.document.write(‘&lt;center&gt;&lt;b&gt; 更新通知&lt;/b&gt;&lt;/center&gt;’);</p><p>whatsNew.document.write(‘&lt;p&gt;最后更新日期：00.08.01’);</p><p>whatsNew.document.write(‘&lt;p&gt;00.08.01：增加了“我的最爱” 栏目。’);</p><p>whatsNew.document.write(‘&lt;p align=”right”&gt;’ +</p><p>‘&lt;a href=”javascript:self.close()”&gt;关闭窗口&lt;/a&gt;’);</p><p>whatsNew.document.close();</p><p>–&gt;</p><p>&lt;/script&gt;</p><p>当然也可以先写好一个 HTML 文件，在 open() 方法中直接 load 这个文件。</p><p>anchors[]; links[]; Link 连接对象</p><p>用法：document.anchors[[x]]; document.links[[x]]; &lt;anchorId&gt;; &lt;linkId&gt;</p><p>document.anchors 是一个数组，包含了文档中所有锚标记（包含 name 属性的&lt;a&gt;标记），按照在文档中的次序，从 0 开始给每个锚标记定义了一个下标。</p><p>document.links 也是一个数组，包含了文档中所有连接标记（包含 href 属性的&lt;a&gt;标记和&lt;map&gt;标记段里的&lt;area&gt;标记），按照在文档中的次序，从 0 开始给每个连接标记定义了一个下标。</p><p>如果一个&lt;a&gt;标记既有 name 属性，又有 href 属性，则它既是一个 Anchor 对象，又是一个 Link 对象。</p><p>在 IE 中，如果在&lt;a&gt;标记中添加“id=”…””属性，则这个&lt;a&gt;对象被赋予一个标识（ID），调用这个对象的时候只需要使用 “&lt;id&gt;”就行了。很多文档部件都可以用这个方法来赋予 ID，但要注意不能有两个 ID 相同。</p><p>anchors 和 links 作为数组，有数组的属性和方法。单个 Anchor 对象没有属性；单个 Link 对象的属性见下。</p><p>属性</p><p>protocol; hostname; port; host; pathname; hash; search; href 与 location 对象相同。</p><p>target 返回/指定连接的目标窗口（字符串），与&lt;a&gt;标记里的 target 属性是一样的。</p><p>事件</p><p>onclick; onmouseover; onmouseout; onmousedown; onmouseup</p><p>applets[] Java小程序对象 它是一个数组，包含了文档中所有的 Applet 对象（Java 小程序）。作为一个数组，有数组的属性和方法。关于单个 Applet 对象的属性和方法，我引用一句话：“Applet 对象继承了 Java 小程序的所有公共属性和方法。”(英文原句：The Applet object inherits all public properties of the Java applet./The Applet object inherits all public methodss of the Java applet.) 因为本人很厌恶 Java 小程序，所以对它的什么“公共”“私有”的问题不感兴趣，也就没有探讨了。</p><p>embeds[] 插件对象 它是一个数组，包含了文档中所有的插件（&lt;embed&gt;标记）。因为每个插件的不同，每个 Embed 对象也有不同的属性和方法。</p><p>forms[]; Form 表单对象 document.forms[] 是一个数组，包含了文档中所有的表单（&lt;form&gt;）。要引用单个表单，可以用 document.forms[x]，但是一般来说，人们都会这样做：在&lt;form&gt;标记中加上“name=”…””属性，那么直接用 “document.&lt;表单名&gt;”就可以引用了。</p><p>Form 对象的属性</p><p>name 返回表单的名称，也就是&lt;form name=”…”&gt;属性。</p><p>action 返回/设定表单的提交地址，也就是&lt;form action=”…”&gt;属性。</p><p>method 返回/设定表单的提交方法，也就是&lt;form method=”…”&gt;属性。</p><p>target 返回/设定表单提交后返回的窗口，也就是&lt;form target=”…”&gt;属性。</p><p>encoding 返回/设定表单提交内容的编码方式，也就是&lt;form enctype=”…”&gt;属性。</p><p>length 返回该表单所含元素的数目。</p><p>方法</p><p>reset() 重置表单。这与按下“重置”按钮是一样的。</p><p>submit() 提交表单。这与按下“提交”按钮是一样的。</p><p>事件</p><p>onreset; onsubmit</p><p>以下从“Button”到“Textarea”都是表单的元素对象。</p><p>Button 按钮对象 由“&lt;input type=”button”&gt;”指定。引用一个 Button 对象，可以使用“&lt;文档对象&gt;.&lt;表单对象&gt;.&lt;按钮名称&gt;”。&lt;按钮名称&gt;指在&lt;input&gt;标记中的“name=”…””属性的值。引用任意表单元素都可以用这种方法。</p><p>属性</p><p>name 返回/设定用&lt;input name=”…”&gt;指定的元素名称。</p><p>value 返回/设定用&lt;input value=”…”&gt;指定的元素的值。</p><p>form 返回包含本元素的表单对象。</p><p>方法</p><p>blur() 从对象中移走焦点。</p><p>focus() 让对象获得焦点。</p><p>click() 模拟鼠标点击该对象。</p><p>事件</p><p>onclick; onmousedown; onmouseup</p><p>Checkbox 复选框对象 由“&lt;input type=”checkbox”&gt;”指定。</p><p>属性</p><p>name 返回/设定用&lt;input name=”…”&gt;指定的元素名称。</p><p>value 返回/设定用&lt;input value=”…”&gt;指定的元素的值。</p><p>form 返回包含本元素的表单对象。</p><p>checked 返回/设定该复选框对象是否被选中。这是一个布尔值。</p><p>defaultChecked 返回/设定该复选框对象默认是否被选中。这是一个布尔值。</p><p>方法</p><p>blur() 从对象中移走焦点。</p><p>focus() 让对象获得焦点。</p><p>click() 模拟鼠标点击该对象。</p><p>事件</p><p>onclick</p><p>elements[]; Element 表单元素对象 &lt;表单对象&gt;.elements 是一个数组，包含了该表单所有的对象。一般我们不用该数组，而直接引用各个具体的对象。</p><p>Hidden 隐藏对象 由“&lt;input type=”hidden”&gt;”指定。</p><p>属性</p><p>name 返回/设定用&lt;input name=”…”&gt;指定的元素名称。</p><p>value 返回/设定用&lt;input value=”…”&gt;指定的元素的值。</p><p>form 返回包含本元素的表单对象。</p><p>Password 密码输入区对象 由“&lt;input type=”password”&gt;”指定。</p><p>属性</p><p>name 返回/设定用&lt;input name=”…”&gt;指定的元素名称。</p><p>value 返回/设定密码输入区当前的值。</p><p>defaultValue 返回用&lt;input value=”…”&gt;指定的默认值。</p><p>form 返回包含本元素的表单对象。</p><p>方法</p><p>blur() 从对象中移走焦点。</p><p>focus() 让对象获得焦点。</p><p>select() 选中密码输入区里全部文本。</p><p>事件</p><p>onchange</p><p>Radio 单选域对象 由“&lt;input type=”radio”&gt;”指定。一组 Radio 对象有共同的名称（name 属性），这样的话，document.formName.radioName 就成了一个数组。要访问单个 Radio 对象就要用：document.formName.radioName[x]。</p><p>单个 Radio 对象的属性</p><p>name 返回/设定用&lt;input name=”…”&gt;指定的元素名称。</p><p>value 返回/设定用&lt;input value=”…”&gt;指定的元素的值。</p><p>form 返回包含本元素的表单对象。</p><p>checked 返回/设定该单选域对象是否被选中。这是一个布尔值。</p><p>defaultChecked 返回/设定该对象默认是否被选中。这是一个布尔值。</p><p>方法</p><p>blur() 从对象中移走焦点。</p><p>focus() 让对象获得焦点。</p><p>click() 模拟鼠标点击该对象。</p><p>事件</p><p>onclick</p><p>Reset 重置按钮对象 由“&lt;input type=”reset”&gt;”指定。因为 Reset 也是按钮，所以也有 Button 对象的属性和方法。至于“onclick”事件，一般用 Form 对象的 onreset 代替。</p><p>Select 选择区（下拉菜单、列表）对象 由“&lt;select&gt;”指定。</p><p>属性</p><p>name 返回/设定用&lt;input name=”…”&gt;指定的元素名称。</p><p>length 返回 Select 对象下选项的数目。</p><p>selectedIndex 返回被选中的选项的下标。这个下标就是在 options[] 数组中该选项的位置。如果 Select 对象允许多项选择，则返回第一个被选中的选项的下标。</p><p>form 返回包含本元素的表单对象。</p><p>方法</p><p>blur() 从对象中移走焦点。</p><p>focus() 让对象获得焦点。</p><p>事件</p><p>onchange</p><p>options[]; Option 选择项对象 options[] 是一个数组，包含了在同一个 Select 对象下的 Option 对象。Option 对象由“&lt;select&gt;”下的“&lt;options&gt;”指定。</p><p>options[] 数组的属性</p><p>length; selectedIndex 与所属 Select 对象的同名属性相同。</p><p>单个 Option 对象的属性</p><p>text 返回/指定 Option 对象所显示的文本</p><p>value 返回/指定 Option 对象的值，与&lt;options value=”…”&gt;一致。</p><p>index 返回该 Option 对象的下标。对此并没有什么好说，因为要指定特定的一个 Option 对象，都要先知道该对象的下标。这个属性好像没有什么用。</p><p>selected 返回/指定该对象是否被选中。通过指定 true 或者 false，可以动态的改变选中项。</p><p>defaultSelected 返回该对象默认是否被选中。true / false。</p><p>Submit 提交按钮对象 由“&lt;input type=”submit”&gt;指定。因为 Submit 也是按钮，所以也有 Button 对象的属性和方法。至于“onclick” 事件，一般用 Form 对象的 onsubmit 代替。</p><p>Text 文本框对象 由“&lt;input type=”text”&gt;”指定。Password 对象也是 Text 对象的一种，所以 Password 对象所有的属性、方法和事件，Text 对象都有。</p><p>Textarea 多行文本输入区对象 由 “&lt;textarea&gt;”指定。Textarea 对象所有的属性、方法和事件和 Text 对象相同，也就是跟 Password 对象一样。</p><p>images[]; Image 图片对象 document.images[] 是一个数组，包含了文档中所有的图片（&lt;img&gt;）。要引用单个图片，可以用 document.images[x]。如果某图片包含“name”属性，也就是用“&lt;img name=”…”&gt;”这种格式定义了一幅图片，就可以使用“document.images[‘…’]”这种方法来引用图片。在 IE 中，如果某图片包含 ID 属性，也就是用“&lt;img id=”…”&gt;”这种格式定义了一幅图片，就可以直接使用“&lt;imageID&gt;”来引用图片。</p><p>单个 Image 对象的属性</p><p>name; src; lowsrc; width; height; vspace; hspace; border 这些属性跟&lt;img&gt;标记里的同名属性是一样的。在 Netscape 里，除了 src 属性，其它属性（几乎全部）都不能改的，即使改了，在文档中也不能显示出效果来。这些属性最有用的就是 src 了，通过对 src 属性赋值，可以实时的更改图片。</p><p>事件</p><p>onclick</p><p>不显示在文档中的 Image 对象</p><p>不显示在文档中的 Image 对象是用 var 语句定义的：</p><p>var myImage = new Image(); 或</p><p>var myImage = new Image(&lt;图片地址字符串&gt;);</p><p>然后就可以像一般 Image 对象一样对待 myImage 变量了。不过既然它不显示在文档中，以下属性：lowsrc, width, height, vspace, hspace, border 就没有什么用途了。一般这种对象只有一个用：预读图片(preload)。因为当对对象的 src 属性赋值的时候，整个文档的读取、JavaScript 的运行都暂停，让浏览器专心的读取图片。预读图片以后，浏览器的缓存里就有了图片的 Copy，到真正要把图片放到文档中的时候，图片就可以立刻显示了。现在的网页中经常会有一些图像连接，当鼠标指向它的时候，图像换成另外一幅图像，它们都是先预读图像的。</p><p>预读图像的 JavaScript 例子</p><p>var imagePreload = new Image();</p><p>imagePreload.src = ‘001.gif’;</p><p>imagePreload.src = ‘002.gif’;</p><p>imagePreload.src = ‘003.gif’;</p><p>以上例子适合预读少量图片。</p><p>function imagePreload() {</p><p>var imgPreload = new Image();</p><p>for (i = 0; i &lt; arguments.length; i++) {</p><p>imgPreload.src = arguments[i];</p><p>}</p><p>}</p><p>imagePreload(‘001.gif’, ‘002.gif’, ‘003.gif’, ‘004.gif’, ‘005.gif’);</p><p>以上例子适合预读大量图片。</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript",   
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' 我学JavaScript 1.4 事件处理 ',
            describe:'事件处理是对象化编程的一个很重要的环节，没有了事件处理，程序就会变得很死，缺乏灵活性。事件处理的过程可以这样表示：发生事件 - 启动事件处理程序 - 事件处理程序作出反应。其中，要使事件处理程序能够启动，必须先告诉对象，如果发生了什么事情，...',
            author:"古歌",
            time:"2010-04-19",
            flow:11369,
            comments:[],
            enjoy:0,
            id:"6127.html",
            content:'<p>事件处理</p><p>事件处理概述</p><p>事件处理是对象化编程的一个很重要的环节，没有了事件处理，程序就会变得很死，缺乏灵活性。事件处理的过程可以这样表示：发生事件 – 启动事件处理程序 – 事件处理程序作出反应。其中，要使事件处理程序能够启动，必须先告诉对象，如果发生了什么事情，要启动什么处理程序，否则这个流程就不能进行下去。事件的处理程序可以是任意 JavaScript 语句，但是我们一般用特定的自定义函数（function）来处理事情。</p><p>指定事件处理程序</p><p>指定事件处理程序有三种方法：</p><p>方法一 直接在 HTML 标记中指定。这种方法是用得最普遍的。方法是：</p><p>&lt;标记 … … 事件=”事件处理程序” [事件=”事件处理程序” …]&gt;</p><p>让我们来看看例子：</p><p>&lt;body … onload=”alert(‘网页读取完成，请慢慢欣赏！’)” onunload=”alert(‘再见！’)”&amp; gt;</p><p>这样的定义&lt;body&gt;标记，能使文档读取完毕的时候弹出一个对话框，写着“网页读取完成，请慢慢欣赏”；在用户退出文档（或者关闭窗口，或者到另一个页面去）的时候弹出“再见”。</p><p>方法二 编写特定对象特定事件的 JavaScript。这种方法用得比较少，但是在某些场合还是很好用的。方法是：</p><p>&lt;script language=”JavaScript” for=”对象” event=”事件”&gt;</p><p>…</p><p>(事件处理程序代码)</p><p>…</p><p>&lt;/script&gt;</p><p>例：</p><p>&lt;script language=”JavaScript” for=”window” event=”onload”&gt;</p><p>alert(‘网页读取完成，请慢慢欣赏！’);</p><p>&lt;/script&gt;</p><p>方法三 在 JavaScript 中说明。方法：</p><p>&lt;事件主角 – 对象&gt;.&lt;事件&gt; = &lt;事件处理程序&gt;;</p><p>用这种方法要注意的是，“事件处理程序”是真正的代码，而不是字符串形式的代码。如果事件处理程序是一个自定义函数，如无使用参数的需要，就不要加“()”。例：</p><p>…</p><p>function ignoreError() {</p><p>return true;</p><p>}</p><p>…</p><p>window.onerror = ignoreError; // 没有使用“()”</p><p>这个例子将 ignoreError() 函数定义为 window 对象的 onerror 事件的处理程序。它的效果是忽略该 window 对象下任何错误（由引用不允许访问的 location 对象产生的“没有权限”错误是不能忽略的）。</p><p>事件详解</p><p>onblur 事件 发生在窗口失去焦点的时候。</p><p>应用于：window 对象</p><p>onchange 事件 发生在文本输入区的内容被更改，然后焦点从文本输入区移走之后。捕捉此事件主要用于实时检测输入的有效性，或者立刻改变文档内容。</p><p>应用于：Password 对象；Select 对象；Text 对象；Textarea 对象</p><p>onclick 事件 发生在对象被单击的时候。单击是指鼠标停留在对象上，按下鼠标键，没有移动鼠标而放开鼠标键这一个完整的过程。</p><p>一个普通按钮对象（Button）通常会有 onclick 事件处理程序，因为这种对象根本不能从用户那里得到任何信息，没有 onclick 事件处理程序就等于废柴。按钮上添加 onclick 事件处理程序，可以模拟“另一个提交按钮”，方法是：在事件处理程序中更改表单的 action, target, encoding, method 等一个或几个属性，然后调用表单的 submit() 方法。</p><p>在 Link 对象的 onclick 事件处理程序中返回 false 值（return false），能阻止浏览器打开此连接。即，如果有一个这样的连接：&lt;a href=”http://www.a.com” onclick=”return false”&gt;Go!&lt;/a&gt;，那么无论用户怎样点击，都不会去到 www.a.com 网站，除非用户禁止浏览器运行 JavaScript。</p><p>应用于：Button 对象；Checkbox 对象；Image 对象；Link 对象；Radio 对象；Reset 对象；Submit 对象</p><p>onerror 事件 发生在错误发生的时候。它的事件处理程序通常就叫做“错误处理程序”(Error Handler)，用来处理错误。上边已经介绍过，要忽略一切错误，就使用：</p><p>function ignoreError() {</p><p>return true;</p><p>}</p><p>window.onerror = ignoreError;</p><p>应用于：window 对象</p><p>onfocus 事件 发生在窗口得到焦点的时候。</p><p>应用于：window 对象</p><p>onload 事件 发生在文档全部下载完毕的时候。全部下载完毕意味着不但 HTML 文件，而且包含的图片，插件，控件，小程序等全部内容都下载完毕。本事件是 window 的事件，但是在 HTML 中指定事件处理程序的时候，我们是把它写在&lt;body&gt;标记中的。</p><p>应用于：window 对象</p><p>onmousedown 事件 发生在用户把鼠标放在对象上按下鼠标键的时候。参考 onmouseup 事件。</p><p>应用于：Button 对象；Link 对象</p><p>onmouseout 事件 发生在鼠标离开对象的时候。参考 onmouseover 事件。</p><p>应用于：Link 对象</p><p>onmouseover 事件 发生在鼠标进入对象范围的时候。这个事件和 onmouseout 事件，再加上图片的预读，就可以做到当鼠标移到图像连接上，图像更改的效果了。有时我们看到，在指向一个连接时，状态栏上不显示地址，而显示其它的资料，看起来这些资料是可以随时更改的。它们是这样做出来的：</p><p>&lt;a href=”…”</p><p>onmouseover=”window.status=’Click Me Please!’; return true;”</p><p>onmouseout=”window.status=”; return true;”&gt;</p><p>应用于：Link 对象</p><p>onmouseup 事件 发生在用户把鼠标放在对象上鼠标键被按下的情况下，放开鼠标键的时候。如果按下鼠标键的时候，鼠标并不在放开鼠标的对象上，则本事件不会发生。</p><p>应用于：Button 对象；Link 对象</p><p>onreset 事件 发生在表单的“重置”按钮被单击（按下并放开）的时候。通过在事件处理程序中返回 false 值（return false）可以阻止表单重置。</p><p>应用于：Form 对象</p><p>onresize 事件 发生在窗口被调整大小的时候。</p><p>应用于：window 对象</p><p>onsubmit 事件 发生在表单的“提交”按钮被单击（按下并放开）的时候。可以使用该事件来验证表单的有效性。通过在事件处理程序中返回 false 值（return false）可以阻止表单提交。</p><p>应用于：Form 对象</p><p>onunload 事件 发生在用户退出文档（或者关闭窗口，或者到另一个页面去）的时候。与 onload 一样，要写在 HTML 中就写到&lt;body&gt;标记里。</p><p>有的 Web Masters 用这个方法来弹出“调查表单”，以“强迫”来者填写；有的就弹出广告窗口，唆使来者点击连接。我觉得这种“onunload=”open…”” 的方法很不好，有时甚至会因为弹出太多窗口而导致资源缺乏。有什么对来者说就应该在网页上说完，不对吗？</p><p>应用于：window 对象</p><p>关于对象化编程的语句</p><p>现在我们有实力学习以下关于对象化编程，但其实属于上一章的内容了。</p><p>with 语句 为一个或一组语句指定默认对象。</p><p>用法：with (&lt;对象&gt;) &lt;语句&gt;;</p><p>with 语句通常用来缩短特定情形下必须写的代码量。在下面的例子中，请注意 Math 的重复使用：</p><p>x = Math.cos(3 * Math.PI) + Math.sin(Math.LN10);</p><p>y = Math.tan(14 * Math.E);</p><p>当使用 with 语句时，代码变得更短且更易读：</p><p>with (Math) {</p><p>x = cos(3 * PI) + sin(LN10);</p><p>y = tan(14 * E);</p><p>}</p><p>this 对象 返回“当前”对象。在不同的地方，this 代表不同的对象。如果在 JavaScript 的“主程序”中（不在任何 function 中，不在任何事件处理程序中）使用 this，它就代表 window 对象；如果在 with 语句块中使用 this，它就代表 with 所指定的对象；如果在事件处理程序中使用 this，它就代表发生事件的对象。</p><p>一个常用的 this 用法：</p><p>&lt;script&gt;</p><p>…</p><p>function check(formObj) {</p><p>…</p><p>}</p><p>…</p><p>&lt;/script&gt;</p><p>&lt;body …&gt;</p><p>…</p><p>&lt;form …&gt;</p><p>…</p><p>&lt;input type=”text” … onchange=”check(this.form)”&gt;</p><p>…</p><p>&lt;/form&gt;</p><p>…</p><p>&lt;/body&gt;</p><p>这个用法常用于立刻检测表单输入的有效性。</p><p>自定义构造函数 我们已经知道，Array()，Image()等构造函数能让我们构造一个变量。其实我们自己也可以写自己的构造函数。自定义构造函数也是用 function。在 function 里边用 this 来定义属性。</p><p>function &lt;构造函数名&gt; [(&lt;参数&gt;)] {</p><p>…</p><p>this.&lt;属性名&gt; = &lt;初始值&gt;;</p><p>…</p><p>}</p><p>然后，用 new 构造函数关键字来构造变量：</p><p>var &lt;变量名&gt; = new &lt;构造函数名&gt;[(&lt;参数&gt;)];</p><p>构造变量以后，&lt;变量名&gt;成为一个对象，它有它自己的属性——用 this 在 function 里设定的属性。</p><p>以下是一个从网上找到的搜集浏览器详细资料的自定义构造函数的例子：</p><p>function Is() {</p><p>var agent = navigator.userAgent.toLowerCase();</p><p>this.major = parseInt(navigator.appVersion); //主版本号</p><p>this.minor = parseFloat(navigator.appVersion);//全版本号</p><p>this.ns = ((agent.indexOf(‘mozilla’)!=-1) &amp;&amp;</p><p>((agent.indexOf(‘spoofer’)==-1) &amp;&amp; //是否 Netscape</p><p>(agent.indexOf(‘compatible’) == -1)));</p><p>this.ns2 = (this.ns &amp;&amp; (this.major == 3));    //是否 Netscape 2</p><p>this.ns3 = (this.ns &amp;&amp; (this.major == 3));    //是否 Netscape 3</p><p>this.ns4b = (this.ns &amp;&amp; (this.minor &lt; 4.04)); //是否 Netscape 4 低版本</p><p>this.ns4 = (this.ns &amp;&amp; (this.major &gt;= 4));    //是否 Netscape 4 高版本</p><p>this.ie = (agent.indexOf(“msie”) != -1);      //是否 IE</p><p>this.ie3 = (this.ie &amp;&amp; (this.major == 2));    //是否 IE 3</p><p>this.ie4 = (this.ie &amp;&amp; (this.major &gt;= 4));    //是否 IE 4</p><p>this.op3 = (agent.indexOf(“opera”) != -1);    //是否 Opera 3</p><p>this.win = (agent.indexOf(“win”)!=-1);        //是否 Windows 版本</p><p>this.mac = (agent.indexOf(“mac”)!=-1);        //是否 Macintosh 版本</p><p>this.unix = (agent.indexOf(“x11”)!=-1);       //是否 Unix 版本</p><p>}</p><p>var is = new Is();</p><p>这个构造函数非常完整的搜集了浏览器的信息。我们看到它为对象定义了很多个属性：major, minor, ns, ie, win, mac 等等。它们的意思见上面的注释。把 is 变量定义为 Is() 对象后，用 if (is.ns) 这种格式就可以很方便的知道浏览器的信息了。我们也可以从这个构造函数中看到，它也可以使用一般的 JavaScript 语句（上例中为 var 语句）。</p><p>让我们再来看一个使用参数的构造函数：</p><p>function myFriend(theName, gender, theAge, birthOn, theJob) {</p><p>this.name = theName;</p><p>this.isMale = (gender.toLowerCase == ‘male’);</p><p>this.age = theAge;</p><p>this.birthday = new Date(birthOn);</p><p>this.job = theJob</p><p>}</p><p>var Stephen = new myFriend(‘Stephen’, ‘Male’, 18, ‘Dec 22, 1982’, ‘Student’);</p><p>从这个构造函数我们不但看到了参数的用法，还看到了不同的属性用不同的数据型是可以的（上例五个属性分别为：字符串，布尔值，数字，日期，字符串），还看到了构造函数里也可以用构造函数来“构造”属性。如果用了足够的“保护措施”来避免无限循环，更可以用构造函数自身来构造自己的属性。</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'我学JavaScript 1.5 使用框架和Cookies ',
            describe:'在讲述 window 对象的时候，我们提到过，一个框架内的网页也是 window 对象，也就是说，Frame 对象也是 window 对象。用最容易理解的话说，每一个 HTML 文件占用一个 window 对象，包括定义框架的网页（“框架网...',
            author:"古歌",
            time:"2010-04-19",
            flow:13952,
            comments:[],
            enjoy:0,
            id:"6128.html",
            content:'<p>使用框架和Cookies</p><p>使用框架</p><p>在讲述 window 对象的时候，我们提到过，一个框架内的网页也是 window 对象，也就是说，Frame 对象也是 window 对象。用最容易理解的话说，每一个 HTML 文件占用一个 window 对象，包括定义框架的网页（“框架网页”）。在 IE 里用“&lt;iframe&gt;”标记在文档中插入的框架也是 window 对象，但是用“包含网页”的方法（在 HTML 中显示为“&lt;!–webbot bot=”include” …–&gt;”）读取的 HTML 就不占用独自的 window 对象。每一个框架都是包含它的页的 window 对象的一个子对象（不知道应该叫“属性”不该），要引用它，可以用以下几种方法之一：</p><p>window.frames[x]</p><p>window.frames[‘frameName’]</p><p>window.frameName</p><p>其中，x 指的是该 window 对象中指定的第几个框架，与其它数组一样，x 也是从零开始的。frameName 指的是该框架的名字，跟&lt;frame&gt;里的“name”属性一样。</p><p>如果使用 window.frameName 指定的 window 对象又是一个框架网页，那么引用它的框架的方法：window.frameName.subFrameName。以此类推。</p><p>要注意的时，无论在何处，引用“window”对象所返回的，都是“当前”window 对象。如果要访问其它 window 对象，就要用到 parent 和 top 属性。parent 指的是“父级”window 对象，也就是包含当前 window 对象的框架网页；top 指的是窗口最顶端的 window 对象。</p><p>使用框架还要密切留意你的 JavaScript 中定义的全局变量和自定义函数。它们都有它们的所属——所在的 window 对象。要引用其它框架中的全局变量或自定义函数，都要用“窗口对象.框架对象[.框架对象…].全局变量或自定义函数”这种很烦的方法。</p><p>以上这个问题在建立连接时经常会被忽略：如果在&lt;head&gt;中定义了一个默认目标窗口（&lt;base target=”…”&gt;），在&lt;a href=”javascript:…”&gt;中，要知道输入的 JavaScript 语句是在默认目标窗口中运行的，必要时加一些“parent”“top”属性。</p><p>使用 Cookies</p><p>我们已经知道，在 document 对象中有一个 cookie 属性。但是 Cookie 又是什么？“某些 Web 站点在您的硬盘上用很小的文本文件存储了一些信息，这些文件就称为 Cookie。”—— MSIE 帮助。一般来说，Cookies 是 CGI 或类似，比 HTML 高级的文件、程序等创建的，但是 JavaScript 也提供了对 Cookies 的很全面的访问权利。</p><p>在继续之前，我们先要学一学 Cookie 的基本知识。</p><p>每个 Cookie 都是这样的：&lt;cookie名&gt;=&lt;值&gt;</p><p>&lt;cookie名&gt;的限制与 JavaScript 的命名限制大同小异，少了“不能用 JavaScript 关键字”，多了“只能用可以用在 URL 编码中的字符”。后者比较难懂，但是只要你只用字母和数字命名，就完全没有问题了。&lt;值&gt;的要求也是“只能用可以用在 URL 编码中的字符”。</p><p>每个 Cookie 都有失效日期，一旦电脑的时钟过了失效日期，这个 Cookie 就会被删掉。我们不能直接删掉一个 Cookie，但是可以用设定失效日期早于现在时刻的方法来间接删掉它。</p><p>每个网页，或者说每个站点，都有它自己的 Cookies，这些 Cookies 只能由这个站点下的网页来访问，来自其他站点或同一站点下未经授权的区域的网页，是不能访问的。每一“组”Cookies 有规定的总大小（大约 2KB 每“组”），一超过最大总大小，则最早失效的 Cookie 先被删除，来让新的 Cookie“安家”。</p><p>现在我们来学习使用 document.cookie 属性。</p><p>如果直接使用 document.cookie 属性，或者说，用某种方法，例如给变量赋值，来获得 document.cookie 的值，我们就可以知道在现在的文档中有多少个 Cookies，每个 Cookies 的名字，和它的值。例如，在某文档中添加“document.write(document.cookie)”，结果显示：</p><p>name=kevin; email=kevin@kevin.com; lastvisited=index.html</p><p>这意味着，文档包含 3 个 Cookies：name, email 和 lastvisited，它们的值分别是 kevin, kevin@kevin.com 和 index.html。可以看到，两个 Cookies 之间是用分号和空格隔开的，于是我们可以用 cookieString.split(‘; ‘) 方法得到每个 Cookie 分开的一个数组（先用 var cookieString = document.cookie）。</p><p>设定一个 Cookie 的方法是对 document.cookie 赋值。与其它情况下的赋值不同，向 document.cookie 赋值不会删除掉原有的 Cookies，而只会增添 Cookies 或更改原有 Cookie。赋值的格式：</p><p>document.cookie = ‘cookieName=’ + escape(‘cookieValue’)</p><p>+ ‘;expires=’ + expirationDateObj.toGMTString();</p><p>是不是看到头晕了呢？以上不是粗体字的地方是要照抄不误的，粗体字是要按实际情况做出改动的。cookieName 表示 Cookie 的名称，cookieValue 表示 Cookie 的值，expirationDateObj 表示储存着失效日期的日期对象名，如果不需要指定失效日期，则不需要第二行。不指定失效日期，则浏览器默认是在关闭浏览器（也就是关闭所有窗口）之后过期。</p><p>看到了上面的一些下划线了么？这些是应该注意的地方。</p><p>首先 escape() 方法：为什么一定要用？因为 Cookie 的值的要求是“只能用可以用在 URL 编码中的字符”。我们知道“escape()”方法是把字符串按 URL 编码方法来编码的，那我们只需要用一个“escape()”方法来处理输出到 Cookie 的值，用“unescape()”来处理从 Cookie 接收过来的值就万无一失了。而且这两个方法的最常用途就是处理 Cookies。其实设定一个 Cookie 只是“document.cookie = ‘cookieName=cookieValue’”这么简单，但是为了避免在 cookieValue 中出现 URL 里不准出现的字符，还是用一个 escape() 好。</p><p>然后“expires”前面的分号：注意到就行了。是分号而不是其他。</p><p>最后 toGMTString() 方法：设定 Cookie 的时效日期都是用 GMT 格式的时间的，其它格式的时间是没有作用的。</p><p>现在我们来实战一下。设定一个“name=rose”的 Cookie，在 3 个月后过期。</p><p>var expires = new Date();</p><p>expires.setTime(expires.getTime() + 3 * 30 * 24 * 60 * 60 * 1000);</p><p>/*   三个月 x 一个月当作 30 天 x 一天 24 小时</p><p>x 一小时 60 分 x 一分 60 秒 x 一秒 1000 毫秒 */</p><p>document.cookie = ‘name=rose;expires=’ + expires.toGMTString();</p><p>为什么没有用 escape() 方法？这是因为我们知道 rose 是一个合法的 URL 编码字符串，也就是说，’rose’ == escape(‘rose’)。一般来说，如果设定 Cookie 时不用 escape()，那获取 Cookie 时也不用 unescape()。</p><p>再来一次：编写一个函数，作用是查找指定 Cookie 的值。</p><p>function getCookie(cookieName) {</p><p>var cookieString = document.cookie;</p><p>var start = cookieString.indexOf(cookieName + ‘=’);</p><p>// 加上等号的原因是避免在某些 Cookie 的值里有</p><p>// 与 cookieName 一样的字符串。</p><p>if (start == -1) // 找不到</p><p>return null;</p><p>start += cookieName.length + 1;</p><p>var end = cookieString.indexOf(‘;’, start);</p><p>if (end == -1) return unescape(cookieString.substring(start));</p><p>return unescape(cookieString.substring(start, end));</p><p>}</p><p>这个函数用到了字符串对象的一些方法，如果你不记得了（你是不是这般没记性啊），请快去查查。这个函数所有的 if 语句都没有带上 else，这是因为如果条件成立，程序运行的都是 return 语句，在函数里碰上 return，就会终止运行，所以不加 else 也没问题。该函数在找到 Cookie 时，就会返回 Cookie 的值，否则返回“null”。</p><p>现在我们要删除刚才设定的 name=rose Cookie。</p><p>var expires = new Date();</p><p>expires.setTime(expires.getTime() – 1);</p><p>document.cookie = ‘name=rose;expires=’ + expires.toGMTString();</p><p>可以看到，只需要把失效日期改成比现在日期早一点（这里是早 1 毫秒），再用同样的方法设定 Cookie，就可以删掉 Cookie 了。</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' 无间隙文字向上滚动 ',
            describe:'无间隙文字向上滚动',
            author:"古歌",
            time:"2010-04-19",
            flow:18484,
            comments:[],
            enjoy:0,
            id:"6129.html",
            content:'<p>&lt;style type=”text/css”&gt;</p><p>#rollText{font:12px;}</p><p>&lt;/style&gt;</p><p>&lt;div id=”rollAD” style=”height:40px; position:relative; overflow:hidden;”&gt;</p><p>&lt;div id=”rollText” style=”font-size:12px;line-height:20px;”&gt;</p><p>&lt;ul&gt;</p><p>&lt;li&gt;&lt;a href=””&gt;◇ 无间隙文字向上滚动&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li&gt;&lt;a href=””&gt;◇ 无间隙文字向上滚动&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li&gt;&lt;a href=””&gt;◇ 无间隙文字向上滚动&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li&gt;&lt;a href=””&gt;◇ 无间隙文字向上滚动&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li&gt;&lt;a href=””&gt;◇ 无间隙文字向上滚动&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li&gt;&lt;a href=””&gt;◇ 无间隙文字向上滚动&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li&gt;&lt;a href=””&gt;◇ 无间隙文字向上滚动&lt;/a&gt;&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>&lt;/div&gt;</p><p>&lt;/div&gt;</p><p>&lt;script type=”text/javascript”&gt;</p><p>var textDiv = document.getElementById(“rollText”);</p><p>var textList = textDiv.getElementsByTagName(“a”);</p><p>if(textList.length &gt; 2){</p><p>var textDat = textDiv.innerHTML;</p><p>var br = textDat.toLowerCase().indexOf(“&lt;li”,textDat.toLowerCase().indexOf(“&lt;li”)+3);</p><p>textDiv.innerHTML = textDat+textDat+textDat.substr(0,br);</p><p>textDiv.style.cssText = “position:absolute; top:0”;</p><p>var textDatH = textDiv.offsetHeight;MaxRoll();</p><p>}</p><p>var minTime,maxTime,divTop,newTop=0;</p><p>function MinRoll(){</p><p>newTop++;</p><p>if(newTop&lt;=divTop+40){</p><p>textDiv.style.top = “-” + newTop + “px”;</p><p>}else{</p><p>clearInterval(minTime);</p><p>maxTime = setTimeout(MaxRoll,5000);</p><p>}</p><p>}</p><p>function MaxRoll(){</p><p>divTop = Math.abs(parseInt(textDiv.style.top));</p><p>if(divTop&gt;=0 &amp;&amp; divTop&lt;textDatH-40){</p><p>minTime = setInterval(MinRoll,1);</p><p>}else{</p><p>textDiv.style.top = 0;divTop = 0;newTop=0;MaxRoll();</p><p>}</p><p>}</p><p>&lt;/script&gt;</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'  定时关闭div的显示',
            describe:'function show(){var d = document.getElementById("indexBanner");var p = d.parentNode;p.removeChild(d);}setTimeout(show,70...',
            author:"古歌",
            time:"2010-04-19",
            flow:12683,
            comments:[],
            enjoy:1,
            id:"6130.html",
            content:'<div class="asb asb-post asb-post-01"></div>			<p>&lt;script language=”javas</p><div>cript”&gt;<br>function show(){var d =  document.getElementById(“indexBanner”);var p =  d.parentNode;p.removeChild(d);}setTimeout(show,7000);<br>&lt;/script&gt;</div>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript",  
            tag:"HTML/CSS",
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'js小技巧集合',
            describe:'# 事件源对象 event.srcElement.tagName event.srcElement.type # 捕获释放 event.srcElement.setCapture(); event.srcElement.relea...',
            author:"古歌",
            time:"2010-04-19",
            flow:12373,
            comments:[],
            enjoy:0,
            id:"6131.html",
            // eslint-disable-next-line no-useless-escape
            content:'			<p># 事件源对象</p><p>event.srcElement.tagName</p><p>event.srcElement.type</p><p># 捕获释放</p><p>event.srcElement.setCapture();</p><p>event.srcElement.releaseCapture();</p><p># 事件按键</p><p>event.keyCode</p><p>event.shiftKey</p><p>event.altKey</p><p>event.ctrlKey</p><p># 事件返回值</p><p>event.returnValue</p><p># 鼠标位置</p><p>event.x</p><p>event.y</p><p># 窗体活动元素</p><p>document.activeElement</p><p># 绑定事件</p><p>document.captureEvents(Event.KEYDOWN);</p><p># 访问窗体元素</p><p>document.all(“txt”).focus();</p><p>document.all(“txt”).select();</p><p># 窗体命令</p><p>document.execCommand</p><p># 窗体 COOKIE</p><p>document.cookie</p><p># 菜单事件</p><p>document.oncontextmenu</p><p># 创建元素</p><p>document.createElement(“SPAN”);</p><p># 根据鼠标获得元素：</p><p>document.elementFromPoint(event.x,event.y).tagName==”TD</p><p>document.elementFromPoint(event.x,event.y).appendChild(ms)</p><p># 窗体图片</p><p>document.images[索引]</p><p># 窗体事件绑定</p><p>document.onmousedown=scrollwindow;</p><p># 元素</p><p>document.窗体.elements[索引]</p><p># 对象绑定事件</p><p>document.all.xxx.detachEvent(‘onclick’,a);</p><p># 插件数目</p><p>navigator.plugins</p><p># 取变量类型</p><p>typeof($js_libpath) == “undefined”</p><p># 下拉框</p><p>下拉框.options[索引]</p><p>下拉框.options.length</p><p># 查找对象</p><p>document.getElementsByName(“r1”);</p><p>document.getElementById(id);</p><p># 定时</p><p>timer=setInterval(‘scrollwindow()’,delay);</p><p>clearInterval(timer);</p><p># UNCODE编码</p><p>escape() ,unescape</p><p># 父对象</p><p>obj.parentElement(dhtml)</p><p>obj.parentNode(dom)</p><p># 交换表的行</p><p>TableID.moveRow(2,1)</p><p># 替换CSS</p><p>document.all.csss.href = “a.css”;</p><p># 并排显示</p><p>display:inline</p><p># 隐藏焦点</p><p>hidefocus=true</p><p># 根据宽度换行</p><p>style=”word-break:break-all”</p><p># 自动刷新</p><p>&lt;meta HTTP-EQUIV=”refresh” CONTENT=”8;URL=http://c98.yeah.net”&gt;</p><p># 简单邮件</p><p>&lt;a href=”mailto:aaa@bbb.com?subject=ccc&amp;body=xxxyyy”&gt;</p><p># 快速转到位置</p><p>obj.scrollIntoView(true)</p><p># 锚</p><p>&lt;a name=”first”&gt;</p><p>&lt;a href=”#first”&gt;anchors&lt;/a&gt;</p><p># 网页传递参数</p><p>location.search();</p><p># 可编辑</p><p>obj.contenteditable=true</p><p># 执行菜单命令</p><p>obj.execCommand</p><p># 双字节字符</p><p>/[^\x00-\xff]/</p><p>汉字</p><p>/[\u4e00-\u9fa5]/</p><p># 让英文字符串超出表格宽度自动换行</p><p>word-wrap: break-word; word-break: break-all;</p><p># 透明背景</p><p>&lt;IFRAME src=”1.htm” width=300 height=180 allowtransparency&gt;&lt;/iframe&gt;</p><p># 获得style内容</p><p>obj.style.cssText</p><p># HTML标签</p><p>document.documentElement.innerHTML</p><p># 第一个style标签</p><p>document.styleSheets[0]</p><p># style标签里的第一个样式</p><p>document.styleSheets[0].rules[0]</p><p># 防止点击空链接时，页面往往重置到页首端。</p><p>&lt;a href=”javascrīpt:function()”&gt;word&lt;/a&gt;</p><p># 上一网页源</p><p>asp:</p><p>request.servervariables(“HTTP_REFERER”)</p><p>javascrīpt:</p><p>document.referrer</p><p># 释放内存</p><p>CollectGarbage();</p><p># 禁止右键</p><p>document.oncontextmenu = function() { return false;}</p><p># 禁止保存</p><p>&lt;noscrīpt&gt;&lt;iframe src=”*.htm”&gt;&lt;/iframe&gt;&lt;/noscrīpt&gt;</p><p># 禁止选取&lt;body oncontextmenu=”return false” ondragstart=”return false” onselectstart =”return false” onselect=”document.selection.empty()” oncopy=”document.selection.empty()” onbeforecopy=”return false”onmouseup=”document.selection.empty()&gt;</p><p># 禁止粘贴</p><p>&lt;input type=text ōnpaste=”return false”&gt;</p><p># 地址栏图标</p><p>&lt;link rel=”Shortcut Icon” href=”favicon.ico”&gt;</p><p>favicon.ico 名字最好不变16*16的16色,放虚拟目录根目录下</p><p># 收藏栏图标</p><p>&lt;link rel=”Bookmark” href=”favicon.ico”&gt;</p><p># 查看源码</p><p>&lt;input type=button value=查看网页源代码 ōnclick=”window.location = ‘view-source:’+ ‘http://www.csdn.net/"”&gt;</p><p># 关闭输入法</p><p>&lt;input style=”ime-mode:disabled”&gt;</p><p># 自动全选</p><p>&lt;input type=text name=text1 value=”123″ ōnfocus=”this.select()”&gt;</p><p># ENTER键可以让光标移到下一个输入框</p><p>&lt;input ōnkeydown=”if(event.keyCode==13)event.keyCode=9″&gt;</p><p># 文本框的默认值</p><p>&lt;input type=text value=”123″ ōnfocus=”alert(this.defaultValue)”&gt;</p><p># title 换行</p><p>obj.title = “123&amp;#13sdfs&amp;#32”</p><p># 获得时间所代表的微秒</p><p>var n1 = new Date(“2004-10-10”.replace(/-/g, “\/”)).getTime()</p><p># 窗口是否关闭</p><p>win.closed</p><p># checkbox扁平</p><p>&lt;input type=checkbox style=”position: absolute; clip:rect(5px 15px 15px 5px)”&gt;&lt;br&gt;</p><p># 获取选中内容</p><p>document.selection.createRange().duplicate().text</p><p># 自动完成功能</p><p>&lt;input type=text autocomplete=on&gt;打开该功能</p><p>&lt;input type=text autocomplete=off&gt;关闭该功能</p><p># 窗口最大化</p><p>&lt;body ōnload=”window.resizeTo(window.screen.width – 4,window.screen.height-50);window.moveTo(-4,-4)”&gt;</p><p># 无关闭按钮IE</p><p>window.open(“aa.htm”, “meizz”, “fullscreen=7”);</p><p># 统一编码/解码</p><p>alert(decodeURIComponent(encodeURIComponent(“http:// 你好.com?as= hehe”)))</p><p>encodeURIComponent对”:”、”/”、”;” 和 “?”也编码</p><p># 表格行指示</p><p>&lt;tr ōnmouseover=”this.bgColor=’#f0f0f0′” ōnmouseout=”this.bgColor=’#ffffff"”&gt;</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'鼠标触发弹出层，移出隐藏！（兼容主流） ',
            describe:'鼠标触发弹出层，移出隐藏！（兼容主流）',
            author:"古歌",
            time:"2010-04-19",
            flow:18286,
            comments:[],
            enjoy:0,
            id:"6132.html",
            content:'<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd”&gt;</p><p>&lt;html xmlns=”http://www.w3.org/1999/xhtml”&gt;</p><p>&lt;meta http-equiv=”Content-Type” content=”text/html; charset=utf-8″ /&gt;</p><p>&lt;title&gt; 鼠标触发弹出层，移出隐藏！&lt;/title&gt;</p><p>&lt;head&gt;</p><p>&lt;style type=”text/css”&gt;</p><p>dl,dt,dd{margin:0;padding:0;}</p><p>#menu{cursor:pointer;height:30px;width:200px;border:1px solid #ccc;background:#dedede;font-size:12px;}</p><p>#menu dt a{line-height:30px;text-align:center;display:block;color:#333;text-decoration:none;}</p><p>#menu dt a:hover{color:#C00;text-decoration:underline;}</p><p>#menu2{display:none;position:absolute;width:200px;border:1px solid #ccc;background:#f1f1f1;margin-left:-1px;}</p><p>#menu2 a{display:block;height:25px;text-align:center;line-height:25px;background:url(../images/icon01.png) no-repeat 7px 8px;border-bottom:#B4C9C6 1px dashed;color:#191919;}</p><p>#menu2 a:hover{color:#F00;text-decoration:underline;background:#0067A3;color:#FFF;}</p><p>&lt;/style&gt;</p><p>&lt;script type=”text/javas</p><p>cript”&gt;</p><p>function handleScroll(){</p><p>document.getElementById(“menu”).style.top = (document.body.offsetHeight*0.87 + document.body.scrollTop) +”px”;</p><p>}</p><p>function pop(){</p><p>var toogle = document.getElementById(“menu2”);</p><p>if(toogle.style.display == “” || toogle.style.display == “none”){</p><p>toogle.style.display = “block”;</p><p>}else{</p><p>toogle.style.display = “none”;</p><p>}</p><p>}</p><p>function init(){</p><p>document.body.onscroll=”handleScroll()”;</p><p>document.body.onload=”handleScroll()”;</p><p>document.getElementById(“menu”).onmouseover=pop;</p><p>document.getElementById(“menu”).onmouseout=pop;</p><p>}</p><p>window.onload=init;</p><p>&lt;/script&gt;</p><p>&lt;/head&gt;</p><p>&lt;body&gt;</p><p>&lt;div id=”menu”&gt;</p><p>&lt;dl&gt;</p><p>&lt;dt&gt;&lt;a href=”#”&gt;鼠标触发弹出层，移出隐藏！&lt;/a&gt;&lt;/dt&gt;</p><p>&lt;dd id=”menu2″&gt;</p><p>&lt;a href=”#”&gt;弹出层&lt;/a&gt;</p><p>&lt;a href=”#”&gt;弹出层&lt;/a&gt;</p><p>&lt;a href=”#”&gt;弹出层&lt;/a&gt;</p><p>&lt;a href=”#”&gt;弹出层&lt;/a&gt;</p><p>&lt;/dd&gt;</p><p>&lt;/dl&gt;</p><p>&lt;/div&gt;</p><p>&lt;/body&gt;</p><p>&lt;/html&gt;</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'一个js选项卡 ',
            describe:'active{float:left;background:url(../images/join/1.jpg) no-repeat right top;display:block;width:110px;height:32px;line-h...',
            author:"古歌",
            time:"2010-04-19",
            flow:18173,
            comments:[],
            enjoy:0,
            id:"6133.html",
            content:'<p>.active{float:left;background:url(../images/join/1.jpg) no-repeat right top;display:block;width:110px;height:32px;line-height:32px;font-size:14px;color:#FFF;text-align:center;font-weight:bold;letter-spacing:2px;text-decoration:none;cursor:pointer;}</p><p>.normal{float:left;display:block;width:110px;height:22px;padding-top:10px;font-size:14px;color:#060;text-align:center;font-weight:bold;letter-spacing:1px;cursor:pointer;}</p><p>.none{display:none;}</p><p>&lt;ul id=”T”&gt;</p><p>&lt;li onclick=”joinTT(this,0);”&gt;00000000000&lt;/li&gt;</p><p>&lt;li onclick=”joinTT(this,1);”&gt;11111111111&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>&lt;div id=”T_T_0″&gt;00000000000&lt;/div&gt;</p><p>&lt;div id=”T_T_1″&gt;11111111111&lt;/div&gt;</p><p>function joinTT(thisObj,Num){</p><p>if(thisObj.className == “active”)return;</p><p>var tabObj = thisObj.parentNode.id;</p><p>var tabList = document.getElementById(tabObj).getElementsByTagName(“li”);</p><p>for(i=0; i &lt;tabList.length; i++)</p><p>{</p><p>if (i == Num)</p><p>{</p><p>thisObj.className = “active”;</p><p>document.getElementById(tabObj+”_T_”+i).style.display = “block”;</p><p>}else{</p><p>tabList[i].className = “normal”;</p><p>document.getElementById(tabObj+”_T_”+i).style.display = “none”;</p><p>}</p><p>}</p><p>}</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:' 悟透JavaScript',
            describe:'你看，数据代码间的关系与物质能量间的关系有着惊人的相似。数据也是有惯性的，如果没有代码来施加外力，她总保持自己原来的状态。而代码就象能量， 他存在的唯一目的，就是要努力改变数据原来的状态。在代码改变数据的同时，也会因为数据的抗拒而反过来影响...',
            author:"古歌",
            time:"2010-04-19",
            flow:14314,
            comments:[],
            enjoy:0,
            id:"6134.html",
            // eslint-disable-next-line no-useless-escape
            content:'			<p>这是我看到的最牛的技术教程，不得不转，原文忘了。改日再加。</p><p>引子</p><p>编程世界里只存在两种基本元素，一个是数据，一个是代码。编程世界就是在数据和代码千丝万缕的纠缠中呈现出无限的生机和活力。</p><p>数据天生就是文静的，总想保持自己固有的本色；而代码却天生活泼，总想改变这个世界。</p><p>你看，数据代码间的关系与物质能量间的关系有着惊人的相似。数据也是有惯性的，如果没有代码来施加外力，她总保持自己原来的状态。而代码就象能量， 他存在的唯一目的，就是要努力改变数据原来的状态。在代码改变数据的同时，也会因为数据的抗拒而反过来影响或改变代码原有的趋势。甚至在某些情况下，数据 可以转变为代码，而代码却又有可能被转变为数据，或许还存在一个类似E=MC2形式的数码转换方程呢。然而，就是在数据和代码间这种即矛盾又统一的运转 中，总能体现出计算机世界的规律，这些规律正是我们编写的程序逻辑。</p><p>不过，由于不同程序员有着不同的世界观，这些数据和代码看起来也就不尽相同。于是，不同世界观的程序员们运用各自的方法论，推动着编程世界的进化和发展。</p><p>众所周知，当今最流行的编程思想莫过于面向对象编程的思想。为什么面向对象的思想能迅速风靡编程世界呢？因为面向对象的思想首次把数据和代码结合成 统一体，并以一个简单的对象概念呈现给编程者。这一下子就将原来那些杂乱的算法与子程序，以及纠缠不清的复杂数据结构，划分成清晰而有序的对象结构，从而 理清了数据与代码在我们心中那团乱麻般的结。我们又可以有一个更清晰的思维，在另一个思想高度上去探索更加浩瀚的编程世界了。</p><p>在五祖弘忍讲授完《对象真经》之后的一天，他对众弟子们说：“经已讲完，想必尔等应该有所感悟，请各自写个偈子来看”。大弟子神秀是被大家公认为悟 性最高的师兄，他的偈子写道：“身是对象树，心如类般明。朝朝勤拂拭，莫让惹尘埃！”。此偈一出，立即引起师兄弟们的轰动，大家都说写得太好了。只有火头 僧慧能看后，轻轻地叹了口气，又随手在墙上写道：“对象本无根，类型亦无形。本来无一物，何处惹尘埃？”。然后摇了摇头，扬长而去。大家看了慧能的偈子都 说：“写的什么乱七八糟的啊，看不懂”。师父弘忍看了神秀的诗偈也点头称赞，再看慧能的诗偈之后默然摇头。就在当天夜里，弘忍却悄悄把慧能叫到自己的禅 房，将珍藏多年的软件真经传授于他，然后让他趁着月色连夜逃走…</p><p>后来，慧能果然不负师父厚望，在南方开创了禅宗另一个广阔的天空。而慧能当年带走的软件真经中就有一本是《JavaScript真经》！</p><p>回归简单</p><p>要理解JavaScript，你得首先放下对象和类的概念，回到数据和代码的本原。前面说过，编程世界只有数据和代码两种基本元素，而这两种元素又有着纠缠不清的关系。JavaScript就是把数据和代码都简化到最原始的程度。</p><p>JavaScript中的数据很简洁的。简单数据只有 undefined, null, boolean, number和string这五种，而复杂数据只有一种，即object。这就好比中国古典的朴素唯物思想，把世界最基本的元素归为金木水火土，其他复杂 的物质都是由这五种基本元素组成。</p><p>JavaScript中的代码只体现为一种形式，就是function。</p><p>注意：以上单词都是小写的，不要和Number, String, Object, Function等JavaScript 内置函数混淆了。要知道，JavaScript语言是区分大小写的呀!</p><p>任何一个JavaScript的标识、常量、变量和参数都只是unfined, null, bool, number, string, object 和 function类型中的一种，也就typeof返回值表明的类型。除此之外没有其他类型了。</p><p>先说说简单数据类型吧。</p><p>* undefined：</p><p>代表一切未知的事物，啥都没有，无法想象，代码也就更无法去处理了。</p><p>注意：typeof(undefined) 返回也是 undefined。可以将undefined赋值给任何变量或属性，但并不意味了清除了该变量，反而会因此多了一个属性。</p><p>* null：</p><p>有那么一个概念，但没有东西。无中似有，有中还无。虽难以想象，但已经可以用代码来处理了。</p><p>注意：typeof(null)返回 object，但null并非object，具有null值的变量也并非object。</p><p>* boolean：</p><p>是就是，非就非，没有疑义。对就对，错就错，绝对明确。既能被代码处理，也可以控制代码的流程。</p><p>* number：</p><p>线性的事物，大小和次序分明，多而不乱。便于代码进行批量处理，也控制代码的迭代和循环等。</p><p>注意：typeof(NaN)和 typeof(Infinity)都返回number 。NaN参与任何数值计算的结构都是NaN，而且 NaN != NaN 。Infinity / Infinity = NaN 。</p><p>* string：</p><p>面向人类的理性事物，而不是机器信号。人机信息沟通，代码据此理解人的意图等等，都靠它了。</p><p>简单类型都不是对象，JavaScript没有将对象化的能力赋予这些简单类型。直接被赋予简单类型常量值的标识符、变量和参数都不是一个对象。</p><p>所谓“对象化”，就是可以将数据和代码组织成复杂结构的能力。JavaScript中只有object类型和function类型提供了对象化的能力。</p><p>没有类</p><p>object就是对象的类型。在JavaScript中不管多么复杂的数据和代码，都可以组织成 object形式的对象。</p><p>但JavaScript却没有 “类”的概念！对于许多面向对象的程序员来说，这恐怕是JavaScript 中最难以理解的地方。是啊，几乎任何讲面向对象的书中，第一个要讲的就是 “类”的概念，这可是面向对象的支柱。这突然没有了“类”，我们就象一下子没了精神支柱，感到六神无主。看来，要放下对象和类，达到“对象本无根，类型亦 无形”的境界确实是件不容易的事情啊。</p><p>这样，我们先来看一段JavaScript程序：</p><p>var life = {};</p><p>for(life.age = 1; life.age &lt;= 3; life.age++)</p><p>{</p><p>switch(life.age)</p><p>{</p><p>case 1: life.body = “卵细胞”;</p><p>life.say = function(){alert(this.age+this.body)};</p><p>break;</p><p>case 2: life.tail = “尾巴”;</p><p>life.gill = “腮”;</p><p>life.body = “蝌蚪”;</p><p>life.say = function(){alert(this.age+this.body+”-“+this.tail+”,”+this.gill)};</p><p>break;</p><p>case 3: delete life.tail;</p><p>delete life.gill;</p><p>life.legs = “四条腿”;</p><p>life.lung = “肺”;</p><p>life.body = “青蛙”;</p><p>life.say = function(){alert(this.age+this.body+”-“+this.legs+”,”+this.lung)};</p><p>break;</p><p>};</p><p>life.say();</p><p>};</p><p>这段JavaScript 程序一开始产生了一个生命对象life，life诞生时只是一个光溜溜的对象，没有任何属性和方法。在第一次生命过程中， 它有了一个身体属性body，并有了一个say方法，看起来是一个“卵细胞”。在第二次生命过程中，它又长出了“尾巴”和“腮”，有了tail和gill 属性，显然它是一个“蝌蚪”。在第三次生命过程中，它的tail和gill属性消失了，但又长出了“四条腿”和“肺”，有了legs和lung属性，从而 最终变成了“青蛙”。如果，你的想像力丰富的话，或许还能让它变成英俊的“王子”，娶个美丽的“公主”什么的。不过，在看完这段程序之后，请你思考一个问 题：</p><p>我们一定需要类吗？</p><p>还记得儿时那个“小蝌蚪找妈妈”的童话吗？也许就在昨天晚，你的孩子刚好是在这个美丽的童话中进入梦乡的吧。可爱的小蝌蚪也就是在其自身类型不断演 化过程中，逐渐变成了和妈妈一样的“类”，从而找到了自己的妈妈。这个童话故事中蕴含的编程哲理就是：对象的“类”是从无到有，又不断演化，最终又消失于 无形之中的…</p><p>“类”，的确可以帮助我们理解复杂的现实世界，这纷乱的现实世界也的确需要进行分类。但如果我们的思想被“类”束缚住了，“类”也就变成了“累”。 想象一下，如果一个生命对象开始的时就被规定了固定的“类”，那么它还能演化吗？蝌蚪还能变成青蛙吗？还可以给孩子们讲小蝌蚪找妈妈的故事吗？</p><p>所以，JavaScript中没有“类”，类已化于无形，与对象融为一体。正是由于放下了“类”这个概念，JavaScript的对象才有了其他编程语言所没有的活力。</p><p>如果，此时你的内心深处开始有所感悟，那么你已经逐渐开始理解JavaScript的禅机了。</p><p>函数的魔力</p><p>接下来，我们再讨论一下JavaScript 函数的魔力吧。</p><p>JavaScript的代码就只有function一种形式，function就是函数的类型。也许其他编程语言还有procedure或 method等代码概念，但在JavaScript里只有function一种形式。当我们写下一个函数的时候，只不过是建立了一个function类型 的实体而已。请看下面的程序：</p><p>function myfunc()</p><p>{</p><p>alert(“hello”);</p><p>};</p><p>alert(typeof(myfunc));</p><p>这个代码运行之后可以看到typeof(myfunc)返回的是function。以上的函数写法我们称之为“定义式”的，如果我们将其改写成下面的“变量式”的，就更容易理解了：</p><p>var myfunc = function ()</p><p>{</p><p>alert(“hello”);</p><p>};</p><p>alert(typeof(myfunc));</p><p>这里明确定义了一个变量myfunc，它的初始值被赋予了一个function的实体。因此，typeof(myfunc)返回的也是 function。其实，这两种函数的写法是等价的，除了一点细微差别，其内部实现完全相同。也就是说，我们写的这些JavaScript函数只是一个命 了名的变量而已，其变量类型即为function，变量的值就是我们编写的函数代码体。</p><p>聪明的你或许立即会进一步的追问：既然函数只是变量，那么变量就可以被随意赋值并用到任意地方啰？</p><p>我们来看看下面的代码：</p><p>var myfunc = function ()</p><p>{</p><p>alert(“hello”);</p><p>};</p><p>myfunc(); //第一次调用myfunc，输出hello</p><p>myfunc = function ()</p><p>{</p><p>alert(“yeah”);</p><p>};</p><p>myfunc(); //第二次调用myfunc，将输出yeah</p><p>这个程序运行的结果告诉我们：答案是肯定的！在第一次调用函数之后，函数变量又被赋予了新的函数代码体，使得第二次调用该函数时，出现了不同的输出。</p><p>好了，我们又来把上面的代码改成第一种定义式的函数形式：</p><p>function myfunc ()</p><p>{</p><p>alert(“hello”);</p><p>};</p><p>myfunc(); //这里调用myfunc，输出yeah而不是hello</p><p>function myfunc ()</p><p>{</p><p>alert(“yeah”);</p><p>};</p><p>myfunc(); //这里调用myfunc，当然输出yeah</p><p>按理说，两个签名完全相同的函数，在其他编程语言中应该是非法的。但在JavaScript 中，这没错。不过，程序运行之后却发现一个奇怪的现象：两次调用都只是最后那个函数里输出的值！显然第一个函数没有起到任何作用。这又是为什么呢？</p><p>原来，JavaScript执行引擎并非一行一行地分析和执行程序，而是一段一段地分析执行的。而且，在同一段程序的分析执行中，定义式的函数语句 会被提取出来优先执行。函数定义执行完之后，才会按顺序执行其他语句代码。也就是说，在第一次调用myfunc之前，第一个函数语句定义的代码逻辑，已被 第二个函数定义语句覆盖了。所以，两次都调用都是执行最后一个函数逻辑了。</p><p>如果把这个JavaScript代码分成两段，例如将它们写在一个html中，并用&lt;script/&gt;标签将其分成这样的两块：</p><p>&lt;script&gt;</p><p>function myfunc ()</p><p>{</p><p>alert(“hello”);</p><p>};</p><p>myfunc(); //这里调用myfunc，输出hello</p><p>&lt;/script&gt;</p><p>&lt;script&gt;</p><p>function myfunc ()</p><p>{</p><p>alert(“yeah”);</p><p>};</p><p>myfunc(); //这里调用myfunc，输出yeah</p><p>&lt;/script&gt;</p><p>这时，输出才是各自按顺序来的，也证明了JavaScript的确是一段段地执行的。</p><p>一段代码中的定义式函数语句会优先执行，这似乎有点象静态语言的编译概念。所以，这一特征也被有些人称为：JavaScript的“预编译”。</p><p>大多数情况下，我们也没有必要去纠缠这些细节问题。只要你记住一点：JavaScript里的代码也是一种数据，同样可以被任意赋值和修改的，而它的值就是代码的逻辑。只是，与一般数据不同的是，函数是可以被调用执行的。</p><p>不过，如果JavaScript函数仅仅只有这点道行的话，这与C++的函数指针，DELPHI的方法指针，C#的委托相比，又有啥稀奇嘛！然 而，JavaScript函数的神奇之处还体现在另外两个方面：一是函数function类型本身也具有对象化的能力，二是函数function与对象 object超然的结合能力。</p><p>奇妙的对象</p><p>先来说说函数的对象化能力。</p><p>任何一个函数都可以为其动态地添加或去除属性，这些属性可以是简单类型，可以是对象，也可以是其他函数。也就是说，函数具有对象的全部特征，你完全 可以把函数当对象来用。其实，函数就是对象，只不过比一般的对象多了一个括号“()”操作符，这个操作符用来执行函数的逻辑。即，函数本身还可以被调用， 一般对象却不可以被调用，除此之外完全相同。请看下面的代码：</p><p>function Sing()</p><p>{</p><p>with(arguments.callee)</p><p>alert(author + “：” + poem);</p><p>};</p><p>Sing.author = “李白”;</p><p>Sing.poem = “汉家秦地月，流影照明妃。一上玉关道，天涯去不归”;</p><p>Sing();</p><p>Sing.author = “李战”;</p><p>Sing.poem = “日出汉家天，月落阴山前。女儿琵琶怨，已唱三千年”;</p><p>Sing();</p><p>在这段代码中，Sing函数被定义后，又给Sing函数动态地增加了author和poem属性。将author和poem属性设为不同的作者和诗 句，在调用Sing()时就能显示出不同的结果。这个示例用一种诗情画意的方式，让我们理解了JavaScript函数就是对象的本质，也感受到了 JavaScript语言的优美。</p><p>好了，以上的讲述，我们应该算理解了function类型的东西都是和object类型一样的东西，这种东西被我们称为“对象”。我们的确可以这样去看待这些“对象”，因为它们既有“属性”也有“方法”嘛。但下面的代码又会让我们产生新的疑惑：</p><p>var anObject = {};  //一个对象</p><p>anObject.aProperty = “Property of object”;  //对象的一个属性</p><p>anObject.aMethod = function(){alert(“Method of object”)}; //对象的一个方法</p><p>//主要看下面：</p><p>alert(anObject[“aProperty”]);   //可以将对象当数组以属性名作为下标来访问属性</p><p>anObject[“aMethod”]();          //可以将对象当数组以方法名作为下标来调用方法</p><p>for( var s in anObject)           //遍历对象的所有属性和方法进行迭代化处理</p><p>alert(s + ” is a ” + typeof(anObject[s]));</p><p>同样对于function类型的对象也是一样：</p><p>var aFunction = function() {};  //一个函数</p><p>aFunction.aProperty = “Property of function”;  //函数的一个属性</p><p>aFunction.aMethod = function(){alert(“Method of function”)}; //函数的一个方法</p><p>//主要看下面：</p><p>alert(aFunction[“aProperty”]);   //可以将函数当数组以属性名作为下标来访问属性</p><p>aFunction[“aMethod”]();          //可以将函数当数组以方法名作为下标来调用方法</p><p>for( var s in aFunction)           //遍历函数的所有属性和方法进行迭代化处理</p><p>alert(s + ” is a ” + typeof(aFunction[s]));</p><p>是的，对象和函数可以象数组一样，用属性名或方法名作为下标来访问并处理。那么，它到底应该算是数组呢，还是算对象？</p><p>我们知道，数组应该算是线性数据结构，线性数据结构一般有一定的规律，适合进行统一的批量迭代操作等，有点像波。而对象是离散数据结构，适合描述分散的和个性化的东西，有点像粒子。因此，我们也可以这样问：JavaScript 里的对象到底是波还是粒子？</p><p>如果存在对象量子论，那么答案一定是：波粒二象性！</p><p>因此，JavaScript里的函数和对象既有对象的特征也有数组的特征。这里的数组被称为“字典”，一种可以任意伸缩的名称值对儿的集合。其实， object和function的内部实现就是一个字典结构，但这种字典结构却通过严谨而精巧的语法表现出了丰富的外观。正如量子力学在一些地方用粒子来 解释和处理问题，而在另一些地方却用波来解释和处理问题。你也可以在需要的时候，自由选择用对象还是数组来解释和处理问题。只要善于把握 JavaScript 的这些奇妙特性，就可以编写出很多简洁而强大的代码来。</p><p>放下对象</p><p>我们再来看看 function与object的超然结合吧。</p><p>在面向对象的编程世界里，数据与代码的有机结合就构成了对象的概念。自从有了对象，编程世界就被划分成两部分，一个是对象内的世界，一个是对象外的 世界。对象天生具有自私的一面，外面的世界未经允许是不可访问对象内部的。对象也有大方的一面，它对外提供属性和方法，也为他人服务。不过，在这里我们要 谈到一个有趣的问题，就是“对象的自我意识”。</p><p>什么？没听错吧？对象有自我意识？</p><p>可能对许多程序员来说，这的确是第一次听说。不过，请君看看C++、C#和Java的this，DELPHI的self，还有VB的me，或许你会恍然大悟！当然，也可能只是说句“不过如此”而已。</p><p>然而，就在对象将世界划分为内外两部分的同时，对象的“自我”也就随之产生。“自我意识”是生命的最基本特征！正是由于对象这种强大的生命力，才使得编程世界充满无限的生机和活力。</p><p>但对象的“自我意识”在带给我们快乐的同时也带来了痛苦和烦恼。我们给对象赋予了太多欲望，总希望它们能做更多的事情。然而，对象的自私使得它们互 相争抢系统资源，对象的自负让对象变得复杂和臃肿，对象的自欺也往往带来挥之不去的错误和异常。我们为什么会有这么多的痛苦和烦恼呢？</p><p>为此，有一个人，在对象树下，整整想了九九八十一天，终于悟出了生命的痛苦来自于欲望，但究其欲望的根源是来自于自我意识。于是他放下了“自我”， 在对象树下成了佛，从此他开始普度众生，传播真经。他的名字就叫释迦摩尼，而《JavaScript真经》正是他所传经书中的一本。</p><p>JavaScript 中也有this，但这个this却与C++、C#或Java等语言的this不同。一般编程语言的this就是对象自己，而 JavaScript 的this却并不一定！this可能是我，也可能是你，可能是他，反正是我中有你，你中有我，这就不能用原来的那个“自我”来理解 JavaScript 这个this的含义了。为此，我们必须首先放下原来对象的那个“自我”。</p><p>我们来看下面的代码：</p><p>function WhoAmI()       //定义一个函数WhoAmI</p><p>{</p><p>alert(“I’m ” + this.name + ” of ” + typeof(this));</p><p>};</p><p>WhoAmI();   //此时是this当前这段代码的全局对象，在浏览器中就是window对象，其name属性为空字符串。输出：I’m of object</p><p>var BillGates = {name: “Bill Gates”};</p><p>BillGates.WhoAmI = WhoAmI;  //将函数WhoAmI作为BillGates的方法。</p><p>BillGates.WhoAmI();         //此时的this是BillGates。输出：I’m Bill Gates of object</p><p>var SteveJobs = {name: “Steve Jobs”};</p><p>SteveJobs.WhoAmI = WhoAmI;  //将函数WhoAmI作为SteveJobs的方法。</p><p>SteveJobs.WhoAmI();         //此时的this是SteveJobs。输出：I’m Steve Jobs of object</p><p>WhoAmI.call(BillGates);     //直接将BillGates作为this，调用WhoAmI。输出：I’m Bill Gates of object</p><p>WhoAmI.call(SteveJobs);     //直接将SteveJobs作为this，调用WhoAmI。输出：I’m Steve Jobs of object</p><p>BillGates.WhoAmI.call(SteveJobs);   //将SteveJobs作为this，却调用BillGates的WhoAmI方法。输出：I’m Steve Jobs of object</p><p>SteveJobs.WhoAmI.call(BillGates);   //将BillGates作为this，却调用SteveJobs的WhoAmI方法。输出：I’m Bill Gates of object</p><p>WhoAmI.WhoAmI = WhoAmI;     //将WhoAmI函数设置为自身的方法。</p><p>WhoAmI.name = “WhoAmI”;</p><p>WhoAmI.WhoAmI();            //此时的this是WhoAmI函数自己。输出：I’m WhoAmI of function</p><p>({name: “nobody”, WhoAmI: WhoAmI}).WhoAmI();    //临时创建一个匿名对象并设置属性后调用WhoAmI方法。输出：I’m nobody of object</p><p>从上面的代码可以看出，同一个函数可以从不同的角度来调用，this并不一定是函数本身所属的对象。 this只是在任意对象和function元素结合时的一个概念，是种结合比起一般对象语言的默认结合更加灵活，显得更加超然和洒脱。</p><p>在JavaScript 函数中，你只能把this看成当前要服务的“这个”对象。this是一个特殊的内置参数，根据this参数，您可以访问到 “这个”对象的属性和方法，但却不能给this参数赋值。在一般对象语言中，方法体代码中的this可以省略的，成员默认都首先是“自己”的。但 JavaScript却不同，由于不存在“自我”，当访问“这个”对象时，this不可省略！</p><p>JavaScript 提供了传递this参数的多种形式和手段，其中，象BillGates.WhoAmI()和 SteveJobs.WhoAmI()这种形式，是传递this参数最正规的形式，此时的this就是函数所属的对象本身。而大多数情况下，我们也几乎很 少去采用那些借花仙佛的调用形式。但只我们要明白JavaScript的这个“自我”与其他编程语言的“自我”是不同的，这是一个放下了的 “自我”，这就 是JavaScript特有的世界观。</p><p>对象素描</p><p>已经说了许多了许多话题了，但有一个很基本的问题我们忘了讨论，那就是：怎样建立对象？</p><p>在前面的示例中，我们已经涉及到了对象的建立了。我们使用了一种被称为JavaScript Object Notation(缩写JSON)的形式，翻译为中文就是“JavaScript 对象表示法”。</p><p>JSON为创建对象提供了非常简单的方法。例如，</p><p>创建一个没有任何属性的对象：</p><p>var o = {};</p><p>创建一个对象并设置属性及初始值：</p><p>var person = {name: “Angel”, age: 18, married: false};</p><p>创建一个对象并设置属性和方法：</p><p>var speaker = {text: “Hello World”, say: function(){alert(this.text)}};</p><p>创建一个更复杂的对象，嵌套其他对象和对象数组等：</p><p>var company =</p><p>{</p><p>name: “Microsoft”,</p><p>product: “softwares”,</p><p>chairman: {name: “Bill Gates”, age: 53, Married: true},</p><p>employees: [{name: “Angel”, age: 26, Married: false}, {name: “Hanson”, age: 32, Marred: true}],</p><p>readme: function() {document.write(this.name + ” product ” + this.product);}</p><p>};</p><p>JSON的形式就是用大括“{}”号包括起来的项目列表，每一个项目间并用逗号“,”分隔，而项目就是用冒号“:”分隔的属性名和属性值。这是典型 的字典表示形式，也再次表明了 JavaScript里的对象就是字典结构。不管多么复杂的对象，都可以被一句JSON代码来创建并赋值。</p><p>其实，JSON就是JavaScript对象最好的序列化形式，它比XML更简洁也更省空间。对象可以作为一个JSON形式的字符串，在网络间自由 传递和交换信息。而当需要将这个JSON字符串变成一个JavaScript对象时，只需要使用eval函数这个强大的数码转换引擎，就立即能得到一个 JavaScript内存对象。正是由于JSON的这种简单朴素的天生丽质，才使得她在AJAX舞台上成为璀璨夺目的明星。</p><p>JavaScript就是这样，把面向对象那些看似复杂的东西，用及其简洁的形式表达出来。卸下对象浮华的浓妆，还对象一个眉目清晰！</p><p>构造对象</p><p>好了，接下我们来讨论一下对象的另一种创建方法。</p><p>除JSON外，在JavaScript中我们可以使用new操作符结合一个函数的形式来创建对象。例如：</p><p>function MyFunc() {};         //定义一个空函数</p><p>var anObj = new MyFunc();  //使用new操作符，借助MyFun函数，就创建了一个对象</p><p>JavaScript的这种创建对象的方式可真有意思，如何去理解这种写法呢？</p><p>其实，可以把上面的代码改写成这种等价形式：</p><p>function MyFunc(){};</p><p>var anObj = {};     //创建一个对象</p><p>MyFunc.call(anObj); //将anObj对象作为this指针调用MyFunc函数</p><p>我们就可以这样理解，JavaScript 先用new操作符创建了一个对象，紧接着就将这个对象作为this参数调用了后面的函数。其 实，JavaScript内部就是这么做的，而且任何函数都可以被这样调用！但从 “anObj = new MyFunc()” 这种形式，我们又看到一个熟悉的身影，C++和C#不就是这样创建对象的吗？原来，条条大路通灵山，殊途同归啊！</p><p>君看到此处也许会想，我们为什么不可以把这个MyFunc当作构造函数呢？恭喜你，答对了！JavaScript也是这么想的！请看下面的代码：</p><p>1     function Person(name)   //带参数的构造函数</p><p>2     {</p><p>3         this.name = name;   //将参数值赋给给this对象的属性</p><p>4         this.SayHello = function() {alert(“Hello, I’m ” + this.name);};   //给this对象定义一个SayHello方法。</p><p>5     };</p><p>6</p><p>7     function Employee(name, salary)     //子构造函数</p><p>8     {</p><p>9         Person.call(this, name);        //将this传给父构造函数</p><p>10         this.salary = salary;       //设置一个this的salary属性</p><p>11         this.ShowMeTheMoney = function() {alert(this.name + ” $” + this.salary);};  //添加ShowMeTheMoney方法。</p><p>12     };</p><p>13</p><p>14     var BillGates = new Person(“Bill Gates”);   //用Person构造函数创建BillGates对象</p><p>15     var SteveJobs = new Employee(“Steve Jobs”, 1234);   //用Empolyee构造函数创建SteveJobs对象</p><p>16</p><p>17     BillGates.SayHello();   //显示：I’m Bill Gates</p><p>18     SteveJobs.SayHello();   //显示：I’m Steve Jobs</p><p>19     SteveJobs.ShowMeTheMoney();   //显示：Steve Jobs $1234</p><p>20</p><p>21     alert(BillGates.constructor == Person);  //显示：true</p><p>22     alert(SteveJobs.constructor == Employee);  //显示：true</p><p>23</p><p>24     alert(BillGates.SayHello == SteveJobs.SayHello); //显示：false</p><p>这段代码表明，函数不但可以当作构造函数，而且还可以带参数，还可以为对象添加成员和方法。其中的第9行，Employee构造函数又将自己接收的 this作为参数调用Person构造函数，这就是相当于调用基类的构造函数。第21、22行还表明这样一个意思：BillGates是由Person构 造的，而SteveJobs是由Employee构造的。对象内置的constructor属性还指明了构造对象所用的具体函数！</p><p>其实，如果你愿意把函数当作“类”的话，她就是“类”，因为她本来就有“类”的那些特征。难道不是吗？她生出的儿子各个都有相同的特征，而且构造函数也与类同名嘛！</p><p>但要注意的是，用构造函数操作this对象创建出来的每一个对象，不但具有各自的成员数据，而且还具有各自的方法数据。换句话说，方法的代码体(体 现函数逻辑的数据)在每一个对象中都存在一个副本。尽管每一个代码副本的逻辑是相同的，但对象们确实是各自保存了一份代码体。上例中的最后一句说明了这一 实事，这也解释了JavaScript中的函数就是对象的概念。</p><p>同一类的对象各自有一份方法代码显然是一种浪费。在传统的对象语言中，方法函数并不象JavaScript那样是个对象概念。即使也有象函数指针、方法指针或委托那样的变化形式，但其实质也是对同一份代码的引用。一般的对象语言很难遇到这种情况。</p><p>不过，JavaScript语言有大的灵活性。我们可以先定义一份唯一的方法函数体，并在构造this对象时使用这唯一的函数对象作为其方法，就能共享方法逻辑。例如：</p><p>function SayHello()     //先定义一份SayHello函数代码</p><p>{</p><p>alert(“Hello, I’m ” + this.name);</p><p>};</p><p>function Person(name)   //带参数的构造函数</p><p>{</p><p>this.name = name;   //将参数值赋给给this对象的属性</p><p>this.SayHello = SayHello;   //给this对象SayHello方法赋值为前面那份SayHello代码。</p><p>};</p><p>var BillGates = new Person(“Bill Gates”);   //创建BillGates对象</p><p>var SteveJobs = new Person(“Steve Jobs”);   //创建SteveJobs对象</p><p>alert(BillGates.SayHello == SteveJobs.SayHello); //显示：true</p><p>其中，最后一行的输出结果表明两个对象确实共享了一个函数对象。虽然，这段程序达到了共享了一份方法代码的目的，但却不怎么优雅。因为，定义 SayHello方法时反映不出其与Person类的关系。“优雅”这个词用来形容代码，也不知道是谁先提出来的。不过，这个词反映了程序员已经从追求代 码的正确、高效、可靠和易读等基础上，向着追求代码的美观感觉和艺术境界的层次发展，程序人生又多了些浪漫色彩。</p><p>显然，JavaScript 早想到了这一问题，她的设计者们为此提供了一个有趣的prototype概念。</p><p>初看原型</p><p>prototype源自法语，软件界的标准翻译为“原型”，代表事物的初始形态，也含有模型和样板的意义。JavaScript中的 prototype概念恰如其分地反映了这个词的内含，我们不能将其理解为C++的prototype那种预先声明的概念。</p><p>JavaScript 的所有function类型的对象都有一个prototype属性。这个prototype属性本身又是一个object类型 的对象，因此我们也可以给这个prototype对象添加任意的属性和方法。既然prototype是对象的“原型”，那么由该函数构造出来的对象应该都 会具有这个“原型”的特性。事实上，在构造函数的prototype上定义的所有属性和方法，都是可以通过其构造的对象直接访问和调用的。也可以这么 说，prototype提供了一群同类对象共享属性和方法的机制。</p><p>我们先来看看下面的代码：</p><p>function Person(name)</p><p>{</p><p>this.name = name;   //设置对象属性，每个对象各自一份属性数据</p><p>};</p><p>Person.prototype.SayHello = function()  //给Person函数的prototype添加SayHello方法。</p><p>{</p><p>alert(“Hello, I’m ” + this.name);</p><p>}</p><p>var BillGates = new Person(“Bill Gates”);   //创建BillGates对象</p><p>var SteveJobs = new Person(“Steve Jobs”);   //创建SteveJobs对象</p><p>BillGates.SayHello();   //通过BillGates对象直接调用到SayHello方法</p><p>SteveJobs.SayHello();   //通过SteveJobs对象直接调用到SayHello方法</p><p>alert(BillGates.SayHello == SteveJobs.SayHello); //因为两个对象是共享prototype的SayHello，所以显示：true</p><p>程序运行的结果表明，构造函数的prototype上定义的方法确实可以通过对象直接调用到，而且代码是共享的。显然，把方法设置到prototype的写法显得优雅多了，尽管调用形式没有变，但逻辑上却体现了方法与类的关系，相对前面的写法，更容易理解和组织代码。</p><p>那么，对于多层次类型的构造函数情况又如何呢？</p><p>我们再来看下面的代码：</p><p>1     function Person(name)   //基类构造函数</p><p>2     {</p><p>3         this.name = name;</p><p>4     };</p><p>5</p><p>6     Person.prototype.SayHello = function()  //给基类构造函数的prototype添加方法</p><p>7     {</p><p>8         alert(“Hello, I’m ” + this.name);</p><p>9     };</p><p>10</p><p>11     function Employee(name, salary) //子类构造函数</p><p>12     {</p><p>13         Person.call(this, name);    //调用基类构造函数</p><p>14         this.salary = salary;</p><p>15     };</p><p>16</p><p>17     Employee.prototype = new Person();  //建一个基类的对象作为子类原型的原型，这里很有意思</p><p>18</p><p>19     Employee.prototype.ShowMeTheMoney = function()  //给子类添构造函数的prototype添加方法</p><p>20     {</p><p>21         alert(this.name + ” $” + this.salary);</p><p>22     };</p><p>23</p><p>24     var BillGates = new Person(“Bill Gates”);   //创建基类Person的BillGates对象</p><p>25     var SteveJobs = new Employee(“Steve Jobs”, 1234);   //创建子类Employee的SteveJobs对象</p><p>26</p><p>27     BillGates.SayHello();       //通过对象直接调用到prototype的方法</p><p>28     SteveJobs.SayHello();       //通过子类对象直接调用基类prototype的方法，关注！</p><p>29     SteveJobs.ShowMeTheMoney(); //通过子类对象直接调用子类prototype的方法</p><p>30</p><p>31     alert(BillGates.SayHello == SteveJobs.SayHello); //显示：true，表明prototype的方法是共享的</p><p>这段代码的第17行，构造了一个基类的对象，并将其设为子类构造函数的 prototype，这是很有意思的。这样做的目的就是为了第28行，通过子类对象也可以直接调用基类prototype的方法。为什么可以这样呢？</p><p>原来，在JavaScript中，prototype不但能让对象共享自己财富，而且prototype还有寻根问祖的天性，从而使得先辈们的遗产 可以代代相传。当从一个对象那里读取属性或调用方法时，如果该对象自身不存在这样的属性或方法，就会去自己关联的prototype对象那里寻找；如果 prototype没有，又会去prototype自己关联的前辈prototype那里寻找，直到找到或追溯过程结束为止。</p><p>在JavaScript 内部，对象的属性和方法追溯机制是通过所谓的prototype链来实现的。当用new操作符构造对象时，也会同时将构造函 数的prototype对象指派给新创建的对象，成为该对象内置的原型对象。对象内置的原型对象应该是对外不可见的，尽管有些浏览器(如Firefox) 可以让我们访问这个内置原型对象，但并不建议这样做。内置的原型对象本身也是对象，也有自己关联的原型对象，这样就形成了所谓的原型链。</p><p>在原型链的最末端，就是Object构造函数prototype属性指向的那一个原型对象。这个原型对象是所有对象的最老祖先，这个老祖宗实现了诸 如toString等所有对象天生就该具有的方法。其他内置构造函数，如Function, Boolean, String, Date和RegExp等的prototype都是从这个老祖宗传承下来的，但他们各自又定义了自身的属性和方法，从而他们的子孙就表现出各自宗族的那些 特征。</p><p>这不就是“继承”吗？是的，这就是“继承”，是JavaScript特有的“原型继承”。</p><p>“原型继承”是慈祥而又严厉的。原形对象将自己的属性和方法无私地贡献给孩子们使用，也并不强迫孩子们必须遵从，允许一些顽皮孩子按自己的兴趣和爱 好独立行事。从这点上看，原型对象是一位慈祥的母亲。然而，任何一个孩子虽然可以我行我素，但却不能动原型对象既有的财产，因为那可能会影响到其他孩子的 利益。从这一点上看，原型对象又象一位严厉的父亲。我们来看看下面的代码就可以理解这个意思了：</p><p>function Person(name)</p><p>{</p><p>this.name = name;</p><p>};</p><p>Person.prototype.company = “Microsoft”; //原型的属性</p><p>Person.prototype.SayHello = function()  //原型的方法</p><p>{</p><p>alert(“Hello, I’m ” + this.name + ” of ” + this.company);</p><p>};</p><p>var BillGates = new Person(“Bill Gates”);</p><p>BillGates.SayHello();   //由于继承了原型的东西，规规矩矩输出：Hello, I’m Bill Gates</p><p>var SteveJobs = new Person(“Steve Jobs”);</p><p>SteveJobs.company = “Apple”;    //设置自己的company属性，掩盖了原型的company属性</p><p>SteveJobs.SayHello = function() //实现了自己的SayHello方法，掩盖了原型的SayHello方法</p><p>{</p><p>alert(“Hi, ” + this.name + ” like ” + this.company + “, ha ha ha “);</p><p>};</p><p>SteveJobs.SayHello();   //都是自己覆盖的属性和方法，输出：Hi, Steve Jobs like Apple, ha ha ha</p><p>BillGates.SayHello();   //SteveJobs的覆盖没有影响原型对象，BillGates还是按老样子输出</p><p>对象可以掩盖原型对象的那些属性和方法，一个构造函数原型对象也可以掩盖上层构造函数原型对象既有的属性和方法。这种掩盖其实只是在对象自己身上创 建了新的属性和方法，只不过这些属性和方法与原型对象的那些同名而已。JavaScript就是用这简单的掩盖机制实现了对象的“多态”性，与静态对象语 言的虚函数和重载(override)概念不谋而合。</p><p>然而，比静态对象语言更神奇的是，我们可以随时给原型对象动态添加新的属性和方法，从而动态地扩展基类的功能特性。这在静态对象语言中是很难想象的。我们来看下面的代码：</p><p>function Person(name)</p><p>{</p><p>this.name = name;</p><p>};</p><p>Person.prototype.SayHello = function()  //建立对象前定义的方法</p><p>{</p><p>alert(“Hello, I’m ” + this.name);</p><p>};</p><p>var BillGates = new Person(“Bill Gates”);   //建立对象</p><p>BillGates.SayHello();</p><p>Person.prototype.Retire = function()    //建立对象后再动态扩展原型的方法</p><p>{</p><p>alert(“Poor ” + this.name + “, bye bye!”);</p><p>};</p><p>BillGates.Retire(); //动态扩展的方法即可被先前建立的对象立即调用</p><p>阿弥佗佛，原型继承竟然可以玩出有这样的法术！</p><p>原型扩展</p><p>想必君的悟性极高，可能你会这样想：如果在JavaScript 内置的那些如Object和Function等函数的prototype上添加些新的方法和属性，是不是就能扩展JavaScript的功能呢？</p><p>那么，恭喜你，你得到了！</p><p>在AJAX技术迅猛发展的今天，许多成功的AJAX项目的JavaScript 运行库都大量扩展了内置函数的prototype功能。比如微软的 ASP.NET AJAX，就给这些内置函数及其prototype添加了大量的新特性，从而增强了JavaScript的功能。</p><p>我们来看一段摘自MicrosoftAjax.debug.js中的代码：</p><p>String.prototype.trim = function String$trim() {</p><p>if (arguments.length !== 0) throw Error.parameterCount();</p><p>return this.replace(/^\s+|\s+$/g, ”);</p><p>}</p><p>这段代码就是给内置String函数的prototype扩展了一个trim方法，于是所有的String类对象都有了trim方法了。有了这个扩展，今后要去除字符串两段的空白，就不用再分别处理了，因为任何字符串都有了这个扩展功能，只要调用即可，真的很方便。</p><p>当然，几乎很少有人去给Object的prototype添加方法，因为那会影响到所有的对象，除非在你的架构中这种方法的确是所有对象都需要的。</p><p>前两年，微软在设计AJAX类库的初期，用了一种被称为“闭包”(closure)的技术来模拟“类”。其大致模型如下：</p><p>function Person(firstName, lastName, age)</p><p>{</p><p>//私有变量：</p><p>var _firstName = firstName;</p><p>var _lastName = lastName;</p><p>//公共变量:</p><p>this.age = age;</p><p>//方法：</p><p>this.getName = function()</p><p>{</p><p>return(firstName + ” ” + lastName);</p><p>};</p><p>this.SayHello = function()</p><p>{</p><p>alert(“Hello, I’m ” + firstName + ” ” + lastName);</p><p>};</p><p>};</p><p>var BillGates = new Person(“Bill”, “Gates”, 53);</p><p>var SteveJobs = new Person(“Steve”, “Jobs”, 53);</p><p>BillGates.SayHello();</p><p>SteveJobs.SayHello();</p><p>alert(BillGates.getName() + ” ” + BillGates.age);</p><p>alert(BillGates.firstName);     //这里不能访问到私有变量</p><p>很显然，这种模型的类描述特别象C#语言的描述形式，在一个构造函数里依次定义了私有成员、公共属性和可用的方法，显得非常优雅嘛。特别是“闭包”机制可以模拟对私有成员的保护机制，做得非常漂亮。</p><p>所谓的“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层外层函数体中的临时变量。这使得只 要目标对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了， 但在目标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是 对应新的值，和上次那次调用的是各自独立的。的确很巧妙！</p><p>但是前面我们说过，给每一个对象设置一份方法是一种很大的浪费。还有，“闭包”这种间接保持变量值的机制，往往会给JavaSript的垃圾回收器 制造难题。特别是遇到对象间复杂的循环引用时，垃圾回收的判断逻辑非常复杂。无独有偶，IE浏览器早期版本确实存在JavaSript垃圾回收方面的内存 泄漏问题。再加上“闭包”模型在性能测试方面的表现不佳，微软最终放弃了“闭包”模型，而改用“原型”模型。正所谓“有得必有失”嘛。</p><p>原型模型需要一个构造函数来定义对象的成员，而方法却依附在该构造函数的原型上。大致写法如下：</p><p>//定义构造函数</p><p>function Person(name)</p><p>{</p><p>this.name = name;   //在构造函数中定义成员</p><p>};</p><p>//方法定义到构造函数的prototype上</p><p>Person.prototype.SayHello = function()</p><p>{</p><p>alert(“Hello, I’m ” + this.name);</p><p>};</p><p>//子类构造函数</p><p>function Employee(name, salary)</p><p>{</p><p>Person.call(this, name);    //调用上层构造函数</p><p>this.salary = salary;       //扩展的成员</p><p>};</p><p>//子类构造函数首先需要用上层构造函数来建立prototype对象，实现继承的概念</p><p>Employee.prototype = new Person()   //只需要其prototype的方法，此对象的成员没有任何意义！</p><p>//子类方法也定义到构造函数之上</p><p>Employee.prototype.ShowMeTheMoney = function()</p><p>{</p><p>alert(this.name + ” $” + this.salary);</p><p>};</p><p>var BillGates = new Person(“Bill Gates”);</p><p>BillGates.SayHello();</p><p>var SteveJobs = new Employee(“Steve Jobs”, 1234);</p><p>SteveJobs.SayHello();</p><p>SteveJobs.ShowMeTheMoney();</p><p>原型类模型虽然不能模拟真正的私有变量，而且也要分两部分来定义类，显得不怎么 “优雅”。不过，对象间的方法是共享的，不会遇到垃圾回收问题，而且性能优于“闭包”模型。正所谓“有失必有得”嘛。</p><p>在原型模型中，为了实现类继承，必须首先将子类构造函数的prototype设置为一个父类的对象实例。创建这个父类对象实例的目的就是为了构成原 型链，以起到共享上层原型方法作用。但创建这个实例对象时，上层构造函数也会给它设置对象成员，这些对象成员对于继承来说是没有意义的。虽然，我们也没有 给构造函数传递参数，但确实创建了若干没有用的成员，尽管其值是undefined，这也是一种浪费啊。</p><p>唉！世界上没有完美的事情啊！</p><p>原型真谛</p><p>正当我们感概万分时，天空中一道红光闪过，祥云中出现了观音菩萨。只见她手持玉净瓶，轻拂翠柳枝，洒下几滴甘露，顿时让JavaScript又添新的灵气。</p><p>观音洒下的甘露在JavaScript的世界里凝结成块，成为了一种称为“语法甘露”的东西。这种语法甘露可以让我们编写的代码看起来更象对象语言。</p><p>要想知道这“语法甘露”为何物，就请君侧耳细听。</p><p>在理解这些语法甘露之前，我们需要重新再回顾一下JavaScript构造对象的过程。</p><p>我们已经知道，用 var anObject = new aFunction() 形式创建对象的过程实际上可以分为三步：第一步是建立一个新对象；第二步将该对象内置的原型对象设置为构造函数prototype引用的那个原型对象；第 三步就是将该对象作为this参数调用构造函数，完成成员设置等初始化工作。对象建立之后，对象上的任何访问和操作都只与对象自身及其原型链上的那串对象 有关，与构造函数再扯不上关系了。换句话说，构造函数只是在创建对象时起到介绍原型对象和初始化对象两个作用。</p><p>那么，我们能否自己定义一个对象来当作原型，并在这个原型上描述类，然后将这个原型设置给新创建的对象，将其当作对象的类呢？我们又能否将这个原型中的一个方法当作构造函数，去初始化新建的对象呢？例如，我们定义这样一个原型对象：</p><p>var Person =  //定义一个对象来作为原型类</p><p>{</p><p>Create: function(name, age)  //这个当构造函数</p><p>{</p><p>this.name = name;</p><p>this.age = age;</p><p>},</p><p>SayHello: function()  //定义方法</p><p>{</p><p>alert(“Hello, I’m ” + this.name);</p><p>},</p><p>HowOld: function()  //定义方法</p><p>{</p><p>alert(this.name + ” is ” + this.age + ” years old.”);</p><p>}</p><p>};</p><p>这个JSON形式的写法多么象一个C#的类啊！既有构造函数，又有各种方法。如果可以用某种形式来创建对象，并将对象的内置的原型设置为上面这个“类”对象，不就相当于创建该类的对象了吗？</p><p>但遗憾的是，我们几乎不能访问到对象内置的原型属性！尽管有些浏览器可以访问到对象的内置原型，但这样做的话就只能限定了用户必须使用那种浏览器。这也几乎不可行。</p><p>那么，我们可不可以通过一个函数对象来做媒介，利用该函数对象的prototype属性来中转这个原型，并用new操作符传递给新建的对象呢？</p><p>其实，象这样的代码就可以实现这一目标：</p><p>function anyfunc(){};           //定义一个函数躯壳</p><p>anyfunc.prototype = Person;     //将原型对象放到中转站prototype</p><p>var BillGates = new anyfunc();  //新建对象的内置原型将是我们期望的原型对象</p><p>不过，这个anyfunc函数只是一个躯壳，在使用过这个躯壳之后它就成了多余的东西了，而且这和直接使用构造函数来创建对象也没啥不同，有点不爽。</p><p>可是，如果我们将这些代码写成一个通用函数，而那个函数躯壳也就成了函数内的函数，这个内部函数不就可以在外层函数退出作用域后自动消亡吗？而且，我们可以将原型对象作为通用函数的参数，让通用函数返回创建的对象。我们需要的就是下面这个形式：</p><p>function New(aClass, aParams)    //通用创建函数</p><p>{</p><p>function new_()     //定义临时的中转函数壳</p><p>{</p><p>aClass.Create.apply(this, aParams);   //调用原型中定义的的构造函数，中转构造逻辑及构造参数</p><p>};</p><p>new_.prototype = aClass;    //准备中转原型对象</p><p>return new new_();          //返回建立最终建立的对象</p><p>};</p><p>var Person =        //定义的类</p><p>{</p><p>Create: function(name, age)</p><p>{</p><p>this.name = name;</p><p>this.age = age;</p><p>},</p><p>SayHello: function()</p><p>{</p><p>alert(“Hello, I’m ” + this.name);</p><p>},</p><p>HowOld: function()</p><p>{</p><p>alert(this.name + ” is ” + this.age + ” years old.”);</p><p>}</p><p>};</p><p>var BillGates = New(Person, [“Bill Gates”, 53]);  //调用通用函数创建对象，并以数组形式传递构造参数</p><p>BillGates.SayHello();</p><p>BillGates.HowOld();</p><p>alert(BillGates.constructor == Object);     //输出：true</p><p>这里的通用函数 New()就是一个“语法甘露”！这个语法甘露不但中转了原型对象，还中转了构造函数逻辑及构造参数。</p><p>有趣的是，每次创建完对象退出 New函数作用域时，临时的new_函数对象会被自动释放。由于new_的prototype属性被设置为新的原型对 象，其原来的原型对象和new_之间就已解开了引用链，临时函数及其原来的原型对象都会被正确回收了。上面代码的最后一句证明，新创建的对象的 constructor属性返回的是Object函数。其实新建的对象自己及其原型里没有constructor属性，那返回的只是最顶层原型对象的构造 函数，即Object。</p><p>有了New这个语法甘露，类的定义就很像C#那些静态对象语言的形式了，这样的代码显得多么文静而优雅啊！</p><p>当然，这个代码仅仅展示了“语法甘露”的概念。我们还需要多一些的语法甘露，才能实现用简洁而优雅的代码书写类层次及其继承关系。好了，我们再来看一个更丰富的示例吧：</p><p>//语法甘露：</p><p>var object =    //定义小写的object基本类，用于实现最基础的方法等</p><p>{</p><p>isA: function(aType)   //一个判断类与类之间以及对象与类之间关系的基础方法</p><p>{</p><p>var self = this;</p><p>while(self)</p><p>{</p><p>if (self == aType)</p><p>return true;</p><p>self = self.Type;</p><p>};</p><p>return false;</p><p>}</p><p>};</p><p>function Class(aBaseClass, aClassDefine)    //创建类的函数，用于声明类及继承关系</p><p>{</p><p>function class_()   //创建类的临时函数壳</p><p>{</p><p>this.Type = aBaseClass;    //我们给每一个类约定一个Type属性，引用其继承的类</p><p>for(var member in aClassDefine)</p><p>this[member] = aClassDefine[member];    //复制类的全部定义到当前创建的类</p><p>};</p><p>class_.prototype = aBaseClass;</p><p>return new class_();</p><p>};</p><p>function New(aClass, aParams)   //创建对象的函数，用于任意类的对象创建</p><p>{</p><p>function new_()     //创建对象的临时函数壳</p><p>{</p><p>this.Type = aClass;    //我们也给每一个对象约定一个Type属性，据此可以访问到对象所属的类</p><p>if (aClass.Create)</p><p>aClass.Create.apply(this, aParams);   //我们约定所有类的构造函数都叫Create，这和DELPHI比较相似</p><p>};</p><p>new_.prototype = aClass;</p><p>return new new_();</p><p>};</p><p>//语法甘露的应用效果：</p><p>var Person = Class(object,      //派生至object基本类</p><p>{</p><p>Create: function(name, age)</p><p>{</p><p>this.name = name;</p><p>this.age = age;</p><p>},</p><p>SayHello: function()</p><p>{</p><p>alert(“Hello, I’m ” + this.name + “, ” + this.age + ” years old.”);</p><p>}</p><p>});</p><p>var Employee = Class(Person,    //派生至Person类，是不是和一般对象语言很相似？</p><p>{</p><p>Create: function(name, age, salary)</p><p>{</p><p>Person.Create.call(this, name, age);  //调用基类的构造函数</p><p>this.salary = salary;</p><p>},</p><p>ShowMeTheMoney: function()</p><p>{</p><p>alert(this.name + ” $” + this.salary);</p><p>}</p><p>});</p><p>var BillGates = New(Person, [“Bill Gates”, 53]);</p><p>var SteveJobs = New(Employee, [“Steve Jobs”, 53, 1234]);</p><p>BillGates.SayHello();</p><p>SteveJobs.SayHello();</p><p>SteveJobs.ShowMeTheMoney();</p><p>var LittleBill = New(BillGates.Type, [“Little Bill”, 6]);   //根据BillGate的类型创建LittleBill</p><p>LittleBill.SayHello();</p><p>alert(BillGates.isA(Person));       //true</p><p>alert(BillGates.isA(Employee));     //false</p><p>alert(SteveJobs.isA(Person));       //true</p><p>alert(Person.isA(Employee));        //false</p><p>alert(Employee.isA(Person));        //true</p><p>“语法甘露”不用太多，只要那么一点点，就能改观整个代码的易读性和流畅性，从而让代码显得更优雅。有了这些语法甘露，JavaScript就很像一般对象语言了，写起代码了感觉也就爽多了！</p><p>令人高兴的是，受这些甘露滋养的JavaScript程序效率会更高。因为其原型对象里既没有了毫无用处的那些对象级的成员，而且还不存在 constructor属性体，少了与构造函数间的牵连，但依旧保持了方法的共享性。这让JavaScript在追溯原型链和搜索属性及方法时，少费许多 工夫啊。</p><p>我们就把这种形式称为“甘露模型”吧！其实，这种“甘露模型”的原型用法才是符合 prototype概念的本意，才是的JavaScript原型的真谛！</p><p>想必微软那些设计AJAX架构的工程师看到这个甘露模型时，肯定后悔没有早点把AJAX部门从美国搬到咱中国的观音庙来，错过了观音菩萨的点化。当 然，我们也只能是在代码的示例中，把Bill Gates当作对象玩玩，真要让他放弃上帝转而皈依我佛肯定是不容易的，机缘未到啊！如果哪天你在微软新出的AJAX类库中看到这种甘露模型，那才是真正 的缘分！</p><p>编程的快乐</p><p>在软件工业迅猛发展的今天，各式各样的编程语言层出不穷，新语言的诞生，旧语言的演化，似乎已经让我们眼花缭乱。为了适应面向对象编程的潮 流，JavaScript语言也在向完全面向对象的方向发展，新的JavaScript标准已经从语义上扩展了许多面向对象的新元素。与此相反的是，许多 静态的对象语言也在向JavaScript 的那种简洁而幽雅的方向发展。例如，新版本的C#语言就吸收了JSON那样的简洁表示法，以及一些其他形式的 JavaScript特性。</p><p>我们应该看到，随着RIA(强互联应用)的发展和普及，AJAX技术也将逐渐淡出江湖，JavaScript也将最终消失或演化成其他形式的语言。 但不管编程语言如何发展和演化，编程世界永远都会在“数据”与“代码”这千丝万缕的纠缠中保持着无限的生机。只要我们能看透这一点，我们就能很容易地学习 和理解软件世界的各种新事物。不管是已熟悉的过程式编程，还是正在发展的函数式编程，以及未来量子纠缠态的大规模并行式编程，我们都有足够的法力来化解一 切复杂的难题。</p><p>佛最后淡淡地说：只要我们放下那些表面的“类”，放下那些对象的“自我”，就能达到一种“对象本无根，类型亦无形”的境界，从而将自我融入到整个宇 宙的生命轮循环中。我们将没有自我，也没有自私的欲望，你就是我，我就是你，你中有我，我中有你。这时，我们再看这生机勃勃的编程世界时，我们的内心将自 然生起无限的慈爱之心，这种慈爱之心不是虚伪而是真诚的。关爱他人就是关爱自己，就是关爱这世界中的一切。那么，我们的心是永远快乐的，我们的程序是永远 快乐的，我们的类是永远快乐的，我们的对象也是永远快乐的。这就是编程的极乐！</p><p>说到这里，在座的比丘都犹如醍醐灌顶，心中豁然开朗。看看左边这位早已喜不自禁，再看看右边那位也是心花怒放。</p><p>蓦然回首时，唯见君拈花微笑…</p>	'
        },
        {
            type:"JavaScript",
            type_url:"/category/technique/javaScript", 
            images:"http://www.daqianduan.com/wp-content/themes/dux/img/thumbnail.png",
            title:'三种简洁的Tab导航（选项卡）',
            describe:'在网页中应用选项卡可以使网页显得更紧凑，结合AJAX技术可以使页面在有限的空间内展现更多的内容。本文主要介绍几种简洁的选项卡效果的实现（不 涉及滑动门和AJAX），附有实例，无图片，兼容性较好，方便大家直接使用。',
            author:"古歌",
            time:"2010-04-19",
            flow:19940,
            comments:[],
            enjoy:1,
            id:"6135.html",
            content:'<p>在网页中应用选项卡可以使网页显得更紧凑，结合AJAX技术可以使页面在有限的空间内展现更多的内容。本文主要介绍几种简洁的选项卡效果的实现（不 涉及滑动门和AJAX），附有实例，无图片，兼容性较好，方便大家直接使用。</p><p>第一种形式: 通过更换显示样式实现，这种很常见，就不多说了。</p><p>CODE:</p><p>&lt;div id=”tabs0″&gt;</p><p>&lt;ul id=”menu0″&gt;</p><p>&lt;li onclick=”setTab(0,0)” &lt;li onclick=”setTab(0,1)”&amp; gt;评论&lt;/li&gt;</p><p>&lt;li onclick=”setTab(0,2)”&gt;技术&lt;/li&amp; gt;</p><p>&lt;li onclick=”setTab(0,3)”&gt;点评&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>&lt;div id=”main0″&gt;</p><p>&lt;ul &lt;ul&gt;&lt;li&gt;评论列表&lt;/li&gt;&lt;/ul&gt;</p><p>&lt;ul&gt;&lt;li&gt;技术列表&lt;/li&gt;&lt;/ul&gt;</p><p>&lt;ul&gt;&lt;li&gt;点评列表&lt;/li&gt;&lt;/ul&gt;</p><p>&lt;/div&gt;</p><p>&lt;/div&gt;</p><p>第 二种形式: 这种结构比较复杂一些，外面加一个相对层(.menu1box)，设置溢出隐藏，将选项卡(#menu1)设为绝对定位，设置层指针为1(z- index:1;)，以便可以遮住下主区块(.main1box)1px的高度。设置主区块的边框为1px的黑边，上空白(margin-top)为 -1px，使上边框伸到选项卡下。当改变选项卡某项(li)的背景为白色时便可遮住一部分主区块的上边框。这样效果就实现了。</p><p>CODE:</p><p>&lt;div id=”tabs1″&gt;</p><p>&lt;div &lt;ul id=”menu1″&gt;</p><p>&lt;li onmouseover=”setTab(1,0)”&gt;&lt;a href=”#” mce_href=”#”&gt;新闻&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li onmouseover=”setTab(1,1)”&gt;&lt;a href=”#” mce_href=”#”&gt;评论&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li onmouseover=”setTab(1,2)”&gt;&lt;a href=”#” mce_href=”#”&gt;技术&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li onmouseover=”setTab(1,3)”&gt;&lt;a href=”#” mce_href=”#”&gt;点评&lt;/a&gt;&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>&lt;/div&gt;</p><p>&lt;div &lt;div id=”main1″&gt;</p><p>&lt;ul &lt;ul&gt;&lt;li&gt;评论列表&lt;/li&gt;&lt;/ul&gt;</p><p>&lt;ul&gt;&lt;li&gt;技术列表&lt;/li&gt;&lt;/ul&gt;</p><p>&lt;ul&gt;&lt;li&gt;点评列表&lt;/li&gt;&lt;/ul&gt;</p><p>&lt;/div&gt;</p><p>&lt;/div&gt;</p><p>&lt;/div&gt;</p><p>第 一、二种形式的JS代码:</p><p>CODE:</p><p>function setTab(m,n){</p><p>var tli=document.getElementById(”menu”+m).getElementsByTagName(”li”); /*获取选项卡的LI对象*/</p><p>var mli=document.getElementById(”main”+m).getElementsByTagName(”ul”); /*获取主显示区域对象*/</p><p>for(i=0;i&lt;tli.length;i++){</p><p>tli[i].className=i==n?”hover”:””; /*更改选项卡的LI对象的样式，如果是选定的项则使用.hover样式*/</p><p>mli[i].style.display=i==n?”block”:”none”; /*确定主区域显示哪一个对象*/</p><p>}</p><p>}</p><p>第 三种形式: 这也是一种不常用的方式，加一个相对层(.menu2box)，利用一个背景层(#tip2)定位，通过改变层的左距离(left)实现效果。</p><p>CODE:</p><p>&lt;div id=”tabs2″&gt;</p><p>&lt;div &lt;div id=”tip2″&gt;&lt;/div&gt;</p><p>&lt;ul id=”menu2″&gt;</p><p>&lt;li onmouseover=”nowtab(2,0)”&gt;&lt;a href=”#” mce_href=”#”&gt;新闻&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li onmouseover=”nowtab(2,1)”&gt;&lt;a href=”#” mce_href=”#”&gt;评论&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li onmouseover=”nowtab(2,2)”&gt;&lt;a href=”#” mce_href=”#”&gt;技术&lt;/a&gt;&lt;/li&gt;</p><p>&lt;li onmouseover=”nowtab(2,3)”&gt;&lt;a href=”#” mce_href=”#”&gt;点评&lt;/a&gt;&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>&lt;/div&gt;</p><p>&lt;div id=”main2″&gt;</p><p>新闻内容</p><p>&lt;/div&gt;</p><p>&lt;/div&gt;</p>	'
        }

    
]